
minicar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08006108  08006108  00016108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006400  08006400  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006400  08006400  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006400  08006400  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001e0  080065e8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080065e8  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014760  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000343b  00000000  00000000  00034969  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  00038bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c7b3  00000000  00000000  000398f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2b5  00000000  00000000  000560a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db9d  00000000  00000000  00064358  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000f1f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080060f0 	.word	0x080060f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080060f0 	.word	0x080060f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <HAL_UART_RxIdleCallback>:

	HAL_UART_Transmit(&huart1, ptr, len, 100);

	return len;
}
void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	handle_idle(huart);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 fa1b 	bl	80014b4 <handle_idle>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f000 fc98 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f824 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 f9be 	bl	8001414 <MX_GPIO_Init>
  MX_DMA_Init();
 8001098:	f000 f99e 	bl	80013d8 <MX_DMA_Init>
  MX_TIM1_Init();
 800109c:	f000 f860 	bl	8001160 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010a0:	f000 f8e2 	bl	8001268 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010a4:	f000 f944 	bl	8001330 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010a8:	f000 f96c 	bl	8001384 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	servo_pwm_htim = &htim1;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <main+0x3c>)
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <main+0x40>)
 80010b0:	601a      	str	r2, [r3, #0]
	motor_pwm_htim = &htim2;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <main+0x44>)
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <main+0x48>)
 80010b6:	601a      	str	r2, [r3, #0]
	connect_huart = &huart2;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <main+0x4c>)
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <main+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]

	loop();
 80010be:	f000 fa13 	bl	80014e8 <loop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010c2:	e7fe      	b.n	80010c2 <main+0x3a>
 80010c4:	20000300 	.word	0x20000300
 80010c8:	200002b8 	.word	0x200002b8
 80010cc:	20000390 	.word	0x20000390
 80010d0:	20000304 	.word	0x20000304
 80010d4:	20000274 	.word	0x20000274
 80010d8:	2000034c 	.word	0x2000034c

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	; 0x40
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fa10 	bl	8004510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001112:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f001 f9f1 	bl	8002504 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001128:	f000 f9be 	bl	80014a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fc5c 	bl	8002a04 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001152:	f000 f9a9 	bl	80014a8 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3740      	adds	r7, #64	; 0x40
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b092      	sub	sp, #72	; 0x48
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2220      	movs	r2, #32
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f9c0 	bl	8004510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001190:	4b33      	ldr	r3, [pc, #204]	; (8001260 <MX_TIM1_Init+0x100>)
 8001192:	4a34      	ldr	r2, [pc, #208]	; (8001264 <MX_TIM1_Init+0x104>)
 8001194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <MX_TIM1_Init+0x100>)
 8001198:	223f      	movs	r2, #63	; 0x3f
 800119a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MX_TIM1_Init+0x100>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_TIM1_Init+0x100>)
 80011a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_TIM1_Init+0x100>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM1_Init+0x100>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM1_Init+0x100>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <MX_TIM1_Init+0x100>)
 80011be:	f001 fdbd 	bl	8002d3c <HAL_TIM_PWM_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011c8:	f000 f96e 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d8:	4619      	mov	r1, r3
 80011da:	4821      	ldr	r0, [pc, #132]	; (8001260 <MX_TIM1_Init+0x100>)
 80011dc:	f002 f96c 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011e6:	f000 f95f 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 9999;
 80011ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <MX_TIM1_Init+0x100>)
 8001212:	f001 fe85 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800121c:	f000 f944 	bl	80014a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM1_Init+0x100>)
 8001244:	f002 f996 	bl	8003574 <HAL_TIMEx_ConfigBreakDeadTime>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800124e:	f000 f92b 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM1_Init+0x100>)
 8001254:	f000 f9d2 	bl	80015fc <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3748      	adds	r7, #72	; 0x48
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200002b8 	.word	0x200002b8
 8001264:	40012c00 	.word	0x40012c00

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <MX_TIM2_Init+0xc4>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001290:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <MX_TIM2_Init+0xc4>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <MX_TIM2_Init+0xc4>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <MX_TIM2_Init+0xc4>)
 80012a0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <MX_TIM2_Init+0xc4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <MX_TIM2_Init+0xc4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <MX_TIM2_Init+0xc4>)
 80012b4:	f001 fd42 	bl	8002d3c <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012be:	f000 f8f3 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4619      	mov	r1, r3
 80012d0:	4816      	ldr	r0, [pc, #88]	; (800132c <MX_TIM2_Init+0xc4>)
 80012d2:	f002 f8f1 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012dc:	f000 f8e4 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_TIM2_Init+0xc4>)
 80012f8:	f001 fe12 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001302:	f000 f8d1 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2204      	movs	r2, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_TIM2_Init+0xc4>)
 800130e:	f001 fe07 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001318:	f000 f8c6 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <MX_TIM2_Init+0xc4>)
 800131e:	f000 f96d 	bl	80015fc <HAL_TIM_MspPostInit>

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000304 	.word	0x20000304

08001330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_USART1_UART_Init+0x4c>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_USART1_UART_Init+0x50>)
 8001338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_USART1_UART_Init+0x4c>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_USART1_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_USART1_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_USART1_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_USART1_UART_Init+0x4c>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_USART1_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_USART1_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USART1_UART_Init+0x4c>)
 8001368:	f002 f955 	bl	8003616 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001372:	f000 f899 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000278 	.word	0x20000278
 8001380:	40013800 	.word	0x40013800

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f002 f92b 	bl	8003616 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f000 f86f 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000034c 	.word	0x2000034c
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_DMA_Init+0x38>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <MX_DMA_Init+0x38>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6153      	str	r3, [r2, #20]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_DMA_Init+0x38>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2010      	movs	r0, #16
 80013fc:	f000 fc3b 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001400:	2010      	movs	r0, #16
 8001402:	f000 fc54 	bl	8001cae <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_GPIO_Init+0x8c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_GPIO_Init+0x8c>)
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_GPIO_Init+0x8c>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_GPIO_Init+0x8c>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <MX_GPIO_Init+0x8c>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_GPIO_Init+0x8c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_GPIO_Init+0x8c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <MX_GPIO_Init+0x8c>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_GPIO_Init+0x8c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2101      	movs	r1, #1
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0x90>)
 8001476:	f001 f82d 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nSleep_Pin */
  GPIO_InitStruct.Pin = nSleep_Pin;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSleep_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_GPIO_Init+0x90>)
 8001492:	f000 fec5 	bl	8002220 <HAL_GPIO_Init>

}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010c00 	.word	0x40010c00

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <handle_idle>:
extern TIM_HandleTypeDef *motor_pwm_htim;
extern UART_HandleTypeDef *connect_huart;

Car *car;

void handle_idle(UART_HandleTypeDef *huart) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0210 	bic.w	r2, r2, #16
 80014ca:	60da      	str	r2, [r3, #12]
	car->handle_rx_idle(huart);
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <handle_idle+0x30>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fd60 	bl	8003f9a <_ZN3Car14handle_rx_idleEP20__UART_HandleTypeDef>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001fc 	.word	0x200001fc

080014e8 <loop>:

void loop() {
 80014e8:	b598      	push	{r3, r4, r7, lr}
 80014ea:	af00      	add	r7, sp, #0

	car = new Car(servo_pwm_htim, motor_pwm_htim, connect_huart);
 80014ec:	200c      	movs	r0, #12
 80014ee:	f002 ffa7 	bl	8004440 <_Znwj>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461c      	mov	r4, r3
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <loop+0x40>)
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <loop+0x44>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <loop+0x48>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4620      	mov	r0, r4
 8001504:	f002 fd1c 	bl	8003f40 <_ZN3CarC1EP17TIM_HandleTypeDefS1_P20__UART_HandleTypeDef>
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <loop+0x4c>)
 800150a:	601c      	str	r4, [r3, #0]

	car->start();
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <loop+0x4c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fd56 	bl	8003fc2 <_ZN3Car5startEv>
//	car->test();

	for (;;) {
		car->update();
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <loop+0x4c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fd71 	bl	8004002 <_ZN3Car6updateEv>
		HAL_Delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f000 faaf 	bl	8001a84 <HAL_Delay>
		car->update();
 8001526:	e7f6      	b.n	8001516 <loop+0x2e>
 8001528:	20000300 	.word	0x20000300
 800152c:	20000390 	.word	0x20000390
 8001530:	20000274 	.word	0x20000274
 8001534:	200001fc 	.word	0x200001fc

08001538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_MspInit+0x5c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x5c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_MspInit+0x60>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_MspInit+0x60>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_TIM_PWM_MspInit+0x58>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10c      	bne.n	80015c8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c6:	e010      	b.n	80015ea <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d10b      	bne.n	80015ea <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_TIM_MspPostInit+0x98>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d119      	bne.n	8001650 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_TIM_MspPostInit+0x9c>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_TIM_MspPostInit+0x9c>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_TIM_MspPostInit+0x9c>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	4814      	ldr	r0, [pc, #80]	; (800169c <HAL_TIM_MspPostInit+0xa0>)
 800164a:	f000 fde9 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800164e:	e01c      	b.n	800168a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001658:	d117      	bne.n	800168a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_TIM_MspPostInit+0x9c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_TIM_MspPostInit+0x9c>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_MspPostInit+0x9c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001672:	2303      	movs	r3, #3
 8001674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_TIM_MspPostInit+0xa0>)
 8001686:	f000 fdcb 	bl	8002220 <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40010800 	.word	0x40010800

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a4e      	ldr	r2, [pc, #312]	; (80017f4 <HAL_UART_MspInit+0x154>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d132      	bne.n	8001726 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c0:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <HAL_UART_MspInit+0x158>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_UART_MspInit+0x158>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_UART_MspInit+0x158>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_UART_MspInit+0x158>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_UART_MspInit+0x158>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_UART_MspInit+0x158>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4619      	mov	r1, r3
 8001704:	483d      	ldr	r0, [pc, #244]	; (80017fc <HAL_UART_MspInit+0x15c>)
 8001706:	f000 fd8b 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800170a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4619      	mov	r1, r3
 800171e:	4837      	ldr	r0, [pc, #220]	; (80017fc <HAL_UART_MspInit+0x15c>)
 8001720:	f000 fd7e 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001724:	e062      	b.n	80017ec <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a35      	ldr	r2, [pc, #212]	; (8001800 <HAL_UART_MspInit+0x160>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d15d      	bne.n	80017ec <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_UART_MspInit+0x158>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <HAL_UART_MspInit+0x158>)
 8001736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173a:	61d3      	str	r3, [r2, #28]
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_UART_MspInit+0x158>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_UART_MspInit+0x158>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_UART_MspInit+0x158>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_UART_MspInit+0x158>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001760:	2304      	movs	r3, #4
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4619      	mov	r1, r3
 8001772:	4822      	ldr	r0, [pc, #136]	; (80017fc <HAL_UART_MspInit+0x15c>)
 8001774:	f000 fd54 	bl	8002220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001778:	2308      	movs	r3, #8
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	4619      	mov	r1, r3
 800178a:	481c      	ldr	r0, [pc, #112]	; (80017fc <HAL_UART_MspInit+0x15c>)
 800178c:	f000 fd48 	bl	8002220 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_UART_MspInit+0x164>)
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_UART_MspInit+0x168>)
 8001794:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_UART_MspInit+0x164>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x164>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017c0:	4810      	ldr	r0, [pc, #64]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017c2:	f000 fa8f 	bl	8001ce4 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80017cc:	f7ff fe6c 	bl	80014a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_UART_MspInit+0x164>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2026      	movs	r0, #38	; 0x26
 80017e2:	f000 fa48 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e6:	2026      	movs	r0, #38	; 0x26
 80017e8:	f000 fa61 	bl	8001cae <HAL_NVIC_EnableIRQ>
}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40004400 	.word	0x40004400
 8001804:	20000230 	.word	0x20000230
 8001808:	4002006c 	.word	0x4002006c

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <HardFault_Handler+0x4>

0800181e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <MemManage_Handler+0x4>

08001824 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <BusFault_Handler+0x4>

0800182a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <UsageFault_Handler+0x4>

08001830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 f8f8 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <DMA1_Channel6_IRQHandler+0x10>)
 8001866:	f000 fba7 	bl	8001fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000230 	.word	0x20000230

08001874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <USART2_IRQHandler+0x40>)
 800187c:	f001 fff4 	bl	8003868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (__HAL_UART_GET_FLAG (&huart2, UART_FLAG_IDLE))
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <USART2_IRQHandler+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b10      	cmp	r3, #16
 800188c:	d10d      	bne.n	80018aa <USART2_IRQHandler+0x36>

    {

	  HAL_UART_RxIdleCallback (&huart2);
 800188e:	4809      	ldr	r0, [pc, #36]	; (80018b4 <USART2_IRQHandler+0x40>)
 8001890:	f7ff fbee 	bl	8001070 <HAL_UART_RxIdleCallback>

     __HAL_UART_CLEAR_IDLEFLAG (&huart2);
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <USART2_IRQHandler+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <USART2_IRQHandler+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

    }


  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000034c 	.word	0x2000034c

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <_kill>:

int _kill(int pid, int sig)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018d0:	f002 fdec 	bl	80044ac <__errno>
 80018d4:	4602      	mov	r2, r0
 80018d6:	2316      	movs	r3, #22
 80018d8:	6013      	str	r3, [r2, #0]
	return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_exit>:

void _exit (int status)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffe7 	bl	80018c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f8:	e7fe      	b.n	80018f8 <_exit+0x12>
	...

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f002 fdbe 	bl	80044ac <__errno>
 8001930:	4602      	mov	r2, r0
 8001932:	230c      	movs	r3, #12
 8001934:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20005000 	.word	0x20005000
 800195c:	00000400 	.word	0x00000400
 8001960:	20000200 	.word	0x20000200
 8001964:	200003a0 	.word	0x200003a0

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001974:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001976:	e003      	b.n	8001980 <LoopCopyDataInit>

08001978 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800197a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800197c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800197e:	3104      	adds	r1, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001984:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001986:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001988:	d3f6      	bcc.n	8001978 <CopyDataInit>
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800198c:	e002      	b.n	8001994 <LoopFillZerobss>

0800198e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001990:	f842 3b04 	str.w	r3, [r2], #4

08001994 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001998:	d3f9      	bcc.n	800198e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800199a:	f7ff ffe5 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f002 fd8b 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7ff fb71 	bl	8001088 <main>
  bx lr
 80019a6:	4770      	bx	lr
  ldr r3, =_sidata
 80019a8:	08006408 	.word	0x08006408
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80019b4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80019b8:	2000039c 	.word	0x2000039c

080019bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_2_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x28>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f945 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fdac 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f95d 	bl	8001cca <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a28:	f000 f925 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x1c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x20>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_IncTick+0x20>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	20000394 	.word	0x20000394

08001a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <HAL_GetTick+0x10>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000394 	.word	0x20000394

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_Delay+0x40>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffe0 	bl	8001a70 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4906      	ldr	r1, [pc, #24]	; (8001b60 <__NVIC_EnableIRQ+0x34>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c40:	f7ff ff90 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff2d 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff42 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff90 	bl	8001bb8 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5f 	bl	8001b64 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff35 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e043      	b.n	8001d82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_DMA_Init+0xa8>)
 8001d02:	4413      	add	r3, r2
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_DMA_Init+0xac>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	009a      	lsls	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_DMA_Init+0xb0>)
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	bffdfff8 	.word	0xbffdfff8
 8001d90:	cccccccd 	.word	0xcccccccd
 8001d94:	40020000 	.word	0x40020000

08001d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_DMA_Start_IT+0x20>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e04a      	b.n	8001e4e <HAL_DMA_Start_IT+0xb6>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d13a      	bne.n	8001e40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f9e8 	bl	80021c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 020e 	orr.w	r2, r2, #14
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0204 	bic.w	r2, r2, #4
 8001e1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 020a 	orr.w	r2, r2, #10
 8001e2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e005      	b.n	8001e4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e020      	b.n	8001ec0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 020e 	bic.w	r2, r2, #14
 8001e8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d005      	beq.n	8001eee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e051      	b.n	8001f92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 020e 	bic.w	r2, r2, #14
 8001efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_DMA_Abort_IT+0xd0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d029      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xa0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <HAL_DMA_Abort_IT+0xd4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x9c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_DMA_Abort_IT+0xd8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01a      	beq.n	8001f62 <HAL_DMA_Abort_IT+0x96>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_DMA_Abort_IT+0xdc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d012      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x90>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_DMA_Abort_IT+0xe0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00a      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x8a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <HAL_DMA_Abort_IT+0xe4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d102      	bne.n	8001f50 <HAL_DMA_Abort_IT+0x84>
 8001f4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f4e:	e00e      	b.n	8001f6e <HAL_DMA_Abort_IT+0xa2>
 8001f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f54:	e00b      	b.n	8001f6e <HAL_DMA_Abort_IT+0xa2>
 8001f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5a:	e008      	b.n	8001f6e <HAL_DMA_Abort_IT+0xa2>
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	e005      	b.n	8001f6e <HAL_DMA_Abort_IT+0xa2>
 8001f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f66:	e002      	b.n	8001f6e <HAL_DMA_Abort_IT+0xa2>
 8001f68:	2310      	movs	r3, #16
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_Abort_IT+0xa2>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_DMA_Abort_IT+0xe8>)
 8001f70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
    } 
  }
  return status;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40020008 	.word	0x40020008
 8001fa0:	4002001c 	.word	0x4002001c
 8001fa4:	40020030 	.word	0x40020030
 8001fa8:	40020044 	.word	0x40020044
 8001fac:	40020058 	.word	0x40020058
 8001fb0:	4002006c 	.word	0x4002006c
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d04f      	beq.n	8002080 <HAL_DMA_IRQHandler+0xc8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d04a      	beq.n	8002080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0204 	bic.w	r2, r2, #4
 8002006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <HAL_DMA_IRQHandler+0x1f0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d029      	beq.n	8002066 <HAL_DMA_IRQHandler+0xae>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a65      	ldr	r2, [pc, #404]	; (80021ac <HAL_DMA_IRQHandler+0x1f4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_DMA_IRQHandler+0xaa>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a63      	ldr	r2, [pc, #396]	; (80021b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01a      	beq.n	800205c <HAL_DMA_IRQHandler+0xa4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a62      	ldr	r2, [pc, #392]	; (80021b4 <HAL_DMA_IRQHandler+0x1fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d012      	beq.n	8002056 <HAL_DMA_IRQHandler+0x9e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a60      	ldr	r2, [pc, #384]	; (80021b8 <HAL_DMA_IRQHandler+0x200>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00a      	beq.n	8002050 <HAL_DMA_IRQHandler+0x98>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5f      	ldr	r2, [pc, #380]	; (80021bc <HAL_DMA_IRQHandler+0x204>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d102      	bne.n	800204a <HAL_DMA_IRQHandler+0x92>
 8002044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002048:	e00e      	b.n	8002068 <HAL_DMA_IRQHandler+0xb0>
 800204a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800204e:	e00b      	b.n	8002068 <HAL_DMA_IRQHandler+0xb0>
 8002050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002054:	e008      	b.n	8002068 <HAL_DMA_IRQHandler+0xb0>
 8002056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800205a:	e005      	b.n	8002068 <HAL_DMA_IRQHandler+0xb0>
 800205c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002060:	e002      	b.n	8002068 <HAL_DMA_IRQHandler+0xb0>
 8002062:	2340      	movs	r3, #64	; 0x40
 8002064:	e000      	b.n	8002068 <HAL_DMA_IRQHandler+0xb0>
 8002066:	2304      	movs	r3, #4
 8002068:	4a55      	ldr	r2, [pc, #340]	; (80021c0 <HAL_DMA_IRQHandler+0x208>)
 800206a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8094 	beq.w	800219e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800207e:	e08e      	b.n	800219e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2202      	movs	r2, #2
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d056      	beq.n	800213e <HAL_DMA_IRQHandler+0x186>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d051      	beq.n	800213e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020a 	bic.w	r2, r2, #10
 80020b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a38      	ldr	r2, [pc, #224]	; (80021a8 <HAL_DMA_IRQHandler+0x1f0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d029      	beq.n	800211e <HAL_DMA_IRQHandler+0x166>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a37      	ldr	r2, [pc, #220]	; (80021ac <HAL_DMA_IRQHandler+0x1f4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d022      	beq.n	800211a <HAL_DMA_IRQHandler+0x162>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <HAL_DMA_IRQHandler+0x1f8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01a      	beq.n	8002114 <HAL_DMA_IRQHandler+0x15c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a34      	ldr	r2, [pc, #208]	; (80021b4 <HAL_DMA_IRQHandler+0x1fc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d012      	beq.n	800210e <HAL_DMA_IRQHandler+0x156>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a32      	ldr	r2, [pc, #200]	; (80021b8 <HAL_DMA_IRQHandler+0x200>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x150>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a31      	ldr	r2, [pc, #196]	; (80021bc <HAL_DMA_IRQHandler+0x204>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d102      	bne.n	8002102 <HAL_DMA_IRQHandler+0x14a>
 80020fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002100:	e00e      	b.n	8002120 <HAL_DMA_IRQHandler+0x168>
 8002102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002106:	e00b      	b.n	8002120 <HAL_DMA_IRQHandler+0x168>
 8002108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800210c:	e008      	b.n	8002120 <HAL_DMA_IRQHandler+0x168>
 800210e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002112:	e005      	b.n	8002120 <HAL_DMA_IRQHandler+0x168>
 8002114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002118:	e002      	b.n	8002120 <HAL_DMA_IRQHandler+0x168>
 800211a:	2320      	movs	r3, #32
 800211c:	e000      	b.n	8002120 <HAL_DMA_IRQHandler+0x168>
 800211e:	2302      	movs	r3, #2
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_DMA_IRQHandler+0x208>)
 8002122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d034      	beq.n	800219e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800213c:	e02f      	b.n	800219e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2208      	movs	r2, #8
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x1e8>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d023      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 020e 	bic.w	r2, r2, #14
 8002166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
    }
  }
  return;
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
}
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40020008 	.word	0x40020008
 80021ac:	4002001c 	.word	0x4002001c
 80021b0:	40020030 	.word	0x40020030
 80021b4:	40020044 	.word	0x40020044
 80021b8:	40020058 	.word	0x40020058
 80021bc:	4002006c 	.word	0x4002006c
 80021c0:	40020000 	.word	0x40020000

080021c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d108      	bne.n	8002204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002202:	e007      	b.n	8002214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002232:	e127      	b.n	8002484 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002234:	2201      	movs	r2, #1
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8116 	bne.w	800247e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b12      	cmp	r3, #18
 8002258:	d034      	beq.n	80022c4 <HAL_GPIO_Init+0xa4>
 800225a:	2b12      	cmp	r3, #18
 800225c:	d80d      	bhi.n	800227a <HAL_GPIO_Init+0x5a>
 800225e:	2b02      	cmp	r3, #2
 8002260:	d02b      	beq.n	80022ba <HAL_GPIO_Init+0x9a>
 8002262:	2b02      	cmp	r3, #2
 8002264:	d804      	bhi.n	8002270 <HAL_GPIO_Init+0x50>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d031      	beq.n	80022ce <HAL_GPIO_Init+0xae>
 800226a:	2b01      	cmp	r3, #1
 800226c:	d01c      	beq.n	80022a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226e:	e048      	b.n	8002302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002270:	2b03      	cmp	r3, #3
 8002272:	d043      	beq.n	80022fc <HAL_GPIO_Init+0xdc>
 8002274:	2b11      	cmp	r3, #17
 8002276:	d01b      	beq.n	80022b0 <HAL_GPIO_Init+0x90>
          break;
 8002278:	e043      	b.n	8002302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800227a:	4a89      	ldr	r2, [pc, #548]	; (80024a0 <HAL_GPIO_Init+0x280>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d026      	beq.n	80022ce <HAL_GPIO_Init+0xae>
 8002280:	4a87      	ldr	r2, [pc, #540]	; (80024a0 <HAL_GPIO_Init+0x280>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d806      	bhi.n	8002294 <HAL_GPIO_Init+0x74>
 8002286:	4a87      	ldr	r2, [pc, #540]	; (80024a4 <HAL_GPIO_Init+0x284>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d020      	beq.n	80022ce <HAL_GPIO_Init+0xae>
 800228c:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <HAL_GPIO_Init+0x288>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01d      	beq.n	80022ce <HAL_GPIO_Init+0xae>
          break;
 8002292:	e036      	b.n	8002302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002294:	4a85      	ldr	r2, [pc, #532]	; (80024ac <HAL_GPIO_Init+0x28c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0xae>
 800229a:	4a85      	ldr	r2, [pc, #532]	; (80024b0 <HAL_GPIO_Init+0x290>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d016      	beq.n	80022ce <HAL_GPIO_Init+0xae>
 80022a0:	4a84      	ldr	r2, [pc, #528]	; (80024b4 <HAL_GPIO_Init+0x294>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0xae>
          break;
 80022a6:	e02c      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e028      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	3304      	adds	r3, #4
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e023      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	3308      	adds	r3, #8
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e01e      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	330c      	adds	r3, #12
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e019      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022d6:	2304      	movs	r3, #4
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e012      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	611a      	str	r2, [r3, #16]
          break;
 80022ee:	e008      	b.n	8002302 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	615a      	str	r2, [r3, #20]
          break;
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2bff      	cmp	r3, #255	; 0xff
 8002306:	d801      	bhi.n	800230c <HAL_GPIO_Init+0xec>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	e001      	b.n	8002310 <HAL_GPIO_Init+0xf0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2bff      	cmp	r3, #255	; 0xff
 8002316:	d802      	bhi.n	800231e <HAL_GPIO_Init+0xfe>
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x104>
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3b08      	subs	r3, #8
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	210f      	movs	r1, #15
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	401a      	ands	r2, r3
 8002336:	6a39      	ldr	r1, [r7, #32]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	431a      	orrs	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8096 	beq.w	800247e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002352:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_GPIO_Init+0x298>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <HAL_GPIO_Init+0x298>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6193      	str	r3, [r2, #24]
 800235e:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <HAL_GPIO_Init+0x298>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800236a:	4a54      	ldr	r2, [pc, #336]	; (80024bc <HAL_GPIO_Init+0x29c>)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_GPIO_Init+0x2a0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x19e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4a      	ldr	r2, [pc, #296]	; (80024c4 <HAL_GPIO_Init+0x2a4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x19a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a49      	ldr	r2, [pc, #292]	; (80024c8 <HAL_GPIO_Init+0x2a8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x196>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a48      	ldr	r2, [pc, #288]	; (80024cc <HAL_GPIO_Init+0x2ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x192>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x1a0>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x1a0>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x1a0>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x1a0>
 80023be:	2300      	movs	r3, #0
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	f002 0203 	and.w	r2, r2, #3
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023d0:	493a      	ldr	r1, [pc, #232]	; (80024bc <HAL_GPIO_Init+0x29c>)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4938      	ldr	r1, [pc, #224]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
 80023f6:	e006      	b.n	8002406 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	43db      	mvns	r3, r3
 8002400:	4933      	ldr	r1, [pc, #204]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002402:	4013      	ands	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002412:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	492e      	ldr	r1, [pc, #184]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	43db      	mvns	r3, r3
 8002428:	4929      	ldr	r1, [pc, #164]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 800242a:	4013      	ands	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4924      	ldr	r1, [pc, #144]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
 8002446:	e006      	b.n	8002456 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	43db      	mvns	r3, r3
 8002450:	491f      	ldr	r1, [pc, #124]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002452:	4013      	ands	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	491a      	ldr	r1, [pc, #104]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	43db      	mvns	r3, r3
 8002478:	4915      	ldr	r1, [pc, #84]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 800247a:	4013      	ands	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f aed0 	bne.w	8002234 <HAL_GPIO_Init+0x14>
  }
}
 8002494:	bf00      	nop
 8002496:	372c      	adds	r7, #44	; 0x2c
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	10210000 	.word	0x10210000
 80024a4:	10110000 	.word	0x10110000
 80024a8:	10120000 	.word	0x10120000
 80024ac:	10310000 	.word	0x10310000
 80024b0:	10320000 	.word	0x10320000
 80024b4:	10220000 	.word	0x10220000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40010800 	.word	0x40010800
 80024c4:	40010c00 	.word	0x40010c00
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40011400 	.word	0x40011400
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e26c      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002524:	4b92      	ldr	r3, [pc, #584]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00c      	beq.n	800254a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002530:	4b8f      	ldr	r3, [pc, #572]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d112      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
 800253c:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4b89      	ldr	r3, [pc, #548]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d06c      	beq.n	8002630 <HAL_RCC_OscConfig+0x12c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d168      	bne.n	8002630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e246      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x76>
 800256c:	4b80      	ldr	r3, [pc, #512]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a7f      	ldr	r2, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e02e      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7a      	ldr	r2, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b78      	ldr	r3, [pc, #480]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a77      	ldr	r2, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0xbc>
 80025a6:	4b72      	ldr	r3, [pc, #456]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a71      	ldr	r2, [pc, #452]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 80025c0:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a67      	ldr	r2, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fa46 	bl	8001a70 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fa42 	bl	8001a70 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1fa      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe4>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff fa32 	bl	8001a70 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fa2e 	bl	8001a70 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1e6      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x10c>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263e:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800264a:	4b49      	ldr	r3, [pc, #292]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x18c>
 8002656:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x176>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1ba      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4939      	ldr	r1, [pc, #228]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e03a      	b.n	8002706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_RCC_OscConfig+0x270>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7ff f9e7 	bl	8001a70 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7ff f9e3 	bl	8001a70 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e19b      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4927      	ldr	r1, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCC_OscConfig+0x270>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff f9c6 	bl	8001a70 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7ff f9c2 	bl	8001a70 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e17a      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03a      	beq.n	8002788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d019      	beq.n	800274e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7ff f9a6 	bl	8001a70 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7ff f9a2 	bl	8001a70 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e15a      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_OscConfig+0x26c>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002746:	2001      	movs	r0, #1
 8002748:	f000 fada 	bl	8002d00 <RCC_Delay>
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCC_OscConfig+0x274>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7ff f98c 	bl	8001a70 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275a:	e00f      	b.n	800277c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff f988 	bl	8001a70 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d908      	bls.n	800277c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e140      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	42420000 	.word	0x42420000
 8002778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	4b9e      	ldr	r3, [pc, #632]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e9      	bne.n	800275c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a6 	beq.w	80028e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b97      	ldr	r3, [pc, #604]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b94      	ldr	r3, [pc, #592]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a93      	ldr	r2, [pc, #588]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]
 80027b2:	4b91      	ldr	r3, [pc, #580]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b8e      	ldr	r3, [pc, #568]	; (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ce:	4b8b      	ldr	r3, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a8a      	ldr	r2, [pc, #552]	; (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7ff f949 	bl	8001a70 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7ff f945 	bl	8001a70 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0fd      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b81      	ldr	r3, [pc, #516]	; (80029fc <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x312>
 8002808:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4a7a      	ldr	r2, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6213      	str	r3, [r2, #32]
 8002814:	e02d      	b.n	8002872 <HAL_RCC_OscConfig+0x36e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x334>
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a72      	ldr	r2, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	e01c      	b.n	8002872 <HAL_RCC_OscConfig+0x36e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x356>
 8002840:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a69      	ldr	r2, [pc, #420]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x36e>
 800285a:	4b67      	ldr	r3, [pc, #412]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a66      	ldr	r2, [pc, #408]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7ff f8f9 	bl	8001a70 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7ff f8f5 	bl	8001a70 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0ab      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCC_OscConfig+0x37e>
 80028a4:	e014      	b.n	80028d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f8e3 	bl	8001a70 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7ff f8df 	bl	8001a70 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e095      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4a47      	ldr	r2, [pc, #284]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8081 	beq.w	80029ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ec:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d061      	beq.n	80029bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d146      	bne.n	800298e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_OscConfig+0x4fc>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7ff f8b3 	bl	8001a70 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7ff f8af 	bl	8001a70 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e067      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d108      	bne.n	8002948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	492d      	ldr	r1, [pc, #180]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a19      	ldr	r1, [r3, #32]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	430b      	orrs	r3, r1
 800295a:	4927      	ldr	r1, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x4fc>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7ff f883 	bl	8001a70 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7ff f87f 	bl	8001a70 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e037      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x46a>
 800298c:	e02f      	b.n	80029ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_RCC_OscConfig+0x4fc>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff f86c 	bl	8001a70 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7ff f868 	bl	8001a70 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e020      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x498>
 80029ba:	e018      	b.n	80029ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e013      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42420060 	.word	0x42420060

08002a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0d0      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0207 	bic.w	r2, r3, #7
 8002a2e:	4965      	ldr	r1, [pc, #404]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	494d      	ldr	r1, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d040      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d115      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e073      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06b      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4936      	ldr	r1, [pc, #216]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af4:	f7fe ffbc 	bl	8001a70 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7fe ffb8 	bl	8001a70 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e053      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d210      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4922      	ldr	r1, [pc, #136]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e032      	b.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b92:	f000 f821 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4601      	mov	r1, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba4:	5cd3      	ldrb	r3, [r2, r3]
 8002ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ff1a 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	0800611c 	.word	0x0800611c
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	b490      	push	{r4, r7}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002be0:	1d3c      	adds	r4, r7, #4
 8002be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x40>
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x46>
 8002c16:	e02d      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c1a:	623b      	str	r3, [r7, #32]
      break;
 8002c1c:	e02d      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	0c9b      	lsrs	r3, r3, #18
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	0c5b      	lsrs	r3, r3, #17
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c56:	fb02 f203 	mul.w	r2, r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	e004      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	623b      	str	r3, [r7, #32]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c76:	623b      	str	r3, [r7, #32]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc90      	pop	{r4, r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08006108 	.word	0x08006108
 8002c8c:	08006118 	.word	0x08006118
 8002c90:	40021000 	.word	0x40021000
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	003d0900 	.word	0x003d0900

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff2 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cb8:	4601      	mov	r1, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4a03      	ldr	r2, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	0800612c 	.word	0x0800612c

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce0:	4601      	mov	r1, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0adb      	lsrs	r3, r3, #11
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	0800612c 	.word	0x0800612c

08002d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <RCC_Delay+0x34>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <RCC_Delay+0x38>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0a5b      	lsrs	r3, r3, #9
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d1c:	bf00      	nop
  }
  while (Delay --);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	60fa      	str	r2, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <RCC_Delay+0x1c>
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fc1a 	bl	800159c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 f98e 	bl	800309c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x24>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e022      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d109      	bne.n	8002e1a <HAL_TIM_PWM_Start+0x3e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e015      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d109      	bne.n	8002e34 <HAL_TIM_PWM_Start+0x58>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e008      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e05e      	b.n	8002f0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Start+0x82>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e5c:	e013      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x92>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6c:	e00b      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0xa2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	e003      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 faee 	bl	8003470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_TIM_PWM_Start+0x138>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d107      	bne.n	8002eae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_TIM_PWM_Start+0x138>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0xfa>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d009      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0xfa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_TIM_PWM_Start+0x13c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0xfa>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <HAL_TIM_PWM_Start+0x140>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d111      	bne.n	8002efa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d010      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	e007      	b.n	8002f0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800

08002f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0ac      	b.n	8003094 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f200 809f 	bhi.w	8003088 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08003089 	.word	0x08003089
 8002f58:	08003089 	.word	0x08003089
 8002f5c:	08003089 	.word	0x08003089
 8002f60:	08002fc5 	.word	0x08002fc5
 8002f64:	08003089 	.word	0x08003089
 8002f68:	08003089 	.word	0x08003089
 8002f6c:	08003089 	.word	0x08003089
 8002f70:	08003007 	.word	0x08003007
 8002f74:	08003089 	.word	0x08003089
 8002f78:	08003089 	.word	0x08003089
 8002f7c:	08003089 	.word	0x08003089
 8002f80:	08003047 	.word	0x08003047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f8e8 	bl	8003160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	619a      	str	r2, [r3, #24]
      break;
 8002fc2:	e062      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f92e 	bl	800322c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	021a      	lsls	r2, r3, #8
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	619a      	str	r2, [r3, #24]
      break;
 8003004:	e041      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f977 	bl	8003300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0208 	orr.w	r2, r2, #8
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0204 	bic.w	r2, r2, #4
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	61da      	str	r2, [r3, #28]
      break;
 8003044:	e021      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f9c1 	bl	80033d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	61da      	str	r2, [r3, #28]
      break;
 8003086:	e000      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a29      	ldr	r2, [pc, #164]	; (8003154 <TIM_Base_SetConfig+0xb8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x30>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x30>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a26      	ldr	r2, [pc, #152]	; (8003158 <TIM_Base_SetConfig+0xbc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x30>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a25      	ldr	r2, [pc, #148]	; (800315c <TIM_Base_SetConfig+0xc0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <TIM_Base_SetConfig+0xb8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_Base_SetConfig+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d007      	beq.n	80030fe <TIM_Base_SetConfig+0x62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a19      	ldr	r2, [pc, #100]	; (8003158 <TIM_Base_SetConfig+0xbc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0x62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a18      	ldr	r2, [pc, #96]	; (800315c <TIM_Base_SetConfig+0xc0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <TIM_Base_SetConfig+0xb8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	615a      	str	r2, [r3, #20]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800

08003160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0201 	bic.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 0302 	bic.w	r3, r3, #2
 80031a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <TIM_OC1_SetConfig+0xc8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10c      	bne.n	80031d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0308 	bic.w	r3, r3, #8
 80031c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <TIM_OC1_SetConfig+0xc8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d111      	bne.n	8003202 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40012c00 	.word	0x40012c00

0800322c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0210 	bic.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0320 	bic.w	r3, r3, #32
 8003276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <TIM_OC2_SetConfig+0xd0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10d      	bne.n	80032a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a14      	ldr	r2, [pc, #80]	; (80032fc <TIM_OC2_SetConfig+0xd0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d113      	bne.n	80032d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	40012c00 	.word	0x40012c00

08003300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <TIM_OC3_SetConfig+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10d      	bne.n	800337a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM_OC3_SetConfig+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d113      	bne.n	80033aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a0f      	ldr	r2, [pc, #60]	; (800346c <TIM_OC4_SetConfig+0x98>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d109      	bne.n	8003448 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00

08003470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2201      	movs	r2, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e046      	b.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d009      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a10      	ldr	r2, [pc, #64]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10c      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800

08003574 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800358c:	2302      	movs	r3, #2
 800358e:	e03d      	b.n	800360c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e03f      	b.n	80036a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe f82f 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2224      	movs	r2, #36	; 0x24
 8003646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003658:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fbe2 	bl	8003e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800366e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800367e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d166      	bne.n	8003798 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_Receive_DMA+0x26>
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e05f      	b.n	800379a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_UART_Receive_DMA+0x38>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e058      	b.n	800379a <HAL_UART_Receive_DMA+0xea>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2222      	movs	r2, #34	; 0x22
 8003706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_UART_Receive_DMA+0xf4>)
 8003710:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <HAL_UART_Receive_DMA+0xf8>)
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	4a23      	ldr	r2, [pc, #140]	; (80037ac <HAL_UART_Receive_DMA+0xfc>)
 8003720:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	2200      	movs	r2, #0
 8003728:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	f7fe fb29 	bl	8001d98 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003772:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003792:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	08003ab1 	.word	0x08003ab1
 80037a8:	08003b19 	.word	0x08003b19
 80037ac:	08003b35 	.word	0x08003b35

080037b0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf14      	ite	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	2300      	moveq	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b21      	cmp	r3, #33	; 0x21
 80037dc:	d116      	bne.n	800380c <HAL_UART_DMAStop+0x5c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fb28 	bl	8001e56 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9de 	bl	8003bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b22      	cmp	r3, #34	; 0x22
 800382c:	d116      	bne.n	800385c <HAL_UART_DMAStop+0xac>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003842:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fb00 	bl	8001e56 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f9cb 	bl	8003bf2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_UART_IRQHandler+0x52>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa35 	bl	8003d22 <UART_Receive_IT>
      return;
 80038b8:	e0d1      	b.n	8003a5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80b0 	beq.w	8003a22 <HAL_UART_IRQHandler+0x1ba>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_UART_IRQHandler+0x70>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80a5 	beq.w	8003a22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_UART_IRQHandler+0x90>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_UART_IRQHandler+0xb0>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	f043 0202 	orr.w	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_UART_IRQHandler+0xd0>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00f      	beq.n	8003962 <HAL_UART_IRQHandler+0xfa>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <HAL_UART_IRQHandler+0xee>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	f043 0208 	orr.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d078      	beq.n	8003a5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_UART_IRQHandler+0x11c>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9cf 	bl	8003d22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_UART_IRQHandler+0x144>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d031      	beq.n	8003a10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f920 	bl	8003bf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d023      	beq.n	8003a08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <HAL_UART_IRQHandler+0x1fc>)
 80039de:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fa71 	bl	8001ecc <HAL_DMA_Abort_IT>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039fa:	4610      	mov	r0, r2
 80039fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fe:	e00e      	b.n	8003a1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f84c 	bl	8003a9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a06:	e00a      	b.n	8003a1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f848 	bl	8003a9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0e:	e006      	b.n	8003a1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f844 	bl	8003a9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a1c:	e01e      	b.n	8003a5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1e:	bf00      	nop
    return;
 8003a20:	e01c      	b.n	8003a5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_UART_IRQHandler+0x1d6>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f90c 	bl	8003c54 <UART_Transmit_IT>
    return;
 8003a3c:	e00f      	b.n	8003a5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_UART_IRQHandler+0x1f6>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f94d 	bl	8003cf2 <UART_EndTransmit_IT>
    return;
 8003a58:	bf00      	nop
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003a5c:	bf00      	nop
  }
}
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08003c2d 	.word	0x08003c2d

08003a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11e      	bne.n	8003b0a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b00:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff ffb5 	bl	8003a7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff ffb0 	bl	8003a8c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b21      	cmp	r3, #33	; 0x21
 8003b66:	d108      	bne.n	8003b7a <UART_DMAError+0x46>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f000 f827 	bl	8003bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b22      	cmp	r3, #34	; 0x22
 8003b9a:	d108      	bne.n	8003bae <UART_DMAError+0x7a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ba8:	68b8      	ldr	r0, [r7, #8]
 8003baa:	f000 f822 	bl	8003bf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bba:	68b8      	ldr	r0, [r7, #8]
 8003bbc:	f7ff ff6f 	bl	8003a9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003bde:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff ff29 	bl	8003a9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b21      	cmp	r3, #33	; 0x21
 8003c66:	d13e      	bne.n	8003ce6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d114      	bne.n	8003c9c <UART_Transmit_IT+0x48>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d110      	bne.n	8003c9c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	1c9a      	adds	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]
 8003c9a:	e008      	b.n	8003cae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	1c59      	adds	r1, r3, #1
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6211      	str	r1, [r2, #32]
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fea8 	bl	8003a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b22      	cmp	r3, #34	; 0x22
 8003d34:	d170      	bne.n	8003e18 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d117      	bne.n	8003d70 <UART_Receive_IT+0x4e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d113      	bne.n	8003d70 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6e:	e026      	b.n	8003dbe <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d82:	d007      	beq.n	8003d94 <UART_Receive_IT+0x72>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <UART_Receive_IT+0x80>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e008      	b.n	8003db4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d120      	bne.n	8003e14 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0220 	bic.w	r2, r2, #32
 8003de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fe35 	bl	8003a7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e002      	b.n	8003e1a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e5e:	f023 030c 	bic.w	r3, r3, #12
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <UART_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e8c:	f7fe ff24 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	e002      	b.n	8003e9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe ff0c 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8003e98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009a      	lsls	r2, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <UART_SetConfig+0x118>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	0119      	lsls	r1, r3, #4
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <UART_SetConfig+0x118>)
 8003ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2064      	movs	r0, #100	; 0x64
 8003eda:	fb00 f303 	mul.w	r3, r0, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <UART_SetConfig+0x118>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	4419      	add	r1, r3
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <UART_SetConfig+0x118>)
 8003f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	51eb851f 	.word	0x51eb851f

08003f40 <_ZN3CarC1EP17TIM_HandleTypeDefS1_P20__UART_HandleTypeDef>:
#include "car.h"

Car::Car(TIM_HandleTypeDef *servo_pwm_htim_, TIM_HandleTypeDef *motor_pwm_htim_,
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
		UART_HandleTypeDef *connect_huart) {
	servo = new Servo(servo_pwm_htim_);
 8003f4e:	202c      	movs	r0, #44	; 0x2c
 8003f50:	f000 fa76 	bl	8004440 <_Znwj>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461c      	mov	r4, r3
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f000 fa0e 	bl	800437c <_ZN5ServoC1EP17TIM_HandleTypeDef>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	601c      	str	r4, [r3, #0]
	motor = new Motor(motor_pwm_htim_);
 8003f64:	2028      	movs	r0, #40	; 0x28
 8003f66:	f000 fa6b 	bl	8004440 <_Znwj>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4620      	mov	r0, r4
 8003f72:	f000 f955 	bl	8004220 <_ZN5MotorC1EP17TIM_HandleTypeDef>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605c      	str	r4, [r3, #4]
	connect = new Connect(connect_huart);
 8003f7a:	203c      	movs	r0, #60	; 0x3c
 8003f7c:	f000 fa60 	bl	8004440 <_Znwj>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461c      	mov	r4, r3
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	4620      	mov	r0, r4
 8003f88:	f000 f89c 	bl	80040c4 <_ZN7ConnectC1EP20__UART_HandleTypeDef>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	609c      	str	r4, [r3, #8]
}
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd90      	pop	{r4, r7, pc}

08003f9a <_ZN3Car14handle_rx_idleEP20__UART_HandleTypeDef>:

void Car::handle_rx_idle(UART_HandleTypeDef *huart) {
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
	if (huart == connect->connect_huart) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d104      	bne.n	8003fba <_ZN3Car14handle_rx_idleEP20__UART_HandleTypeDef+0x20>
		connect->handle_rx_idle();
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f8f5 	bl	80041a4 <_ZN7Connect14handle_rx_idleEv>
	}
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <_ZN3Car5startEv>:

void Car::start() {
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
	servo->start();
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4798      	blx	r3
	motor->start();
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4798      	blx	r3
	connect->start();
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4798      	blx	r3
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <_ZN3Car6updateEv>:
void Car::test() {
//	servo->test();
	motor->test_pid();
}

void Car::update() {
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
	/* YOUR CODE THERE */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <_Z6a_to_bfffff>:
#include "common.h"

float a_to_b(float a, float a_max, float a_min, float b_max, float b_min) {
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
	if (a > a_max) {
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7fc fff9 	bl	800101c <__aeabi_fcmpgt>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <_Z6a_to_bfffff+0x20>
		a = a_max;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60fb      	str	r3, [r7, #12]
	}
	if (a < a_min) {
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7fc ffd2 	bl	8000fe0 <__aeabi_fcmplt>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <_Z6a_to_bfffff+0x32>
		a = a_min;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]
	}
	float res = ((a - a_min) * (b_max - b_min)) / (a_max - a_min) + b_min;
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7fc fd21 	bl	8000a90 <__aeabi_fsub>
 800404e:	4603      	mov	r3, r0
 8004050:	461c      	mov	r4, r3
 8004052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f7fc fd1b 	bl	8000a90 <__aeabi_fsub>
 800405a:	4603      	mov	r3, r0
 800405c:	4619      	mov	r1, r3
 800405e:	4620      	mov	r0, r4
 8004060:	f7fc fe20 	bl	8000ca4 <__aeabi_fmul>
 8004064:	4603      	mov	r3, r0
 8004066:	461c      	mov	r4, r3
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	68b8      	ldr	r0, [r7, #8]
 800406c:	f7fc fd10 	bl	8000a90 <__aeabi_fsub>
 8004070:	4603      	mov	r3, r0
 8004072:	4619      	mov	r1, r3
 8004074:	4620      	mov	r0, r4
 8004076:	f7fc fec9 	bl	8000e0c <__aeabi_fdiv>
 800407a:	4603      	mov	r3, r0
 800407c:	4619      	mov	r1, r3
 800407e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004080:	f7fc fd08 	bl	8000a94 <__addsf3>
 8004084:	4603      	mov	r3, r0
 8004086:	617b      	str	r3, [r7, #20]
	return res;
 8004088:	697b      	ldr	r3, [r7, #20]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd90      	pop	{r4, r7, pc}
	...

08004094 <_ZN6ModuleC1Em>:
class Module {
protected:
	uint32_t prev_update_time;
	uint32_t now;
	uint32_t update_period;
	Module(uint32_t update_period_) :
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
			update_period(update_period_) {
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <_ZN6ModuleC1Em+0x2c>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	60da      	str	r2, [r3, #12]
		prev_update_time = HAL_GetTick();
 80040aa:	f7fd fce1 	bl	8001a70 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	605a      	str	r2, [r3, #4]
	}
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	0800614c 	.word	0x0800614c

080040c4 <_ZN7ConnectC1EP20__UART_HandleTypeDef>:
#include <stdio.h>
#include <string.h>

static uint8_t buffer[32];

Connect::Connect(UART_HandleTypeDef *connect_huart_) :
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
		Module(0), connect_huart(connect_huart_), min_control_speed(
		CONN_MIN_CTRL_SPEED), max_control_speed(CONN_MAX_CTRL_SPEED), min_control_angle(
		CONN_MIN_CTRL_ANGLE), max_control_angle(CONN_MAX_CTRL_ANGLE) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ffde 	bl	8004094 <_ZN6ModuleC1Em>
 80040d8:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <_ZN7ConnectC1EP20__UART_HandleTypeDef+0x50>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2264      	movs	r2, #100	; 0x64
 80040e2:	611a      	str	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ea:	615a      	str	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2264      	movs	r2, #100	; 0x64
 80040f0:	619a      	str	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f8:	61da      	str	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	0800613c 	.word	0x0800613c

08004118 <_ZN7Connect8start_rxEv>:

void Connect::start_rx() {
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(connect_huart);
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_ENABLE_IT(connect_huart, UART_IT_IDLE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0210 	orr.w	r2, r2, #16
 800414c:	60da      	str	r2, [r3, #12]
	if (HAL_UART_Receive_DMA(connect_huart, buffer, sizeof(buffer)) != HAL_OK) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	2220      	movs	r2, #32
 8004154:	4904      	ldr	r1, [pc, #16]	; (8004168 <_ZN7Connect8start_rxEv+0x50>)
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff faaa 	bl	80036b0 <HAL_UART_Receive_DMA>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
		// error
	}
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000204 	.word	0x20000204

0800416c <_ZN7Connect5startEv>:

void Connect::start() {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, sizeof(buffer));
 8004174:	2220      	movs	r2, #32
 8004176:	2100      	movs	r1, #0
 8004178:	4804      	ldr	r0, [pc, #16]	; (800418c <_ZN7Connect5startEv+0x20>)
 800417a:	f000 f9c9 	bl	8004510 <memset>
	start_rx();
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffca 	bl	8004118 <_ZN7Connect8start_rxEv>
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000204 	.word	0x20000204

08004190 <_ZN7Connect6updateEv>:

void Connect::update() {
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
	...

080041a4 <_ZN7Connect14handle_rx_idleEv>:

void Connect::handle_rx_idle() {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(connect_huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fafd 	bl	80037b0 <HAL_UART_DMAStop>
	int rcvdCount = sizeof(buffer) - connect_huart->hdmarx->Instance->CNDTR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f1c3 0320 	rsb	r3, r3, #32
 80041c4:	60fb      	str	r3, [r7, #12]

	if (rcvdCount == 8) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d11e      	bne.n	800420a <_ZN7Connect14handle_rx_idleEv+0x66>
		int control = atoi((char*) &(buffer[1]));
 80041cc:	4812      	ldr	r0, [pc, #72]	; (8004218 <_ZN7Connect14handle_rx_idleEv+0x74>)
 80041ce:	f000 f969 	bl	80044a4 <atoi>
 80041d2:	60b8      	str	r0, [r7, #8]
		control_speed = control % 1000;
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <_ZN7Connect14handle_rx_idleEv+0x78>)
 80041d8:	fb83 1302 	smull	r1, r3, r3, r2
 80041dc:	1199      	asrs	r1, r3, #6
 80041de:	17d3      	asrs	r3, r2, #31
 80041e0:	1acb      	subs	r3, r1, r3
 80041e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6353      	str	r3, [r2, #52]	; 0x34
		control_angle = control / 1000;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <_ZN7Connect14handle_rx_idleEv+0x78>)
 80041f4:	fb82 1203 	smull	r1, r2, r2, r3
 80041f8:	1192      	asrs	r2, r2, #6
 80041fa:	17db      	asrs	r3, r3, #31
 80041fc:	1ad2      	subs	r2, r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
		was_control_received = true;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}

	start_rx();
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff84 	bl	8004118 <_ZN7Connect8start_rxEv>

}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000205 	.word	0x20000205
 800421c:	10624dd3 	.word	0x10624dd3

08004220 <_ZN5MotorC1EP17TIM_HandleTypeDef>:
#include "motor.h"
#include "common.h"

Motor::Motor(TIM_HandleTypeDef *pwmHtim_) :
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
		Module(MOTOR_UPDATE_PERIOD), pwmHtim(pwmHtim_), current_speed_norm(0.0), control_speed_norm(
				0.0), max_speed_pulse(
		MOTOR_MAX_PULSE), min_speed_pulse(MOTOR_MIN_PULSE) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	210a      	movs	r1, #10
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff30 	bl	8004094 <_ZN6ModuleC1Em>
 8004234:	4a11      	ldr	r2, [pc, #68]	; (800427c <_ZN5MotorC1EP17TIM_HandleTypeDef+0x5c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	611a      	str	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	615a      	str	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	61da      	str	r2, [r3, #28]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <_ZN5MotorC1EP17TIM_HandleTypeDef+0x60>)
 800425c:	621a      	str	r2, [r3, #32]
	pid = new Pid();
 800425e:	200c      	movs	r0, #12
 8004260:	f000 f8ee 	bl	8004440 <_Znwj>
 8004264:	4603      	mov	r3, r0
 8004266:	461c      	mov	r4, r3
 8004268:	4620      	mov	r0, r4
 800426a:	f000 f849 	bl	8004300 <_ZN3PidC1Ev>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	625c      	str	r4, [r3, #36]	; 0x24
}
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	0800615c 	.word	0x0800615c
 8004280:	44f9e000 	.word	0x44f9e000

08004284 <_ZN5Motor5startEv>:

void Motor::set_control_speed_norm(float v_norm) {
	control_speed_norm = v_norm;
}

void Motor::start() {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fda2 	bl	8002ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2104      	movs	r1, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fd9c 	bl	8002ddc <HAL_TIM_PWM_Start>
	stop();
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f814 	bl	80042d2 <_ZN5Motor4stopEv>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80042aa:	2201      	movs	r2, #1
 80042ac:	2101      	movs	r1, #1
 80042ae:	4803      	ldr	r0, [pc, #12]	; (80042bc <_ZN5Motor5startEv+0x38>)
 80042b0:	f7fe f910 	bl	80024d4 <HAL_GPIO_WritePin>
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40010c00 	.word	0x40010c00

080042c0 <_ZN5Motor6updateEv>:

void Motor::update() {
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	/* YOUR CODE THERE */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <_ZN5Motor4stopEv>:

void Motor::stop() {
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
	pwmHtim->Instance->CCR1 = 0;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHtim->Instance->CCR2 = 0;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
	current_speed_norm = 0;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	615a      	str	r2, [r3, #20]
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <_ZN3PidC1Ev>:
	sumError = i;
	lastError = error;
	control = controlOutput;
}

Pid::Pid() :
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
		lastError(0), sumError(0), control(0) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <_ZN5Servo12deg_to_pulseEf>:
#include "servo.h"

float Servo::deg_to_pulse(float v_deg) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af02      	add	r7, sp, #8
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
	return a_to_b(v_deg, max_angle_deg, min_angle_deg, max_angle_pulse,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a18      	ldr	r0, [r3, #32]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
			min_angle_pulse);
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4603      	mov	r3, r0
 800434a:	6838      	ldr	r0, [r7, #0]
 800434c:	f7ff fe62 	bl	8004014 <_Z6a_to_bfffff>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_ZN5Servo9set_pulseEf>:
float Servo::pulse_to_deg(float v_pulse) {
	return a_to_b(v_pulse, max_angle_pulse, min_angle_pulse, max_angle_deg,
			min_angle_deg);
}

void Servo::set_pulse(float pulse) {
 800435a:	b590      	push	{r4, r7, lr}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
	pwmHtim->Instance->CCR1 = pulse;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	681c      	ldr	r4, [r3, #0]
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f7fc fe60 	bl	8001030 <__aeabi_f2uiz>
 8004370:	4603      	mov	r3, r0
 8004372:	6363      	str	r3, [r4, #52]	; 0x34
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}

0800437c <_ZN5ServoC1EP17TIM_HandleTypeDef>:

Servo::Servo(TIM_HandleTypeDef *pwmHtim_) :
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
		Module(0), pwmHtim(pwmHtim_), min_angle_pulse(SERVO_MIN_ANGLE_PULSE), max_angle_pulse(
		SERVO_MAX_ANGLE_PULSE), min_angle_deg(SERVO_MIN_ANGLE_DEG), max_angle_deg(
		SERVO_MAX_ANGLE_DEG), stop_angle_deg(SERVO_STOP_ANGLE_DEG) {
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2100      	movs	r1, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fe82 	bl	8004094 <_ZN6ModuleC1Em>
 8004390:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x4c>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	611a      	str	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <_ZN5ServoC1EP17TIM_HandleTypeDef+0x50>)
 80043a0:	619a      	str	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x54>)
 80043a6:	61da      	str	r2, [r3, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x58>)
 80043ac:	621a      	str	r2, [r3, #32]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x5c>)
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	0800616c 	.word	0x0800616c
 80043cc:	42b40000 	.word	0x42b40000
 80043d0:	43fa0000 	.word	0x43fa0000
 80043d4:	451c4000 	.word	0x451c4000
 80043d8:	43340000 	.word	0x43340000

080043dc <_ZN5Servo5startEv>:

void Servo::start() {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fcf6 	bl	8002ddc <HAL_TIM_PWM_Start>
	set_angle_deg(stop_angle_deg);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f804 	bl	8004404 <_ZN5Servo13set_angle_degEf>
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_ZN5Servo13set_angle_degEf>:
void Servo::set_angle_deg(float angle_deg) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	set_pulse(deg_to_pulse(angle_deg));
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff8b 	bl	800432c <_ZN5Servo12deg_to_pulseEf>
 8004416:	4603      	mov	r3, r0
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff9d 	bl	800435a <_ZN5Servo9set_pulseEf>
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN5Servo6updateEv>:

void Servo::update() {
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	/* YOUR CODE THERE */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <__cxa_pure_virtual>:
 800443a:	b508      	push	{r3, lr}
 800443c:	f000 f826 	bl	800448c <_ZSt9terminatev>

08004440 <_Znwj>:
 8004440:	b510      	push	{r4, lr}
 8004442:	2800      	cmp	r0, #0
 8004444:	bf14      	ite	ne
 8004446:	4604      	movne	r4, r0
 8004448:	2401      	moveq	r4, #1
 800444a:	4620      	mov	r0, r4
 800444c:	f000 f858 	bl	8004500 <malloc>
 8004450:	b930      	cbnz	r0, 8004460 <_Znwj+0x20>
 8004452:	f000 f807 	bl	8004464 <_ZSt15get_new_handlerv>
 8004456:	b908      	cbnz	r0, 800445c <_Znwj+0x1c>
 8004458:	f000 f81d 	bl	8004496 <abort>
 800445c:	4780      	blx	r0
 800445e:	e7f4      	b.n	800444a <_Znwj+0xa>
 8004460:	bd10      	pop	{r4, pc}
	...

08004464 <_ZSt15get_new_handlerv>:
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <_ZSt15get_new_handlerv+0xc>)
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	f3bf 8f5b 	dmb	ish
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000224 	.word	0x20000224

08004474 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004474:	b508      	push	{r3, lr}
 8004476:	4780      	blx	r0
 8004478:	f000 f80d 	bl	8004496 <abort>

0800447c <_ZSt13get_terminatev>:
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <_ZSt13get_terminatev+0xc>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	f3bf 8f5b 	dmb	ish
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	2000000c 	.word	0x2000000c

0800448c <_ZSt9terminatev>:
 800448c:	b508      	push	{r3, lr}
 800448e:	f7ff fff5 	bl	800447c <_ZSt13get_terminatev>
 8004492:	f7ff ffef 	bl	8004474 <_ZN10__cxxabiv111__terminateEPFvvE>

08004496 <abort>:
 8004496:	b508      	push	{r3, lr}
 8004498:	2006      	movs	r0, #6
 800449a:	f000 fc11 	bl	8004cc0 <raise>
 800449e:	2001      	movs	r0, #1
 80044a0:	f7fd fa21 	bl	80018e6 <_exit>

080044a4 <atoi>:
 80044a4:	220a      	movs	r2, #10
 80044a6:	2100      	movs	r1, #0
 80044a8:	f000 bca2 	b.w	8004df0 <strtol>

080044ac <__errno>:
 80044ac:	4b01      	ldr	r3, [pc, #4]	; (80044b4 <__errno+0x8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000010 	.word	0x20000010

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	2500      	movs	r5, #0
 80044bc:	4e0c      	ldr	r6, [pc, #48]	; (80044f0 <__libc_init_array+0x38>)
 80044be:	4c0d      	ldr	r4, [pc, #52]	; (80044f4 <__libc_init_array+0x3c>)
 80044c0:	1ba4      	subs	r4, r4, r6
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	42a5      	cmp	r5, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	f001 fe12 	bl	80060f0 <_init>
 80044cc:	2500      	movs	r5, #0
 80044ce:	4e0a      	ldr	r6, [pc, #40]	; (80044f8 <__libc_init_array+0x40>)
 80044d0:	4c0a      	ldr	r4, [pc, #40]	; (80044fc <__libc_init_array+0x44>)
 80044d2:	1ba4      	subs	r4, r4, r6
 80044d4:	10a4      	asrs	r4, r4, #2
 80044d6:	42a5      	cmp	r5, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e0:	4798      	blx	r3
 80044e2:	3501      	adds	r5, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ea:	4798      	blx	r3
 80044ec:	3501      	adds	r5, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	08006400 	.word	0x08006400
 80044f4:	08006400 	.word	0x08006400
 80044f8:	08006400 	.word	0x08006400
 80044fc:	08006404 	.word	0x08006404

08004500 <malloc>:
 8004500:	4b02      	ldr	r3, [pc, #8]	; (800450c <malloc+0xc>)
 8004502:	4601      	mov	r1, r0
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f000 b80b 	b.w	8004520 <_malloc_r>
 800450a:	bf00      	nop
 800450c:	20000010 	.word	0x20000010

08004510 <memset>:
 8004510:	4603      	mov	r3, r0
 8004512:	4402      	add	r2, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	d100      	bne.n	800451a <memset+0xa>
 8004518:	4770      	bx	lr
 800451a:	f803 1b01 	strb.w	r1, [r3], #1
 800451e:	e7f9      	b.n	8004514 <memset+0x4>

08004520 <_malloc_r>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	1ccd      	adds	r5, r1, #3
 8004524:	f025 0503 	bic.w	r5, r5, #3
 8004528:	3508      	adds	r5, #8
 800452a:	2d0c      	cmp	r5, #12
 800452c:	bf38      	it	cc
 800452e:	250c      	movcc	r5, #12
 8004530:	2d00      	cmp	r5, #0
 8004532:	4606      	mov	r6, r0
 8004534:	db01      	blt.n	800453a <_malloc_r+0x1a>
 8004536:	42a9      	cmp	r1, r5
 8004538:	d903      	bls.n	8004542 <_malloc_r+0x22>
 800453a:	230c      	movs	r3, #12
 800453c:	6033      	str	r3, [r6, #0]
 800453e:	2000      	movs	r0, #0
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	f001 fadc 	bl	8005afe <__malloc_lock>
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <_malloc_r+0xac>)
 8004548:	6814      	ldr	r4, [r2, #0]
 800454a:	4621      	mov	r1, r4
 800454c:	b991      	cbnz	r1, 8004574 <_malloc_r+0x54>
 800454e:	4c20      	ldr	r4, [pc, #128]	; (80045d0 <_malloc_r+0xb0>)
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	b91b      	cbnz	r3, 800455c <_malloc_r+0x3c>
 8004554:	4630      	mov	r0, r6
 8004556:	f000 fb7b 	bl	8004c50 <_sbrk_r>
 800455a:	6020      	str	r0, [r4, #0]
 800455c:	4629      	mov	r1, r5
 800455e:	4630      	mov	r0, r6
 8004560:	f000 fb76 	bl	8004c50 <_sbrk_r>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d124      	bne.n	80045b2 <_malloc_r+0x92>
 8004568:	230c      	movs	r3, #12
 800456a:	4630      	mov	r0, r6
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	f001 fac7 	bl	8005b00 <__malloc_unlock>
 8004572:	e7e4      	b.n	800453e <_malloc_r+0x1e>
 8004574:	680b      	ldr	r3, [r1, #0]
 8004576:	1b5b      	subs	r3, r3, r5
 8004578:	d418      	bmi.n	80045ac <_malloc_r+0x8c>
 800457a:	2b0b      	cmp	r3, #11
 800457c:	d90f      	bls.n	800459e <_malloc_r+0x7e>
 800457e:	600b      	str	r3, [r1, #0]
 8004580:	18cc      	adds	r4, r1, r3
 8004582:	50cd      	str	r5, [r1, r3]
 8004584:	4630      	mov	r0, r6
 8004586:	f001 fabb 	bl	8005b00 <__malloc_unlock>
 800458a:	f104 000b 	add.w	r0, r4, #11
 800458e:	1d23      	adds	r3, r4, #4
 8004590:	f020 0007 	bic.w	r0, r0, #7
 8004594:	1ac3      	subs	r3, r0, r3
 8004596:	d0d3      	beq.n	8004540 <_malloc_r+0x20>
 8004598:	425a      	negs	r2, r3
 800459a:	50e2      	str	r2, [r4, r3]
 800459c:	e7d0      	b.n	8004540 <_malloc_r+0x20>
 800459e:	684b      	ldr	r3, [r1, #4]
 80045a0:	428c      	cmp	r4, r1
 80045a2:	bf16      	itet	ne
 80045a4:	6063      	strne	r3, [r4, #4]
 80045a6:	6013      	streq	r3, [r2, #0]
 80045a8:	460c      	movne	r4, r1
 80045aa:	e7eb      	b.n	8004584 <_malloc_r+0x64>
 80045ac:	460c      	mov	r4, r1
 80045ae:	6849      	ldr	r1, [r1, #4]
 80045b0:	e7cc      	b.n	800454c <_malloc_r+0x2c>
 80045b2:	1cc4      	adds	r4, r0, #3
 80045b4:	f024 0403 	bic.w	r4, r4, #3
 80045b8:	42a0      	cmp	r0, r4
 80045ba:	d005      	beq.n	80045c8 <_malloc_r+0xa8>
 80045bc:	1a21      	subs	r1, r4, r0
 80045be:	4630      	mov	r0, r6
 80045c0:	f000 fb46 	bl	8004c50 <_sbrk_r>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d0cf      	beq.n	8004568 <_malloc_r+0x48>
 80045c8:	6025      	str	r5, [r4, #0]
 80045ca:	e7db      	b.n	8004584 <_malloc_r+0x64>
 80045cc:	20000228 	.word	0x20000228
 80045d0:	2000022c 	.word	0x2000022c

080045d4 <__cvt>:
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045da:	461e      	mov	r6, r3
 80045dc:	bfbb      	ittet	lt
 80045de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80045e2:	461e      	movlt	r6, r3
 80045e4:	2300      	movge	r3, #0
 80045e6:	232d      	movlt	r3, #45	; 0x2d
 80045e8:	b088      	sub	sp, #32
 80045ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80045ec:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80045f0:	f027 0720 	bic.w	r7, r7, #32
 80045f4:	2f46      	cmp	r7, #70	; 0x46
 80045f6:	4614      	mov	r4, r2
 80045f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045fa:	700b      	strb	r3, [r1, #0]
 80045fc:	d004      	beq.n	8004608 <__cvt+0x34>
 80045fe:	2f45      	cmp	r7, #69	; 0x45
 8004600:	d100      	bne.n	8004604 <__cvt+0x30>
 8004602:	3501      	adds	r5, #1
 8004604:	2302      	movs	r3, #2
 8004606:	e000      	b.n	800460a <__cvt+0x36>
 8004608:	2303      	movs	r3, #3
 800460a:	aa07      	add	r2, sp, #28
 800460c:	9204      	str	r2, [sp, #16]
 800460e:	aa06      	add	r2, sp, #24
 8004610:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004614:	e9cd 3500 	strd	r3, r5, [sp]
 8004618:	4622      	mov	r2, r4
 800461a:	4633      	mov	r3, r6
 800461c:	f000 fc8c 	bl	8004f38 <_dtoa_r>
 8004620:	2f47      	cmp	r7, #71	; 0x47
 8004622:	4680      	mov	r8, r0
 8004624:	d102      	bne.n	800462c <__cvt+0x58>
 8004626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004628:	07db      	lsls	r3, r3, #31
 800462a:	d526      	bpl.n	800467a <__cvt+0xa6>
 800462c:	2f46      	cmp	r7, #70	; 0x46
 800462e:	eb08 0905 	add.w	r9, r8, r5
 8004632:	d111      	bne.n	8004658 <__cvt+0x84>
 8004634:	f898 3000 	ldrb.w	r3, [r8]
 8004638:	2b30      	cmp	r3, #48	; 0x30
 800463a:	d10a      	bne.n	8004652 <__cvt+0x7e>
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4620      	mov	r0, r4
 8004642:	4631      	mov	r1, r6
 8004644:	f7fc f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 8004648:	b918      	cbnz	r0, 8004652 <__cvt+0x7e>
 800464a:	f1c5 0501 	rsb	r5, r5, #1
 800464e:	f8ca 5000 	str.w	r5, [sl]
 8004652:	f8da 3000 	ldr.w	r3, [sl]
 8004656:	4499      	add	r9, r3
 8004658:	2200      	movs	r2, #0
 800465a:	2300      	movs	r3, #0
 800465c:	4620      	mov	r0, r4
 800465e:	4631      	mov	r1, r6
 8004660:	f7fc f9a2 	bl	80009a8 <__aeabi_dcmpeq>
 8004664:	b938      	cbnz	r0, 8004676 <__cvt+0xa2>
 8004666:	2230      	movs	r2, #48	; 0x30
 8004668:	9b07      	ldr	r3, [sp, #28]
 800466a:	454b      	cmp	r3, r9
 800466c:	d205      	bcs.n	800467a <__cvt+0xa6>
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	9107      	str	r1, [sp, #28]
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e7f8      	b.n	8004668 <__cvt+0x94>
 8004676:	f8cd 901c 	str.w	r9, [sp, #28]
 800467a:	4640      	mov	r0, r8
 800467c:	9b07      	ldr	r3, [sp, #28]
 800467e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004680:	eba3 0308 	sub.w	r3, r3, r8
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	b008      	add	sp, #32
 8004688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800468c <__exponent>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	2900      	cmp	r1, #0
 8004690:	bfb4      	ite	lt
 8004692:	232d      	movlt	r3, #45	; 0x2d
 8004694:	232b      	movge	r3, #43	; 0x2b
 8004696:	4604      	mov	r4, r0
 8004698:	bfb8      	it	lt
 800469a:	4249      	neglt	r1, r1
 800469c:	2909      	cmp	r1, #9
 800469e:	f804 2b02 	strb.w	r2, [r4], #2
 80046a2:	7043      	strb	r3, [r0, #1]
 80046a4:	dd21      	ble.n	80046ea <__exponent+0x5e>
 80046a6:	f10d 0307 	add.w	r3, sp, #7
 80046aa:	461f      	mov	r7, r3
 80046ac:	260a      	movs	r6, #10
 80046ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80046b2:	fb06 1115 	mls	r1, r6, r5, r1
 80046b6:	2d09      	cmp	r5, #9
 80046b8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80046bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046c0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80046c4:	4629      	mov	r1, r5
 80046c6:	dc09      	bgt.n	80046dc <__exponent+0x50>
 80046c8:	3130      	adds	r1, #48	; 0x30
 80046ca:	3b02      	subs	r3, #2
 80046cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046d0:	42bb      	cmp	r3, r7
 80046d2:	4622      	mov	r2, r4
 80046d4:	d304      	bcc.n	80046e0 <__exponent+0x54>
 80046d6:	1a10      	subs	r0, r2, r0
 80046d8:	b003      	add	sp, #12
 80046da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046dc:	4613      	mov	r3, r2
 80046de:	e7e6      	b.n	80046ae <__exponent+0x22>
 80046e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e4:	f804 2b01 	strb.w	r2, [r4], #1
 80046e8:	e7f2      	b.n	80046d0 <__exponent+0x44>
 80046ea:	2330      	movs	r3, #48	; 0x30
 80046ec:	4419      	add	r1, r3
 80046ee:	7083      	strb	r3, [r0, #2]
 80046f0:	1d02      	adds	r2, r0, #4
 80046f2:	70c1      	strb	r1, [r0, #3]
 80046f4:	e7ef      	b.n	80046d6 <__exponent+0x4a>
	...

080046f8 <_printf_float>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	b091      	sub	sp, #68	; 0x44
 80046fe:	460c      	mov	r4, r1
 8004700:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004702:	4693      	mov	fp, r2
 8004704:	461e      	mov	r6, r3
 8004706:	4605      	mov	r5, r0
 8004708:	f001 f9ce 	bl	8005aa8 <_localeconv_r>
 800470c:	6803      	ldr	r3, [r0, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	9309      	str	r3, [sp, #36]	; 0x24
 8004712:	f7fb fd1d 	bl	8000150 <strlen>
 8004716:	2300      	movs	r3, #0
 8004718:	930e      	str	r3, [sp, #56]	; 0x38
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	900a      	str	r0, [sp, #40]	; 0x28
 800471e:	3307      	adds	r3, #7
 8004720:	f023 0307 	bic.w	r3, r3, #7
 8004724:	f103 0208 	add.w	r2, r3, #8
 8004728:	f894 8018 	ldrb.w	r8, [r4, #24]
 800472c:	f8d4 a000 	ldr.w	sl, [r4]
 8004730:	603a      	str	r2, [r7, #0]
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800473a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800473e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004742:	930b      	str	r3, [sp, #44]	; 0x2c
 8004744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004748:	4ba6      	ldr	r3, [pc, #664]	; (80049e4 <_printf_float+0x2ec>)
 800474a:	4638      	mov	r0, r7
 800474c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800474e:	f7fc f95d 	bl	8000a0c <__aeabi_dcmpun>
 8004752:	bb68      	cbnz	r0, 80047b0 <_printf_float+0xb8>
 8004754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004758:	4ba2      	ldr	r3, [pc, #648]	; (80049e4 <_printf_float+0x2ec>)
 800475a:	4638      	mov	r0, r7
 800475c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800475e:	f7fc f937 	bl	80009d0 <__aeabi_dcmple>
 8004762:	bb28      	cbnz	r0, 80047b0 <_printf_float+0xb8>
 8004764:	2200      	movs	r2, #0
 8004766:	2300      	movs	r3, #0
 8004768:	4638      	mov	r0, r7
 800476a:	4649      	mov	r1, r9
 800476c:	f7fc f926 	bl	80009bc <__aeabi_dcmplt>
 8004770:	b110      	cbz	r0, 8004778 <_printf_float+0x80>
 8004772:	232d      	movs	r3, #45	; 0x2d
 8004774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004778:	4f9b      	ldr	r7, [pc, #620]	; (80049e8 <_printf_float+0x2f0>)
 800477a:	4b9c      	ldr	r3, [pc, #624]	; (80049ec <_printf_float+0x2f4>)
 800477c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004780:	bf98      	it	ls
 8004782:	461f      	movls	r7, r3
 8004784:	2303      	movs	r3, #3
 8004786:	f04f 0900 	mov.w	r9, #0
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	f02a 0304 	bic.w	r3, sl, #4
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	9600      	str	r6, [sp, #0]
 8004794:	465b      	mov	r3, fp
 8004796:	aa0f      	add	r2, sp, #60	; 0x3c
 8004798:	4621      	mov	r1, r4
 800479a:	4628      	mov	r0, r5
 800479c:	f000 f9e2 	bl	8004b64 <_printf_common>
 80047a0:	3001      	adds	r0, #1
 80047a2:	f040 8090 	bne.w	80048c6 <_printf_float+0x1ce>
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047aa:	b011      	add	sp, #68	; 0x44
 80047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b0:	463a      	mov	r2, r7
 80047b2:	464b      	mov	r3, r9
 80047b4:	4638      	mov	r0, r7
 80047b6:	4649      	mov	r1, r9
 80047b8:	f7fc f928 	bl	8000a0c <__aeabi_dcmpun>
 80047bc:	b110      	cbz	r0, 80047c4 <_printf_float+0xcc>
 80047be:	4f8c      	ldr	r7, [pc, #560]	; (80049f0 <_printf_float+0x2f8>)
 80047c0:	4b8c      	ldr	r3, [pc, #560]	; (80049f4 <_printf_float+0x2fc>)
 80047c2:	e7db      	b.n	800477c <_printf_float+0x84>
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	a80d      	add	r0, sp, #52	; 0x34
 80047ce:	a90e      	add	r1, sp, #56	; 0x38
 80047d0:	d140      	bne.n	8004854 <_printf_float+0x15c>
 80047d2:	2306      	movs	r3, #6
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	f04f 0c00 	mov.w	ip, #0
 80047da:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80047de:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80047e2:	6863      	ldr	r3, [r4, #4]
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	463a      	mov	r2, r7
 80047ee:	464b      	mov	r3, r9
 80047f0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80047f4:	4628      	mov	r0, r5
 80047f6:	f7ff feed 	bl	80045d4 <__cvt>
 80047fa:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80047fe:	2b47      	cmp	r3, #71	; 0x47
 8004800:	4607      	mov	r7, r0
 8004802:	d109      	bne.n	8004818 <_printf_float+0x120>
 8004804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004806:	1cd8      	adds	r0, r3, #3
 8004808:	db02      	blt.n	8004810 <_printf_float+0x118>
 800480a:	6862      	ldr	r2, [r4, #4]
 800480c:	4293      	cmp	r3, r2
 800480e:	dd47      	ble.n	80048a0 <_printf_float+0x1a8>
 8004810:	f1a8 0802 	sub.w	r8, r8, #2
 8004814:	fa5f f888 	uxtb.w	r8, r8
 8004818:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800481c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800481e:	d824      	bhi.n	800486a <_printf_float+0x172>
 8004820:	3901      	subs	r1, #1
 8004822:	4642      	mov	r2, r8
 8004824:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004828:	910d      	str	r1, [sp, #52]	; 0x34
 800482a:	f7ff ff2f 	bl	800468c <__exponent>
 800482e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004830:	4681      	mov	r9, r0
 8004832:	1813      	adds	r3, r2, r0
 8004834:	2a01      	cmp	r2, #1
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	dc02      	bgt.n	8004840 <_printf_float+0x148>
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	07d1      	lsls	r1, r2, #31
 800483e:	d501      	bpl.n	8004844 <_printf_float+0x14c>
 8004840:	3301      	adds	r3, #1
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0a2      	beq.n	8004792 <_printf_float+0x9a>
 800484c:	232d      	movs	r3, #45	; 0x2d
 800484e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004852:	e79e      	b.n	8004792 <_printf_float+0x9a>
 8004854:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004858:	f000 816e 	beq.w	8004b38 <_printf_float+0x440>
 800485c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004860:	d1b9      	bne.n	80047d6 <_printf_float+0xde>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1b7      	bne.n	80047d6 <_printf_float+0xde>
 8004866:	2301      	movs	r3, #1
 8004868:	e7b4      	b.n	80047d4 <_printf_float+0xdc>
 800486a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800486e:	d119      	bne.n	80048a4 <_printf_float+0x1ac>
 8004870:	2900      	cmp	r1, #0
 8004872:	6863      	ldr	r3, [r4, #4]
 8004874:	dd0c      	ble.n	8004890 <_printf_float+0x198>
 8004876:	6121      	str	r1, [r4, #16]
 8004878:	b913      	cbnz	r3, 8004880 <_printf_float+0x188>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	07d2      	lsls	r2, r2, #31
 800487e:	d502      	bpl.n	8004886 <_printf_float+0x18e>
 8004880:	3301      	adds	r3, #1
 8004882:	440b      	add	r3, r1
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004888:	f04f 0900 	mov.w	r9, #0
 800488c:	65a3      	str	r3, [r4, #88]	; 0x58
 800488e:	e7d9      	b.n	8004844 <_printf_float+0x14c>
 8004890:	b913      	cbnz	r3, 8004898 <_printf_float+0x1a0>
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	07d0      	lsls	r0, r2, #31
 8004896:	d501      	bpl.n	800489c <_printf_float+0x1a4>
 8004898:	3302      	adds	r3, #2
 800489a:	e7f3      	b.n	8004884 <_printf_float+0x18c>
 800489c:	2301      	movs	r3, #1
 800489e:	e7f1      	b.n	8004884 <_printf_float+0x18c>
 80048a0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80048a4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80048a8:	4293      	cmp	r3, r2
 80048aa:	db05      	blt.n	80048b8 <_printf_float+0x1c0>
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	07d1      	lsls	r1, r2, #31
 80048b2:	d5e8      	bpl.n	8004886 <_printf_float+0x18e>
 80048b4:	3301      	adds	r3, #1
 80048b6:	e7e5      	b.n	8004884 <_printf_float+0x18c>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bfcc      	ite	gt
 80048bc:	2301      	movgt	r3, #1
 80048be:	f1c3 0302 	rsble	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	e7de      	b.n	8004884 <_printf_float+0x18c>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	055a      	lsls	r2, r3, #21
 80048ca:	d407      	bmi.n	80048dc <_printf_float+0x1e4>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	463a      	mov	r2, r7
 80048d0:	4659      	mov	r1, fp
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b0      	blx	r6
 80048d6:	3001      	adds	r0, #1
 80048d8:	d129      	bne.n	800492e <_printf_float+0x236>
 80048da:	e764      	b.n	80047a6 <_printf_float+0xae>
 80048dc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80048e0:	f240 80d7 	bls.w	8004a92 <_printf_float+0x39a>
 80048e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048e8:	2200      	movs	r2, #0
 80048ea:	2300      	movs	r3, #0
 80048ec:	f7fc f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80048f0:	b388      	cbz	r0, 8004956 <_printf_float+0x25e>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <_printf_float+0x300>)
 80048f6:	4659      	mov	r1, fp
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b0      	blx	r6
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f af52 	beq.w	80047a6 <_printf_float+0xae>
 8004902:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004906:	429a      	cmp	r2, r3
 8004908:	db02      	blt.n	8004910 <_printf_float+0x218>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	07d8      	lsls	r0, r3, #31
 800490e:	d50e      	bpl.n	800492e <_printf_float+0x236>
 8004910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004914:	4659      	mov	r1, fp
 8004916:	4628      	mov	r0, r5
 8004918:	47b0      	blx	r6
 800491a:	3001      	adds	r0, #1
 800491c:	f43f af43 	beq.w	80047a6 <_printf_float+0xae>
 8004920:	2700      	movs	r7, #0
 8004922:	f104 081a 	add.w	r8, r4, #26
 8004926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004928:	3b01      	subs	r3, #1
 800492a:	42bb      	cmp	r3, r7
 800492c:	dc09      	bgt.n	8004942 <_printf_float+0x24a>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	079f      	lsls	r7, r3, #30
 8004932:	f100 80fd 	bmi.w	8004b30 <_printf_float+0x438>
 8004936:	68e0      	ldr	r0, [r4, #12]
 8004938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800493a:	4298      	cmp	r0, r3
 800493c:	bfb8      	it	lt
 800493e:	4618      	movlt	r0, r3
 8004940:	e733      	b.n	80047aa <_printf_float+0xb2>
 8004942:	2301      	movs	r3, #1
 8004944:	4642      	mov	r2, r8
 8004946:	4659      	mov	r1, fp
 8004948:	4628      	mov	r0, r5
 800494a:	47b0      	blx	r6
 800494c:	3001      	adds	r0, #1
 800494e:	f43f af2a 	beq.w	80047a6 <_printf_float+0xae>
 8004952:	3701      	adds	r7, #1
 8004954:	e7e7      	b.n	8004926 <_printf_float+0x22e>
 8004956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004958:	2b00      	cmp	r3, #0
 800495a:	dc2b      	bgt.n	80049b4 <_printf_float+0x2bc>
 800495c:	2301      	movs	r3, #1
 800495e:	4a26      	ldr	r2, [pc, #152]	; (80049f8 <_printf_float+0x300>)
 8004960:	4659      	mov	r1, fp
 8004962:	4628      	mov	r0, r5
 8004964:	47b0      	blx	r6
 8004966:	3001      	adds	r0, #1
 8004968:	f43f af1d 	beq.w	80047a6 <_printf_float+0xae>
 800496c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800496e:	b923      	cbnz	r3, 800497a <_printf_float+0x282>
 8004970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004972:	b913      	cbnz	r3, 800497a <_printf_float+0x282>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	07d9      	lsls	r1, r3, #31
 8004978:	d5d9      	bpl.n	800492e <_printf_float+0x236>
 800497a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800497e:	4659      	mov	r1, fp
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	3001      	adds	r0, #1
 8004986:	f43f af0e 	beq.w	80047a6 <_printf_float+0xae>
 800498a:	f04f 0800 	mov.w	r8, #0
 800498e:	f104 091a 	add.w	r9, r4, #26
 8004992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004994:	425b      	negs	r3, r3
 8004996:	4543      	cmp	r3, r8
 8004998:	dc01      	bgt.n	800499e <_printf_float+0x2a6>
 800499a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800499c:	e797      	b.n	80048ce <_printf_float+0x1d6>
 800499e:	2301      	movs	r3, #1
 80049a0:	464a      	mov	r2, r9
 80049a2:	4659      	mov	r1, fp
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b0      	blx	r6
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f aefc 	beq.w	80047a6 <_printf_float+0xae>
 80049ae:	f108 0801 	add.w	r8, r8, #1
 80049b2:	e7ee      	b.n	8004992 <_printf_float+0x29a>
 80049b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b8:	429a      	cmp	r2, r3
 80049ba:	bfa8      	it	ge
 80049bc:	461a      	movge	r2, r3
 80049be:	2a00      	cmp	r2, #0
 80049c0:	4690      	mov	r8, r2
 80049c2:	dd07      	ble.n	80049d4 <_printf_float+0x2dc>
 80049c4:	4613      	mov	r3, r2
 80049c6:	4659      	mov	r1, fp
 80049c8:	463a      	mov	r2, r7
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b0      	blx	r6
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f aee9 	beq.w	80047a6 <_printf_float+0xae>
 80049d4:	f104 031a 	add.w	r3, r4, #26
 80049d8:	f04f 0a00 	mov.w	sl, #0
 80049dc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80049e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e2:	e015      	b.n	8004a10 <_printf_float+0x318>
 80049e4:	7fefffff 	.word	0x7fefffff
 80049e8:	08006178 	.word	0x08006178
 80049ec:	08006174 	.word	0x08006174
 80049f0:	08006180 	.word	0x08006180
 80049f4:	0800617c 	.word	0x0800617c
 80049f8:	08006184 	.word	0x08006184
 80049fc:	2301      	movs	r3, #1
 80049fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a00:	4659      	mov	r1, fp
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b0      	blx	r6
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f aecd 	beq.w	80047a6 <_printf_float+0xae>
 8004a0c:	f10a 0a01 	add.w	sl, sl, #1
 8004a10:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004a14:	eba9 0308 	sub.w	r3, r9, r8
 8004a18:	4553      	cmp	r3, sl
 8004a1a:	dcef      	bgt.n	80049fc <_printf_float+0x304>
 8004a1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a20:	429a      	cmp	r2, r3
 8004a22:	444f      	add	r7, r9
 8004a24:	db14      	blt.n	8004a50 <_printf_float+0x358>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	07da      	lsls	r2, r3, #31
 8004a2a:	d411      	bmi.n	8004a50 <_printf_float+0x358>
 8004a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a30:	eba3 0209 	sub.w	r2, r3, r9
 8004a34:	eba3 0901 	sub.w	r9, r3, r1
 8004a38:	4591      	cmp	r9, r2
 8004a3a:	bfa8      	it	ge
 8004a3c:	4691      	movge	r9, r2
 8004a3e:	f1b9 0f00 	cmp.w	r9, #0
 8004a42:	dc0d      	bgt.n	8004a60 <_printf_float+0x368>
 8004a44:	2700      	movs	r7, #0
 8004a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a4a:	f104 081a 	add.w	r8, r4, #26
 8004a4e:	e018      	b.n	8004a82 <_printf_float+0x38a>
 8004a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a54:	4659      	mov	r1, fp
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b0      	blx	r6
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d1e6      	bne.n	8004a2c <_printf_float+0x334>
 8004a5e:	e6a2      	b.n	80047a6 <_printf_float+0xae>
 8004a60:	464b      	mov	r3, r9
 8004a62:	463a      	mov	r2, r7
 8004a64:	4659      	mov	r1, fp
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b0      	blx	r6
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d1ea      	bne.n	8004a44 <_printf_float+0x34c>
 8004a6e:	e69a      	b.n	80047a6 <_printf_float+0xae>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4642      	mov	r2, r8
 8004a74:	4659      	mov	r1, fp
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b0      	blx	r6
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f ae93 	beq.w	80047a6 <_printf_float+0xae>
 8004a80:	3701      	adds	r7, #1
 8004a82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	eba3 0309 	sub.w	r3, r3, r9
 8004a8c:	42bb      	cmp	r3, r7
 8004a8e:	dcef      	bgt.n	8004a70 <_printf_float+0x378>
 8004a90:	e74d      	b.n	800492e <_printf_float+0x236>
 8004a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	dc01      	bgt.n	8004a9c <_printf_float+0x3a4>
 8004a98:	07db      	lsls	r3, r3, #31
 8004a9a:	d538      	bpl.n	8004b0e <_printf_float+0x416>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	463a      	mov	r2, r7
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b0      	blx	r6
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f ae7d 	beq.w	80047a6 <_printf_float+0xae>
 8004aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	f107 0701 	add.w	r7, r7, #1
 8004abc:	f43f ae73 	beq.w	80047a6 <_printf_float+0xae>
 8004ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004acc:	2300      	movs	r3, #0
 8004ace:	f7fb ff6b 	bl	80009a8 <__aeabi_dcmpeq>
 8004ad2:	b9c0      	cbnz	r0, 8004b06 <_printf_float+0x40e>
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	463a      	mov	r2, r7
 8004ad8:	4659      	mov	r1, fp
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b0      	blx	r6
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d10d      	bne.n	8004afe <_printf_float+0x406>
 8004ae2:	e660      	b.n	80047a6 <_printf_float+0xae>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	4659      	mov	r1, fp
 8004aea:	4628      	mov	r0, r5
 8004aec:	47b0      	blx	r6
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f ae59 	beq.w	80047a6 <_printf_float+0xae>
 8004af4:	3701      	adds	r7, #1
 8004af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af8:	3b01      	subs	r3, #1
 8004afa:	42bb      	cmp	r3, r7
 8004afc:	dcf2      	bgt.n	8004ae4 <_printf_float+0x3ec>
 8004afe:	464b      	mov	r3, r9
 8004b00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b04:	e6e4      	b.n	80048d0 <_printf_float+0x1d8>
 8004b06:	2700      	movs	r7, #0
 8004b08:	f104 081a 	add.w	r8, r4, #26
 8004b0c:	e7f3      	b.n	8004af6 <_printf_float+0x3fe>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e7e1      	b.n	8004ad6 <_printf_float+0x3de>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4642      	mov	r2, r8
 8004b16:	4659      	mov	r1, fp
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b0      	blx	r6
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f43f ae42 	beq.w	80047a6 <_printf_float+0xae>
 8004b22:	3701      	adds	r7, #1
 8004b24:	68e3      	ldr	r3, [r4, #12]
 8004b26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	42bb      	cmp	r3, r7
 8004b2c:	dcf1      	bgt.n	8004b12 <_printf_float+0x41a>
 8004b2e:	e702      	b.n	8004936 <_printf_float+0x23e>
 8004b30:	2700      	movs	r7, #0
 8004b32:	f104 0819 	add.w	r8, r4, #25
 8004b36:	e7f5      	b.n	8004b24 <_printf_float+0x42c>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f43f ae94 	beq.w	8004866 <_printf_float+0x16e>
 8004b3e:	f04f 0c00 	mov.w	ip, #0
 8004b42:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b46:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b50:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	463a      	mov	r2, r7
 8004b58:	464b      	mov	r3, r9
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7ff fd3a 	bl	80045d4 <__cvt>
 8004b60:	4607      	mov	r7, r0
 8004b62:	e64f      	b.n	8004804 <_printf_float+0x10c>

08004b64 <_printf_common>:
 8004b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b68:	4691      	mov	r9, r2
 8004b6a:	461f      	mov	r7, r3
 8004b6c:	688a      	ldr	r2, [r1, #8]
 8004b6e:	690b      	ldr	r3, [r1, #16]
 8004b70:	4606      	mov	r6, r0
 8004b72:	4293      	cmp	r3, r2
 8004b74:	bfb8      	it	lt
 8004b76:	4613      	movlt	r3, r2
 8004b78:	f8c9 3000 	str.w	r3, [r9]
 8004b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b80:	460c      	mov	r4, r1
 8004b82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b86:	b112      	cbz	r2, 8004b8e <_printf_common+0x2a>
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f8c9 3000 	str.w	r3, [r9]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	0699      	lsls	r1, r3, #26
 8004b92:	bf42      	ittt	mi
 8004b94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b98:	3302      	addmi	r3, #2
 8004b9a:	f8c9 3000 	strmi.w	r3, [r9]
 8004b9e:	6825      	ldr	r5, [r4, #0]
 8004ba0:	f015 0506 	ands.w	r5, r5, #6
 8004ba4:	d107      	bne.n	8004bb6 <_printf_common+0x52>
 8004ba6:	f104 0a19 	add.w	sl, r4, #25
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	f8d9 2000 	ldr.w	r2, [r9]
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	42ab      	cmp	r3, r5
 8004bb4:	dc29      	bgt.n	8004c0a <_printf_common+0xa6>
 8004bb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	3300      	adds	r3, #0
 8004bbe:	bf18      	it	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	0692      	lsls	r2, r2, #26
 8004bc4:	d42e      	bmi.n	8004c24 <_printf_common+0xc0>
 8004bc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bca:	4639      	mov	r1, r7
 8004bcc:	4630      	mov	r0, r6
 8004bce:	47c0      	blx	r8
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d021      	beq.n	8004c18 <_printf_common+0xb4>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	68e5      	ldr	r5, [r4, #12]
 8004bd8:	f003 0306 	and.w	r3, r3, #6
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	bf18      	it	ne
 8004be0:	2500      	movne	r5, #0
 8004be2:	f8d9 2000 	ldr.w	r2, [r9]
 8004be6:	f04f 0900 	mov.w	r9, #0
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf08      	it	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bfc4      	itt	gt
 8004bfc:	1a9b      	subgt	r3, r3, r2
 8004bfe:	18ed      	addgt	r5, r5, r3
 8004c00:	341a      	adds	r4, #26
 8004c02:	454d      	cmp	r5, r9
 8004c04:	d11a      	bne.n	8004c3c <_printf_common+0xd8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e008      	b.n	8004c1c <_printf_common+0xb8>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4639      	mov	r1, r7
 8004c10:	4630      	mov	r0, r6
 8004c12:	47c0      	blx	r8
 8004c14:	3001      	adds	r0, #1
 8004c16:	d103      	bne.n	8004c20 <_printf_common+0xbc>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7c2      	b.n	8004baa <_printf_common+0x46>
 8004c24:	2030      	movs	r0, #48	; 0x30
 8004c26:	18e1      	adds	r1, r4, r3
 8004c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c32:	4422      	add	r2, r4
 8004c34:	3302      	adds	r3, #2
 8004c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3a:	e7c4      	b.n	8004bc6 <_printf_common+0x62>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4639      	mov	r1, r7
 8004c42:	4630      	mov	r0, r6
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d0e6      	beq.n	8004c18 <_printf_common+0xb4>
 8004c4a:	f109 0901 	add.w	r9, r9, #1
 8004c4e:	e7d8      	b.n	8004c02 <_printf_common+0x9e>

08004c50 <_sbrk_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	2300      	movs	r3, #0
 8004c54:	4c05      	ldr	r4, [pc, #20]	; (8004c6c <_sbrk_r+0x1c>)
 8004c56:	4605      	mov	r5, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	f7fc fe4e 	bl	80018fc <_sbrk>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_sbrk_r+0x1a>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_sbrk_r+0x1a>
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20000398 	.word	0x20000398

08004c70 <_raise_r>:
 8004c70:	291f      	cmp	r1, #31
 8004c72:	b538      	push	{r3, r4, r5, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	460d      	mov	r5, r1
 8004c78:	d904      	bls.n	8004c84 <_raise_r+0x14>
 8004c7a:	2316      	movs	r3, #22
 8004c7c:	6003      	str	r3, [r0, #0]
 8004c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c86:	b112      	cbz	r2, 8004c8e <_raise_r+0x1e>
 8004c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c8c:	b94b      	cbnz	r3, 8004ca2 <_raise_r+0x32>
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 f830 	bl	8004cf4 <_getpid_r>
 8004c94:	462a      	mov	r2, r5
 8004c96:	4601      	mov	r1, r0
 8004c98:	4620      	mov	r0, r4
 8004c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9e:	f000 b817 	b.w	8004cd0 <_kill_r>
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d00a      	beq.n	8004cbc <_raise_r+0x4c>
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	d103      	bne.n	8004cb2 <_raise_r+0x42>
 8004caa:	2316      	movs	r3, #22
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e7e7      	b.n	8004c82 <_raise_r+0x12>
 8004cb2:	2400      	movs	r4, #0
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004cba:	4798      	blx	r3
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e7e0      	b.n	8004c82 <_raise_r+0x12>

08004cc0 <raise>:
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <raise+0xc>)
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	f7ff bfd3 	b.w	8004c70 <_raise_r>
 8004cca:	bf00      	nop
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <_kill_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4c06      	ldr	r4, [pc, #24]	; (8004cf0 <_kill_r+0x20>)
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	f7fc fdf2 	bl	80018c6 <_kill>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d102      	bne.n	8004cec <_kill_r+0x1c>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	b103      	cbz	r3, 8004cec <_kill_r+0x1c>
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000398 	.word	0x20000398

08004cf4 <_getpid_r>:
 8004cf4:	f7fc bde0 	b.w	80018b8 <_getpid>

08004cf8 <_strtol_l.isra.0>:
 8004cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	4689      	mov	r9, r1
 8004d00:	4692      	mov	sl, r2
 8004d02:	461e      	mov	r6, r3
 8004d04:	460f      	mov	r7, r1
 8004d06:	463d      	mov	r5, r7
 8004d08:	9808      	ldr	r0, [sp, #32]
 8004d0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d0e:	f000 fec7 	bl	8005aa0 <__locale_ctype_ptr_l>
 8004d12:	4420      	add	r0, r4
 8004d14:	7843      	ldrb	r3, [r0, #1]
 8004d16:	f013 0308 	ands.w	r3, r3, #8
 8004d1a:	d132      	bne.n	8004d82 <_strtol_l.isra.0+0x8a>
 8004d1c:	2c2d      	cmp	r4, #45	; 0x2d
 8004d1e:	d132      	bne.n	8004d86 <_strtol_l.isra.0+0x8e>
 8004d20:	2201      	movs	r2, #1
 8004d22:	787c      	ldrb	r4, [r7, #1]
 8004d24:	1cbd      	adds	r5, r7, #2
 8004d26:	2e00      	cmp	r6, #0
 8004d28:	d05d      	beq.n	8004de6 <_strtol_l.isra.0+0xee>
 8004d2a:	2e10      	cmp	r6, #16
 8004d2c:	d109      	bne.n	8004d42 <_strtol_l.isra.0+0x4a>
 8004d2e:	2c30      	cmp	r4, #48	; 0x30
 8004d30:	d107      	bne.n	8004d42 <_strtol_l.isra.0+0x4a>
 8004d32:	782b      	ldrb	r3, [r5, #0]
 8004d34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d38:	2b58      	cmp	r3, #88	; 0x58
 8004d3a:	d14f      	bne.n	8004ddc <_strtol_l.isra.0+0xe4>
 8004d3c:	2610      	movs	r6, #16
 8004d3e:	786c      	ldrb	r4, [r5, #1]
 8004d40:	3502      	adds	r5, #2
 8004d42:	2a00      	cmp	r2, #0
 8004d44:	bf14      	ite	ne
 8004d46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004d4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004d4e:	2700      	movs	r7, #0
 8004d50:	fbb1 fcf6 	udiv	ip, r1, r6
 8004d54:	4638      	mov	r0, r7
 8004d56:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004d5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	d817      	bhi.n	8004d92 <_strtol_l.isra.0+0x9a>
 8004d62:	461c      	mov	r4, r3
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	dd23      	ble.n	8004db0 <_strtol_l.isra.0+0xb8>
 8004d68:	1c7b      	adds	r3, r7, #1
 8004d6a:	d007      	beq.n	8004d7c <_strtol_l.isra.0+0x84>
 8004d6c:	4584      	cmp	ip, r0
 8004d6e:	d31c      	bcc.n	8004daa <_strtol_l.isra.0+0xb2>
 8004d70:	d101      	bne.n	8004d76 <_strtol_l.isra.0+0x7e>
 8004d72:	45a6      	cmp	lr, r4
 8004d74:	db19      	blt.n	8004daa <_strtol_l.isra.0+0xb2>
 8004d76:	2701      	movs	r7, #1
 8004d78:	fb00 4006 	mla	r0, r0, r6, r4
 8004d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d80:	e7eb      	b.n	8004d5a <_strtol_l.isra.0+0x62>
 8004d82:	462f      	mov	r7, r5
 8004d84:	e7bf      	b.n	8004d06 <_strtol_l.isra.0+0xe>
 8004d86:	2c2b      	cmp	r4, #43	; 0x2b
 8004d88:	bf04      	itt	eq
 8004d8a:	1cbd      	addeq	r5, r7, #2
 8004d8c:	787c      	ldrbeq	r4, [r7, #1]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	e7c9      	b.n	8004d26 <_strtol_l.isra.0+0x2e>
 8004d92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004d96:	2b19      	cmp	r3, #25
 8004d98:	d801      	bhi.n	8004d9e <_strtol_l.isra.0+0xa6>
 8004d9a:	3c37      	subs	r4, #55	; 0x37
 8004d9c:	e7e2      	b.n	8004d64 <_strtol_l.isra.0+0x6c>
 8004d9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004da2:	2b19      	cmp	r3, #25
 8004da4:	d804      	bhi.n	8004db0 <_strtol_l.isra.0+0xb8>
 8004da6:	3c57      	subs	r4, #87	; 0x57
 8004da8:	e7dc      	b.n	8004d64 <_strtol_l.isra.0+0x6c>
 8004daa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004dae:	e7e5      	b.n	8004d7c <_strtol_l.isra.0+0x84>
 8004db0:	1c7b      	adds	r3, r7, #1
 8004db2:	d108      	bne.n	8004dc6 <_strtol_l.isra.0+0xce>
 8004db4:	2322      	movs	r3, #34	; 0x22
 8004db6:	4608      	mov	r0, r1
 8004db8:	f8c8 3000 	str.w	r3, [r8]
 8004dbc:	f1ba 0f00 	cmp.w	sl, #0
 8004dc0:	d107      	bne.n	8004dd2 <_strtol_l.isra.0+0xda>
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	b102      	cbz	r2, 8004dca <_strtol_l.isra.0+0xd2>
 8004dc8:	4240      	negs	r0, r0
 8004dca:	f1ba 0f00 	cmp.w	sl, #0
 8004dce:	d0f8      	beq.n	8004dc2 <_strtol_l.isra.0+0xca>
 8004dd0:	b10f      	cbz	r7, 8004dd6 <_strtol_l.isra.0+0xde>
 8004dd2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004dd6:	f8ca 9000 	str.w	r9, [sl]
 8004dda:	e7f2      	b.n	8004dc2 <_strtol_l.isra.0+0xca>
 8004ddc:	2430      	movs	r4, #48	; 0x30
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d1af      	bne.n	8004d42 <_strtol_l.isra.0+0x4a>
 8004de2:	2608      	movs	r6, #8
 8004de4:	e7ad      	b.n	8004d42 <_strtol_l.isra.0+0x4a>
 8004de6:	2c30      	cmp	r4, #48	; 0x30
 8004de8:	d0a3      	beq.n	8004d32 <_strtol_l.isra.0+0x3a>
 8004dea:	260a      	movs	r6, #10
 8004dec:	e7a9      	b.n	8004d42 <_strtol_l.isra.0+0x4a>
	...

08004df0 <strtol>:
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <strtol+0x24>)
 8004df2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004df4:	681c      	ldr	r4, [r3, #0]
 8004df6:	4d08      	ldr	r5, [pc, #32]	; (8004e18 <strtol+0x28>)
 8004df8:	6a23      	ldr	r3, [r4, #32]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf08      	it	eq
 8004dfe:	462b      	moveq	r3, r5
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	460a      	mov	r2, r1
 8004e06:	4601      	mov	r1, r0
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7ff ff75 	bl	8004cf8 <_strtol_l.isra.0>
 8004e0e:	b003      	add	sp, #12
 8004e10:	bd30      	pop	{r4, r5, pc}
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010
 8004e18:	20000074 	.word	0x20000074

08004e1c <quorem>:
 8004e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	6903      	ldr	r3, [r0, #16]
 8004e22:	690c      	ldr	r4, [r1, #16]
 8004e24:	4680      	mov	r8, r0
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	f2c0 8084 	blt.w	8004f34 <quorem+0x118>
 8004e2c:	3c01      	subs	r4, #1
 8004e2e:	f101 0714 	add.w	r7, r1, #20
 8004e32:	f100 0614 	add.w	r6, r0, #20
 8004e36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e3e:	3501      	adds	r5, #1
 8004e40:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e48:	eb06 030c 	add.w	r3, r6, ip
 8004e4c:	eb07 090c 	add.w	r9, r7, ip
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	b39d      	cbz	r5, 8004ebc <quorem+0xa0>
 8004e54:	f04f 0a00 	mov.w	sl, #0
 8004e58:	4638      	mov	r0, r7
 8004e5a:	46b6      	mov	lr, r6
 8004e5c:	46d3      	mov	fp, sl
 8004e5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e62:	b293      	uxth	r3, r2
 8004e64:	fb05 a303 	mla	r3, r5, r3, sl
 8004e68:	0c12      	lsrs	r2, r2, #16
 8004e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e6e:	fb05 a202 	mla	r2, r5, r2, sl
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	ebab 0303 	sub.w	r3, fp, r3
 8004e78:	f8de b000 	ldr.w	fp, [lr]
 8004e7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e80:	fa1f fb8b 	uxth.w	fp, fp
 8004e84:	445b      	add	r3, fp
 8004e86:	fa1f fb82 	uxth.w	fp, r2
 8004e8a:	f8de 2000 	ldr.w	r2, [lr]
 8004e8e:	4581      	cmp	r9, r0
 8004e90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e9e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ea2:	f84e 3b04 	str.w	r3, [lr], #4
 8004ea6:	d2da      	bcs.n	8004e5e <quorem+0x42>
 8004ea8:	f856 300c 	ldr.w	r3, [r6, ip]
 8004eac:	b933      	cbnz	r3, 8004ebc <quorem+0xa0>
 8004eae:	9b01      	ldr	r3, [sp, #4]
 8004eb0:	3b04      	subs	r3, #4
 8004eb2:	429e      	cmp	r6, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	d331      	bcc.n	8004f1c <quorem+0x100>
 8004eb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	f001 f835 	bl	8005f2c <__mcmp>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	db26      	blt.n	8004f14 <quorem+0xf8>
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f04f 0c00 	mov.w	ip, #0
 8004ecc:	3501      	adds	r5, #1
 8004ece:	f857 1b04 	ldr.w	r1, [r7], #4
 8004ed2:	f8d0 e000 	ldr.w	lr, [r0]
 8004ed6:	b28b      	uxth	r3, r1
 8004ed8:	ebac 0303 	sub.w	r3, ip, r3
 8004edc:	fa1f f28e 	uxth.w	r2, lr
 8004ee0:	4413      	add	r3, r2
 8004ee2:	0c0a      	lsrs	r2, r1, #16
 8004ee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ef2:	45b9      	cmp	r9, r7
 8004ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ef8:	f840 3b04 	str.w	r3, [r0], #4
 8004efc:	d2e7      	bcs.n	8004ece <quorem+0xb2>
 8004efe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f06:	b92a      	cbnz	r2, 8004f14 <quorem+0xf8>
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	429e      	cmp	r6, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	d30b      	bcc.n	8004f28 <quorem+0x10c>
 8004f10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f14:	4628      	mov	r0, r5
 8004f16:	b003      	add	sp, #12
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	d1c9      	bne.n	8004eb8 <quorem+0x9c>
 8004f24:	3c01      	subs	r4, #1
 8004f26:	e7c4      	b.n	8004eb2 <quorem+0x96>
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	d1ef      	bne.n	8004f10 <quorem+0xf4>
 8004f30:	3c01      	subs	r4, #1
 8004f32:	e7ea      	b.n	8004f0a <quorem+0xee>
 8004f34:	2000      	movs	r0, #0
 8004f36:	e7ee      	b.n	8004f16 <quorem+0xfa>

08004f38 <_dtoa_r>:
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	461f      	mov	r7, r3
 8004f40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f42:	b095      	sub	sp, #84	; 0x54
 8004f44:	4604      	mov	r4, r0
 8004f46:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004f4a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f4e:	b93d      	cbnz	r5, 8004f60 <_dtoa_r+0x28>
 8004f50:	2010      	movs	r0, #16
 8004f52:	f7ff fad5 	bl	8004500 <malloc>
 8004f56:	6260      	str	r0, [r4, #36]	; 0x24
 8004f58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f5c:	6005      	str	r5, [r0, #0]
 8004f5e:	60c5      	str	r5, [r0, #12]
 8004f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	b151      	cbz	r1, 8004f7c <_dtoa_r+0x44>
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4093      	lsls	r3, r2
 8004f6c:	604a      	str	r2, [r1, #4]
 8004f6e:	608b      	str	r3, [r1, #8]
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fdfa 	bl	8005b6a <_Bfree>
 8004f76:	2200      	movs	r2, #0
 8004f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	1e3b      	subs	r3, r7, #0
 8004f7e:	bfaf      	iteee	ge
 8004f80:	2300      	movge	r3, #0
 8004f82:	2201      	movlt	r2, #1
 8004f84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f88:	9303      	strlt	r3, [sp, #12]
 8004f8a:	bfac      	ite	ge
 8004f8c:	f8c8 3000 	strge.w	r3, [r8]
 8004f90:	f8c8 2000 	strlt.w	r2, [r8]
 8004f94:	4bae      	ldr	r3, [pc, #696]	; (8005250 <_dtoa_r+0x318>)
 8004f96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f9a:	ea33 0308 	bics.w	r3, r3, r8
 8004f9e:	d11b      	bne.n	8004fd8 <_dtoa_r+0xa0>
 8004fa0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	9b02      	ldr	r3, [sp, #8]
 8004faa:	b923      	cbnz	r3, 8004fb6 <_dtoa_r+0x7e>
 8004fac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f000 8545 	beq.w	8005a40 <_dtoa_r+0xb08>
 8004fb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb8:	b953      	cbnz	r3, 8004fd0 <_dtoa_r+0x98>
 8004fba:	4ba6      	ldr	r3, [pc, #664]	; (8005254 <_dtoa_r+0x31c>)
 8004fbc:	e021      	b.n	8005002 <_dtoa_r+0xca>
 8004fbe:	4ba6      	ldr	r3, [pc, #664]	; (8005258 <_dtoa_r+0x320>)
 8004fc0:	9306      	str	r3, [sp, #24]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	9806      	ldr	r0, [sp, #24]
 8004fca:	b015      	add	sp, #84	; 0x54
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	4ba0      	ldr	r3, [pc, #640]	; (8005254 <_dtoa_r+0x31c>)
 8004fd2:	9306      	str	r3, [sp, #24]
 8004fd4:	3303      	adds	r3, #3
 8004fd6:	e7f5      	b.n	8004fc4 <_dtoa_r+0x8c>
 8004fd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f7fb fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe8:	4682      	mov	sl, r0
 8004fea:	b160      	cbz	r0, 8005006 <_dtoa_r+0xce>
 8004fec:	2301      	movs	r3, #1
 8004fee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8520 	beq.w	8005a3a <_dtoa_r+0xb02>
 8004ffa:	4b98      	ldr	r3, [pc, #608]	; (800525c <_dtoa_r+0x324>)
 8004ffc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	3b01      	subs	r3, #1
 8005002:	9306      	str	r3, [sp, #24]
 8005004:	e7e0      	b.n	8004fc8 <_dtoa_r+0x90>
 8005006:	ab12      	add	r3, sp, #72	; 0x48
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	ab13      	add	r3, sp, #76	; 0x4c
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4632      	mov	r2, r6
 8005010:	463b      	mov	r3, r7
 8005012:	4620      	mov	r0, r4
 8005014:	f001 f802 	bl	800601c <__d2b>
 8005018:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800501c:	4683      	mov	fp, r0
 800501e:	2d00      	cmp	r5, #0
 8005020:	d07d      	beq.n	800511e <_dtoa_r+0x1e6>
 8005022:	46b0      	mov	r8, r6
 8005024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005028:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800502c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005030:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005034:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005038:	2200      	movs	r2, #0
 800503a:	4b89      	ldr	r3, [pc, #548]	; (8005260 <_dtoa_r+0x328>)
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	f7fb f892 	bl	8000168 <__aeabi_dsub>
 8005044:	a37c      	add	r3, pc, #496	; (adr r3, 8005238 <_dtoa_r+0x300>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb fa45 	bl	80004d8 <__aeabi_dmul>
 800504e:	a37c      	add	r3, pc, #496	; (adr r3, 8005240 <_dtoa_r+0x308>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb f88a 	bl	800016c <__adddf3>
 8005058:	4606      	mov	r6, r0
 800505a:	4628      	mov	r0, r5
 800505c:	460f      	mov	r7, r1
 800505e:	f7fb f9d1 	bl	8000404 <__aeabi_i2d>
 8005062:	a379      	add	r3, pc, #484	; (adr r3, 8005248 <_dtoa_r+0x310>)
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f7fb fa36 	bl	80004d8 <__aeabi_dmul>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb f87a 	bl	800016c <__adddf3>
 8005078:	4606      	mov	r6, r0
 800507a:	460f      	mov	r7, r1
 800507c:	f7fb fcdc 	bl	8000a38 <__aeabi_d2iz>
 8005080:	2200      	movs	r2, #0
 8005082:	4682      	mov	sl, r0
 8005084:	2300      	movs	r3, #0
 8005086:	4630      	mov	r0, r6
 8005088:	4639      	mov	r1, r7
 800508a:	f7fb fc97 	bl	80009bc <__aeabi_dcmplt>
 800508e:	b148      	cbz	r0, 80050a4 <_dtoa_r+0x16c>
 8005090:	4650      	mov	r0, sl
 8005092:	f7fb f9b7 	bl	8000404 <__aeabi_i2d>
 8005096:	4632      	mov	r2, r6
 8005098:	463b      	mov	r3, r7
 800509a:	f7fb fc85 	bl	80009a8 <__aeabi_dcmpeq>
 800509e:	b908      	cbnz	r0, 80050a4 <_dtoa_r+0x16c>
 80050a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050a4:	f1ba 0f16 	cmp.w	sl, #22
 80050a8:	d85a      	bhi.n	8005160 <_dtoa_r+0x228>
 80050aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ae:	496d      	ldr	r1, [pc, #436]	; (8005264 <_dtoa_r+0x32c>)
 80050b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80050b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b8:	f7fb fc9e 	bl	80009f8 <__aeabi_dcmpgt>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d051      	beq.n	8005164 <_dtoa_r+0x22c>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050c6:	930d      	str	r3, [sp, #52]	; 0x34
 80050c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050ca:	1b5d      	subs	r5, r3, r5
 80050cc:	1e6b      	subs	r3, r5, #1
 80050ce:	9307      	str	r3, [sp, #28]
 80050d0:	bf43      	ittte	mi
 80050d2:	2300      	movmi	r3, #0
 80050d4:	f1c5 0901 	rsbmi	r9, r5, #1
 80050d8:	9307      	strmi	r3, [sp, #28]
 80050da:	f04f 0900 	movpl.w	r9, #0
 80050de:	f1ba 0f00 	cmp.w	sl, #0
 80050e2:	db41      	blt.n	8005168 <_dtoa_r+0x230>
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80050ea:	4453      	add	r3, sl
 80050ec:	9307      	str	r3, [sp, #28]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9308      	str	r3, [sp, #32]
 80050f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050f4:	2b09      	cmp	r3, #9
 80050f6:	f200 808f 	bhi.w	8005218 <_dtoa_r+0x2e0>
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	bfc4      	itt	gt
 80050fe:	3b04      	subgt	r3, #4
 8005100:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005104:	bfc8      	it	gt
 8005106:	2500      	movgt	r5, #0
 8005108:	f1a3 0302 	sub.w	r3, r3, #2
 800510c:	bfd8      	it	le
 800510e:	2501      	movle	r5, #1
 8005110:	2b03      	cmp	r3, #3
 8005112:	f200 808d 	bhi.w	8005230 <_dtoa_r+0x2f8>
 8005116:	e8df f003 	tbb	[pc, r3]
 800511a:	7d7b      	.short	0x7d7b
 800511c:	6f2f      	.short	0x6f2f
 800511e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005122:	441d      	add	r5, r3
 8005124:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005128:	2820      	cmp	r0, #32
 800512a:	dd13      	ble.n	8005154 <_dtoa_r+0x21c>
 800512c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005130:	9b02      	ldr	r3, [sp, #8]
 8005132:	fa08 f800 	lsl.w	r8, r8, r0
 8005136:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800513a:	fa23 f000 	lsr.w	r0, r3, r0
 800513e:	ea48 0000 	orr.w	r0, r8, r0
 8005142:	f7fb f94f 	bl	80003e4 <__aeabi_ui2d>
 8005146:	2301      	movs	r3, #1
 8005148:	4680      	mov	r8, r0
 800514a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800514e:	3d01      	subs	r5, #1
 8005150:	9310      	str	r3, [sp, #64]	; 0x40
 8005152:	e771      	b.n	8005038 <_dtoa_r+0x100>
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	f1c0 0020 	rsb	r0, r0, #32
 800515a:	fa03 f000 	lsl.w	r0, r3, r0
 800515e:	e7f0      	b.n	8005142 <_dtoa_r+0x20a>
 8005160:	2301      	movs	r3, #1
 8005162:	e7b0      	b.n	80050c6 <_dtoa_r+0x18e>
 8005164:	900d      	str	r0, [sp, #52]	; 0x34
 8005166:	e7af      	b.n	80050c8 <_dtoa_r+0x190>
 8005168:	f1ca 0300 	rsb	r3, sl, #0
 800516c:	9308      	str	r3, [sp, #32]
 800516e:	2300      	movs	r3, #0
 8005170:	eba9 090a 	sub.w	r9, r9, sl
 8005174:	930c      	str	r3, [sp, #48]	; 0x30
 8005176:	e7bc      	b.n	80050f2 <_dtoa_r+0x1ba>
 8005178:	2301      	movs	r3, #1
 800517a:	9309      	str	r3, [sp, #36]	; 0x24
 800517c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800517e:	2b00      	cmp	r3, #0
 8005180:	dd74      	ble.n	800526c <_dtoa_r+0x334>
 8005182:	4698      	mov	r8, r3
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	2200      	movs	r2, #0
 8005188:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800518a:	6072      	str	r2, [r6, #4]
 800518c:	2204      	movs	r2, #4
 800518e:	f102 0014 	add.w	r0, r2, #20
 8005192:	4298      	cmp	r0, r3
 8005194:	6871      	ldr	r1, [r6, #4]
 8005196:	d96e      	bls.n	8005276 <_dtoa_r+0x33e>
 8005198:	4620      	mov	r0, r4
 800519a:	f000 fcb2 	bl	8005b02 <_Balloc>
 800519e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b8 0f0e 	cmp.w	r8, #14
 80051a8:	9306      	str	r3, [sp, #24]
 80051aa:	f200 80ed 	bhi.w	8005388 <_dtoa_r+0x450>
 80051ae:	2d00      	cmp	r5, #0
 80051b0:	f000 80ea 	beq.w	8005388 <_dtoa_r+0x450>
 80051b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051b8:	f1ba 0f00 	cmp.w	sl, #0
 80051bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80051c0:	dd77      	ble.n	80052b2 <_dtoa_r+0x37a>
 80051c2:	4a28      	ldr	r2, [pc, #160]	; (8005264 <_dtoa_r+0x32c>)
 80051c4:	f00a 030f 	and.w	r3, sl, #15
 80051c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80051cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051d0:	06f0      	lsls	r0, r6, #27
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051da:	d568      	bpl.n	80052ae <_dtoa_r+0x376>
 80051dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <_dtoa_r+0x330>)
 80051e2:	2503      	movs	r5, #3
 80051e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051e8:	f7fb faa0 	bl	800072c <__aeabi_ddiv>
 80051ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051f0:	f006 060f 	and.w	r6, r6, #15
 80051f4:	4f1c      	ldr	r7, [pc, #112]	; (8005268 <_dtoa_r+0x330>)
 80051f6:	e04f      	b.n	8005298 <_dtoa_r+0x360>
 80051f8:	2301      	movs	r3, #1
 80051fa:	9309      	str	r3, [sp, #36]	; 0x24
 80051fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051fe:	4453      	add	r3, sl
 8005200:	f103 0801 	add.w	r8, r3, #1
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	4643      	mov	r3, r8
 8005208:	2b01      	cmp	r3, #1
 800520a:	bfb8      	it	lt
 800520c:	2301      	movlt	r3, #1
 800520e:	e7ba      	b.n	8005186 <_dtoa_r+0x24e>
 8005210:	2300      	movs	r3, #0
 8005212:	e7b2      	b.n	800517a <_dtoa_r+0x242>
 8005214:	2300      	movs	r3, #0
 8005216:	e7f0      	b.n	80051fa <_dtoa_r+0x2c2>
 8005218:	2501      	movs	r5, #1
 800521a:	2300      	movs	r3, #0
 800521c:	9509      	str	r5, [sp, #36]	; 0x24
 800521e:	931e      	str	r3, [sp, #120]	; 0x78
 8005220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005224:	2200      	movs	r2, #0
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	4698      	mov	r8, r3
 800522a:	2312      	movs	r3, #18
 800522c:	921f      	str	r2, [sp, #124]	; 0x7c
 800522e:	e7aa      	b.n	8005186 <_dtoa_r+0x24e>
 8005230:	2301      	movs	r3, #1
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	e7f4      	b.n	8005220 <_dtoa_r+0x2e8>
 8005236:	bf00      	nop
 8005238:	636f4361 	.word	0x636f4361
 800523c:	3fd287a7 	.word	0x3fd287a7
 8005240:	8b60c8b3 	.word	0x8b60c8b3
 8005244:	3fc68a28 	.word	0x3fc68a28
 8005248:	509f79fb 	.word	0x509f79fb
 800524c:	3fd34413 	.word	0x3fd34413
 8005250:	7ff00000 	.word	0x7ff00000
 8005254:	0800618f 	.word	0x0800618f
 8005258:	08006186 	.word	0x08006186
 800525c:	08006185 	.word	0x08006185
 8005260:	3ff80000 	.word	0x3ff80000
 8005264:	08006228 	.word	0x08006228
 8005268:	08006200 	.word	0x08006200
 800526c:	2301      	movs	r3, #1
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	4698      	mov	r8, r3
 8005272:	461a      	mov	r2, r3
 8005274:	e7da      	b.n	800522c <_dtoa_r+0x2f4>
 8005276:	3101      	adds	r1, #1
 8005278:	6071      	str	r1, [r6, #4]
 800527a:	0052      	lsls	r2, r2, #1
 800527c:	e787      	b.n	800518e <_dtoa_r+0x256>
 800527e:	07f1      	lsls	r1, r6, #31
 8005280:	d508      	bpl.n	8005294 <_dtoa_r+0x35c>
 8005282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528a:	f7fb f925 	bl	80004d8 <__aeabi_dmul>
 800528e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005292:	3501      	adds	r5, #1
 8005294:	1076      	asrs	r6, r6, #1
 8005296:	3708      	adds	r7, #8
 8005298:	2e00      	cmp	r6, #0
 800529a:	d1f0      	bne.n	800527e <_dtoa_r+0x346>
 800529c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a4:	f7fb fa42 	bl	800072c <__aeabi_ddiv>
 80052a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ac:	e01b      	b.n	80052e6 <_dtoa_r+0x3ae>
 80052ae:	2502      	movs	r5, #2
 80052b0:	e7a0      	b.n	80051f4 <_dtoa_r+0x2bc>
 80052b2:	f000 80a4 	beq.w	80053fe <_dtoa_r+0x4c6>
 80052b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80052ba:	f1ca 0600 	rsb	r6, sl, #0
 80052be:	4ba0      	ldr	r3, [pc, #640]	; (8005540 <_dtoa_r+0x608>)
 80052c0:	f006 020f 	and.w	r2, r6, #15
 80052c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fb f904 	bl	80004d8 <__aeabi_dmul>
 80052d0:	2502      	movs	r5, #2
 80052d2:	2300      	movs	r3, #0
 80052d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d8:	4f9a      	ldr	r7, [pc, #616]	; (8005544 <_dtoa_r+0x60c>)
 80052da:	1136      	asrs	r6, r6, #4
 80052dc:	2e00      	cmp	r6, #0
 80052de:	f040 8083 	bne.w	80053e8 <_dtoa_r+0x4b0>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e0      	bne.n	80052a8 <_dtoa_r+0x370>
 80052e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 808a 	beq.w	8005402 <_dtoa_r+0x4ca>
 80052ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052fa:	2200      	movs	r2, #0
 80052fc:	4b92      	ldr	r3, [pc, #584]	; (8005548 <_dtoa_r+0x610>)
 80052fe:	f7fb fb5d 	bl	80009bc <__aeabi_dcmplt>
 8005302:	2800      	cmp	r0, #0
 8005304:	d07d      	beq.n	8005402 <_dtoa_r+0x4ca>
 8005306:	f1b8 0f00 	cmp.w	r8, #0
 800530a:	d07a      	beq.n	8005402 <_dtoa_r+0x4ca>
 800530c:	9b04      	ldr	r3, [sp, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd36      	ble.n	8005380 <_dtoa_r+0x448>
 8005312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005316:	2200      	movs	r2, #0
 8005318:	4b8c      	ldr	r3, [pc, #560]	; (800554c <_dtoa_r+0x614>)
 800531a:	f7fb f8dd 	bl	80004d8 <__aeabi_dmul>
 800531e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005322:	9e04      	ldr	r6, [sp, #16]
 8005324:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005328:	3501      	adds	r5, #1
 800532a:	4628      	mov	r0, r5
 800532c:	f7fb f86a 	bl	8000404 <__aeabi_i2d>
 8005330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	2200      	movs	r2, #0
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <_dtoa_r+0x618>)
 800533c:	f7fa ff16 	bl	800016c <__adddf3>
 8005340:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005344:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005348:	950b      	str	r5, [sp, #44]	; 0x2c
 800534a:	2e00      	cmp	r6, #0
 800534c:	d15c      	bne.n	8005408 <_dtoa_r+0x4d0>
 800534e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	4b7f      	ldr	r3, [pc, #508]	; (8005554 <_dtoa_r+0x61c>)
 8005356:	f7fa ff07 	bl	8000168 <__aeabi_dsub>
 800535a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800535c:	462b      	mov	r3, r5
 800535e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005362:	f7fb fb49 	bl	80009f8 <__aeabi_dcmpgt>
 8005366:	2800      	cmp	r0, #0
 8005368:	f040 8281 	bne.w	800586e <_dtoa_r+0x936>
 800536c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005372:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005376:	f7fb fb21 	bl	80009bc <__aeabi_dcmplt>
 800537a:	2800      	cmp	r0, #0
 800537c:	f040 8275 	bne.w	800586a <_dtoa_r+0x932>
 8005380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800538a:	2b00      	cmp	r3, #0
 800538c:	f2c0 814b 	blt.w	8005626 <_dtoa_r+0x6ee>
 8005390:	f1ba 0f0e 	cmp.w	sl, #14
 8005394:	f300 8147 	bgt.w	8005626 <_dtoa_r+0x6ee>
 8005398:	4b69      	ldr	r3, [pc, #420]	; (8005540 <_dtoa_r+0x608>)
 800539a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f280 80d7 	bge.w	800555c <_dtoa_r+0x624>
 80053ae:	f1b8 0f00 	cmp.w	r8, #0
 80053b2:	f300 80d3 	bgt.w	800555c <_dtoa_r+0x624>
 80053b6:	f040 8257 	bne.w	8005868 <_dtoa_r+0x930>
 80053ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053be:	2200      	movs	r2, #0
 80053c0:	4b64      	ldr	r3, [pc, #400]	; (8005554 <_dtoa_r+0x61c>)
 80053c2:	f7fb f889 	bl	80004d8 <__aeabi_dmul>
 80053c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ca:	f7fb fb0b 	bl	80009e4 <__aeabi_dcmpge>
 80053ce:	4646      	mov	r6, r8
 80053d0:	4647      	mov	r7, r8
 80053d2:	2800      	cmp	r0, #0
 80053d4:	f040 822d 	bne.w	8005832 <_dtoa_r+0x8fa>
 80053d8:	9b06      	ldr	r3, [sp, #24]
 80053da:	9a06      	ldr	r2, [sp, #24]
 80053dc:	1c5d      	adds	r5, r3, #1
 80053de:	2331      	movs	r3, #49	; 0x31
 80053e0:	f10a 0a01 	add.w	sl, sl, #1
 80053e4:	7013      	strb	r3, [r2, #0]
 80053e6:	e228      	b.n	800583a <_dtoa_r+0x902>
 80053e8:	07f2      	lsls	r2, r6, #31
 80053ea:	d505      	bpl.n	80053f8 <_dtoa_r+0x4c0>
 80053ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f0:	f7fb f872 	bl	80004d8 <__aeabi_dmul>
 80053f4:	2301      	movs	r3, #1
 80053f6:	3501      	adds	r5, #1
 80053f8:	1076      	asrs	r6, r6, #1
 80053fa:	3708      	adds	r7, #8
 80053fc:	e76e      	b.n	80052dc <_dtoa_r+0x3a4>
 80053fe:	2502      	movs	r5, #2
 8005400:	e771      	b.n	80052e6 <_dtoa_r+0x3ae>
 8005402:	4657      	mov	r7, sl
 8005404:	4646      	mov	r6, r8
 8005406:	e790      	b.n	800532a <_dtoa_r+0x3f2>
 8005408:	4b4d      	ldr	r3, [pc, #308]	; (8005540 <_dtoa_r+0x608>)
 800540a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800540e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d048      	beq.n	80054aa <_dtoa_r+0x572>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	2000      	movs	r0, #0
 800541e:	494e      	ldr	r1, [pc, #312]	; (8005558 <_dtoa_r+0x620>)
 8005420:	f7fb f984 	bl	800072c <__aeabi_ddiv>
 8005424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005428:	f7fa fe9e 	bl	8000168 <__aeabi_dsub>
 800542c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005430:	9d06      	ldr	r5, [sp, #24]
 8005432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005436:	f7fb faff 	bl	8000a38 <__aeabi_d2iz>
 800543a:	9011      	str	r0, [sp, #68]	; 0x44
 800543c:	f7fa ffe2 	bl	8000404 <__aeabi_i2d>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005448:	f7fa fe8e 	bl	8000168 <__aeabi_dsub>
 800544c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800544e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005452:	3330      	adds	r3, #48	; 0x30
 8005454:	f805 3b01 	strb.w	r3, [r5], #1
 8005458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800545c:	f7fb faae 	bl	80009bc <__aeabi_dcmplt>
 8005460:	2800      	cmp	r0, #0
 8005462:	d163      	bne.n	800552c <_dtoa_r+0x5f4>
 8005464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005468:	2000      	movs	r0, #0
 800546a:	4937      	ldr	r1, [pc, #220]	; (8005548 <_dtoa_r+0x610>)
 800546c:	f7fa fe7c 	bl	8000168 <__aeabi_dsub>
 8005470:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005474:	f7fb faa2 	bl	80009bc <__aeabi_dcmplt>
 8005478:	2800      	cmp	r0, #0
 800547a:	f040 80b5 	bne.w	80055e8 <_dtoa_r+0x6b0>
 800547e:	9b06      	ldr	r3, [sp, #24]
 8005480:	1aeb      	subs	r3, r5, r3
 8005482:	429e      	cmp	r6, r3
 8005484:	f77f af7c 	ble.w	8005380 <_dtoa_r+0x448>
 8005488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800548c:	2200      	movs	r2, #0
 800548e:	4b2f      	ldr	r3, [pc, #188]	; (800554c <_dtoa_r+0x614>)
 8005490:	f7fb f822 	bl	80004d8 <__aeabi_dmul>
 8005494:	2200      	movs	r2, #0
 8005496:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800549a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800549e:	4b2b      	ldr	r3, [pc, #172]	; (800554c <_dtoa_r+0x614>)
 80054a0:	f7fb f81a 	bl	80004d8 <__aeabi_dmul>
 80054a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a8:	e7c3      	b.n	8005432 <_dtoa_r+0x4fa>
 80054aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054ae:	f7fb f813 	bl	80004d8 <__aeabi_dmul>
 80054b2:	9b06      	ldr	r3, [sp, #24]
 80054b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054b8:	199d      	adds	r5, r3, r6
 80054ba:	461e      	mov	r6, r3
 80054bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c0:	f7fb faba 	bl	8000a38 <__aeabi_d2iz>
 80054c4:	9011      	str	r0, [sp, #68]	; 0x44
 80054c6:	f7fa ff9d 	bl	8000404 <__aeabi_i2d>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d2:	f7fa fe49 	bl	8000168 <__aeabi_dsub>
 80054d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054dc:	3330      	adds	r3, #48	; 0x30
 80054de:	f806 3b01 	strb.w	r3, [r6], #1
 80054e2:	42ae      	cmp	r6, r5
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	d124      	bne.n	8005534 <_dtoa_r+0x5fc>
 80054ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <_dtoa_r+0x620>)
 80054f0:	f7fa fe3c 	bl	800016c <__adddf3>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054fc:	f7fb fa7c 	bl	80009f8 <__aeabi_dcmpgt>
 8005500:	2800      	cmp	r0, #0
 8005502:	d171      	bne.n	80055e8 <_dtoa_r+0x6b0>
 8005504:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005508:	2000      	movs	r0, #0
 800550a:	4913      	ldr	r1, [pc, #76]	; (8005558 <_dtoa_r+0x620>)
 800550c:	f7fa fe2c 	bl	8000168 <__aeabi_dsub>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005518:	f7fb fa50 	bl	80009bc <__aeabi_dcmplt>
 800551c:	2800      	cmp	r0, #0
 800551e:	f43f af2f 	beq.w	8005380 <_dtoa_r+0x448>
 8005522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005526:	1e6a      	subs	r2, r5, #1
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d001      	beq.n	8005530 <_dtoa_r+0x5f8>
 800552c:	46ba      	mov	sl, r7
 800552e:	e04a      	b.n	80055c6 <_dtoa_r+0x68e>
 8005530:	4615      	mov	r5, r2
 8005532:	e7f6      	b.n	8005522 <_dtoa_r+0x5ea>
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <_dtoa_r+0x614>)
 8005536:	f7fa ffcf 	bl	80004d8 <__aeabi_dmul>
 800553a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800553e:	e7bd      	b.n	80054bc <_dtoa_r+0x584>
 8005540:	08006228 	.word	0x08006228
 8005544:	08006200 	.word	0x08006200
 8005548:	3ff00000 	.word	0x3ff00000
 800554c:	40240000 	.word	0x40240000
 8005550:	401c0000 	.word	0x401c0000
 8005554:	40140000 	.word	0x40140000
 8005558:	3fe00000 	.word	0x3fe00000
 800555c:	9d06      	ldr	r5, [sp, #24]
 800555e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	f7fb f8df 	bl	800072c <__aeabi_ddiv>
 800556e:	f7fb fa63 	bl	8000a38 <__aeabi_d2iz>
 8005572:	4681      	mov	r9, r0
 8005574:	f7fa ff46 	bl	8000404 <__aeabi_i2d>
 8005578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800557c:	f7fa ffac 	bl	80004d8 <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4630      	mov	r0, r6
 8005586:	4639      	mov	r1, r7
 8005588:	f7fa fdee 	bl	8000168 <__aeabi_dsub>
 800558c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005590:	f805 6b01 	strb.w	r6, [r5], #1
 8005594:	9e06      	ldr	r6, [sp, #24]
 8005596:	4602      	mov	r2, r0
 8005598:	1bae      	subs	r6, r5, r6
 800559a:	45b0      	cmp	r8, r6
 800559c:	460b      	mov	r3, r1
 800559e:	d135      	bne.n	800560c <_dtoa_r+0x6d4>
 80055a0:	f7fa fde4 	bl	800016c <__adddf3>
 80055a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a8:	4606      	mov	r6, r0
 80055aa:	460f      	mov	r7, r1
 80055ac:	f7fb fa24 	bl	80009f8 <__aeabi_dcmpgt>
 80055b0:	b9c8      	cbnz	r0, 80055e6 <_dtoa_r+0x6ae>
 80055b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b6:	4630      	mov	r0, r6
 80055b8:	4639      	mov	r1, r7
 80055ba:	f7fb f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 80055be:	b110      	cbz	r0, 80055c6 <_dtoa_r+0x68e>
 80055c0:	f019 0f01 	tst.w	r9, #1
 80055c4:	d10f      	bne.n	80055e6 <_dtoa_r+0x6ae>
 80055c6:	4659      	mov	r1, fp
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 face 	bl	8005b6a <_Bfree>
 80055ce:	2300      	movs	r3, #0
 80055d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055d2:	702b      	strb	r3, [r5, #0]
 80055d4:	f10a 0301 	add.w	r3, sl, #1
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f43f acf3 	beq.w	8004fc8 <_dtoa_r+0x90>
 80055e2:	601d      	str	r5, [r3, #0]
 80055e4:	e4f0      	b.n	8004fc8 <_dtoa_r+0x90>
 80055e6:	4657      	mov	r7, sl
 80055e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055ec:	1e6b      	subs	r3, r5, #1
 80055ee:	2a39      	cmp	r2, #57	; 0x39
 80055f0:	d106      	bne.n	8005600 <_dtoa_r+0x6c8>
 80055f2:	9a06      	ldr	r2, [sp, #24]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d107      	bne.n	8005608 <_dtoa_r+0x6d0>
 80055f8:	2330      	movs	r3, #48	; 0x30
 80055fa:	7013      	strb	r3, [r2, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	3701      	adds	r7, #1
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	3201      	adds	r2, #1
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e791      	b.n	800552c <_dtoa_r+0x5f4>
 8005608:	461d      	mov	r5, r3
 800560a:	e7ed      	b.n	80055e8 <_dtoa_r+0x6b0>
 800560c:	2200      	movs	r2, #0
 800560e:	4b99      	ldr	r3, [pc, #612]	; (8005874 <_dtoa_r+0x93c>)
 8005610:	f7fa ff62 	bl	80004d8 <__aeabi_dmul>
 8005614:	2200      	movs	r2, #0
 8005616:	2300      	movs	r3, #0
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	f7fb f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8005620:	2800      	cmp	r0, #0
 8005622:	d09e      	beq.n	8005562 <_dtoa_r+0x62a>
 8005624:	e7cf      	b.n	80055c6 <_dtoa_r+0x68e>
 8005626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005628:	2a00      	cmp	r2, #0
 800562a:	f000 8088 	beq.w	800573e <_dtoa_r+0x806>
 800562e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005630:	2a01      	cmp	r2, #1
 8005632:	dc6d      	bgt.n	8005710 <_dtoa_r+0x7d8>
 8005634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005636:	2a00      	cmp	r2, #0
 8005638:	d066      	beq.n	8005708 <_dtoa_r+0x7d0>
 800563a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800563e:	464d      	mov	r5, r9
 8005640:	9e08      	ldr	r6, [sp, #32]
 8005642:	9a07      	ldr	r2, [sp, #28]
 8005644:	2101      	movs	r1, #1
 8005646:	441a      	add	r2, r3
 8005648:	4620      	mov	r0, r4
 800564a:	4499      	add	r9, r3
 800564c:	9207      	str	r2, [sp, #28]
 800564e:	f000 fb2c 	bl	8005caa <__i2b>
 8005652:	4607      	mov	r7, r0
 8005654:	2d00      	cmp	r5, #0
 8005656:	dd0b      	ble.n	8005670 <_dtoa_r+0x738>
 8005658:	9b07      	ldr	r3, [sp, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	dd08      	ble.n	8005670 <_dtoa_r+0x738>
 800565e:	42ab      	cmp	r3, r5
 8005660:	bfa8      	it	ge
 8005662:	462b      	movge	r3, r5
 8005664:	9a07      	ldr	r2, [sp, #28]
 8005666:	eba9 0903 	sub.w	r9, r9, r3
 800566a:	1aed      	subs	r5, r5, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	9307      	str	r3, [sp, #28]
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	b1eb      	cbz	r3, 80056b0 <_dtoa_r+0x778>
 8005674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d065      	beq.n	8005746 <_dtoa_r+0x80e>
 800567a:	b18e      	cbz	r6, 80056a0 <_dtoa_r+0x768>
 800567c:	4639      	mov	r1, r7
 800567e:	4632      	mov	r2, r6
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fbb1 	bl	8005de8 <__pow5mult>
 8005686:	465a      	mov	r2, fp
 8005688:	4601      	mov	r1, r0
 800568a:	4607      	mov	r7, r0
 800568c:	4620      	mov	r0, r4
 800568e:	f000 fb15 	bl	8005cbc <__multiply>
 8005692:	4659      	mov	r1, fp
 8005694:	900a      	str	r0, [sp, #40]	; 0x28
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fa67 	bl	8005b6a <_Bfree>
 800569c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569e:	469b      	mov	fp, r3
 80056a0:	9b08      	ldr	r3, [sp, #32]
 80056a2:	1b9a      	subs	r2, r3, r6
 80056a4:	d004      	beq.n	80056b0 <_dtoa_r+0x778>
 80056a6:	4659      	mov	r1, fp
 80056a8:	4620      	mov	r0, r4
 80056aa:	f000 fb9d 	bl	8005de8 <__pow5mult>
 80056ae:	4683      	mov	fp, r0
 80056b0:	2101      	movs	r1, #1
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 faf9 	bl	8005caa <__i2b>
 80056b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056ba:	4606      	mov	r6, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 81c6 	beq.w	8005a4e <_dtoa_r+0xb16>
 80056c2:	461a      	mov	r2, r3
 80056c4:	4601      	mov	r1, r0
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 fb8e 	bl	8005de8 <__pow5mult>
 80056cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056ce:	4606      	mov	r6, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	dc3e      	bgt.n	8005752 <_dtoa_r+0x81a>
 80056d4:	9b02      	ldr	r3, [sp, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d137      	bne.n	800574a <_dtoa_r+0x812>
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d134      	bne.n	800574e <_dtoa_r+0x816>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ea:	0d1b      	lsrs	r3, r3, #20
 80056ec:	051b      	lsls	r3, r3, #20
 80056ee:	b12b      	cbz	r3, 80056fc <_dtoa_r+0x7c4>
 80056f0:	9b07      	ldr	r3, [sp, #28]
 80056f2:	f109 0901 	add.w	r9, r9, #1
 80056f6:	3301      	adds	r3, #1
 80056f8:	9307      	str	r3, [sp, #28]
 80056fa:	2301      	movs	r3, #1
 80056fc:	9308      	str	r3, [sp, #32]
 80056fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d128      	bne.n	8005756 <_dtoa_r+0x81e>
 8005704:	2001      	movs	r0, #1
 8005706:	e02e      	b.n	8005766 <_dtoa_r+0x82e>
 8005708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800570a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800570e:	e796      	b.n	800563e <_dtoa_r+0x706>
 8005710:	9b08      	ldr	r3, [sp, #32]
 8005712:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005716:	42b3      	cmp	r3, r6
 8005718:	bfb7      	itett	lt
 800571a:	9b08      	ldrlt	r3, [sp, #32]
 800571c:	1b9e      	subge	r6, r3, r6
 800571e:	1af2      	sublt	r2, r6, r3
 8005720:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005722:	bfbf      	itttt	lt
 8005724:	9608      	strlt	r6, [sp, #32]
 8005726:	189b      	addlt	r3, r3, r2
 8005728:	930c      	strlt	r3, [sp, #48]	; 0x30
 800572a:	2600      	movlt	r6, #0
 800572c:	f1b8 0f00 	cmp.w	r8, #0
 8005730:	bfb9      	ittee	lt
 8005732:	eba9 0508 	sublt.w	r5, r9, r8
 8005736:	2300      	movlt	r3, #0
 8005738:	464d      	movge	r5, r9
 800573a:	4643      	movge	r3, r8
 800573c:	e781      	b.n	8005642 <_dtoa_r+0x70a>
 800573e:	9e08      	ldr	r6, [sp, #32]
 8005740:	464d      	mov	r5, r9
 8005742:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005744:	e786      	b.n	8005654 <_dtoa_r+0x71c>
 8005746:	9a08      	ldr	r2, [sp, #32]
 8005748:	e7ad      	b.n	80056a6 <_dtoa_r+0x76e>
 800574a:	2300      	movs	r3, #0
 800574c:	e7d6      	b.n	80056fc <_dtoa_r+0x7c4>
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	e7d4      	b.n	80056fc <_dtoa_r+0x7c4>
 8005752:	2300      	movs	r3, #0
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	6933      	ldr	r3, [r6, #16]
 8005758:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800575c:	6918      	ldr	r0, [r3, #16]
 800575e:	f000 fa56 	bl	8005c0e <__hi0bits>
 8005762:	f1c0 0020 	rsb	r0, r0, #32
 8005766:	9b07      	ldr	r3, [sp, #28]
 8005768:	4418      	add	r0, r3
 800576a:	f010 001f 	ands.w	r0, r0, #31
 800576e:	d047      	beq.n	8005800 <_dtoa_r+0x8c8>
 8005770:	f1c0 0320 	rsb	r3, r0, #32
 8005774:	2b04      	cmp	r3, #4
 8005776:	dd3b      	ble.n	80057f0 <_dtoa_r+0x8b8>
 8005778:	9b07      	ldr	r3, [sp, #28]
 800577a:	f1c0 001c 	rsb	r0, r0, #28
 800577e:	4481      	add	r9, r0
 8005780:	4405      	add	r5, r0
 8005782:	4403      	add	r3, r0
 8005784:	9307      	str	r3, [sp, #28]
 8005786:	f1b9 0f00 	cmp.w	r9, #0
 800578a:	dd05      	ble.n	8005798 <_dtoa_r+0x860>
 800578c:	4659      	mov	r1, fp
 800578e:	464a      	mov	r2, r9
 8005790:	4620      	mov	r0, r4
 8005792:	f000 fb77 	bl	8005e84 <__lshift>
 8005796:	4683      	mov	fp, r0
 8005798:	9b07      	ldr	r3, [sp, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	dd05      	ble.n	80057aa <_dtoa_r+0x872>
 800579e:	4631      	mov	r1, r6
 80057a0:	461a      	mov	r2, r3
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 fb6e 	bl	8005e84 <__lshift>
 80057a8:	4606      	mov	r6, r0
 80057aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ac:	b353      	cbz	r3, 8005804 <_dtoa_r+0x8cc>
 80057ae:	4631      	mov	r1, r6
 80057b0:	4658      	mov	r0, fp
 80057b2:	f000 fbbb 	bl	8005f2c <__mcmp>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	da24      	bge.n	8005804 <_dtoa_r+0x8cc>
 80057ba:	2300      	movs	r3, #0
 80057bc:	4659      	mov	r1, fp
 80057be:	220a      	movs	r2, #10
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f9e9 	bl	8005b98 <__multadd>
 80057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057cc:	4683      	mov	fp, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8144 	beq.w	8005a5c <_dtoa_r+0xb24>
 80057d4:	2300      	movs	r3, #0
 80057d6:	4639      	mov	r1, r7
 80057d8:	220a      	movs	r2, #10
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f9dc 	bl	8005b98 <__multadd>
 80057e0:	9b04      	ldr	r3, [sp, #16]
 80057e2:	4607      	mov	r7, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dc4d      	bgt.n	8005884 <_dtoa_r+0x94c>
 80057e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	dd4a      	ble.n	8005884 <_dtoa_r+0x94c>
 80057ee:	e011      	b.n	8005814 <_dtoa_r+0x8dc>
 80057f0:	d0c9      	beq.n	8005786 <_dtoa_r+0x84e>
 80057f2:	9a07      	ldr	r2, [sp, #28]
 80057f4:	331c      	adds	r3, #28
 80057f6:	441a      	add	r2, r3
 80057f8:	4499      	add	r9, r3
 80057fa:	441d      	add	r5, r3
 80057fc:	4613      	mov	r3, r2
 80057fe:	e7c1      	b.n	8005784 <_dtoa_r+0x84c>
 8005800:	4603      	mov	r3, r0
 8005802:	e7f6      	b.n	80057f2 <_dtoa_r+0x8ba>
 8005804:	f1b8 0f00 	cmp.w	r8, #0
 8005808:	dc36      	bgt.n	8005878 <_dtoa_r+0x940>
 800580a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800580c:	2b02      	cmp	r3, #2
 800580e:	dd33      	ble.n	8005878 <_dtoa_r+0x940>
 8005810:	f8cd 8010 	str.w	r8, [sp, #16]
 8005814:	9b04      	ldr	r3, [sp, #16]
 8005816:	b963      	cbnz	r3, 8005832 <_dtoa_r+0x8fa>
 8005818:	4631      	mov	r1, r6
 800581a:	2205      	movs	r2, #5
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f9bb 	bl	8005b98 <__multadd>
 8005822:	4601      	mov	r1, r0
 8005824:	4606      	mov	r6, r0
 8005826:	4658      	mov	r0, fp
 8005828:	f000 fb80 	bl	8005f2c <__mcmp>
 800582c:	2800      	cmp	r0, #0
 800582e:	f73f add3 	bgt.w	80053d8 <_dtoa_r+0x4a0>
 8005832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005834:	9d06      	ldr	r5, [sp, #24]
 8005836:	ea6f 0a03 	mvn.w	sl, r3
 800583a:	f04f 0900 	mov.w	r9, #0
 800583e:	4631      	mov	r1, r6
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f992 	bl	8005b6a <_Bfree>
 8005846:	2f00      	cmp	r7, #0
 8005848:	f43f aebd 	beq.w	80055c6 <_dtoa_r+0x68e>
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	d005      	beq.n	800585e <_dtoa_r+0x926>
 8005852:	45b9      	cmp	r9, r7
 8005854:	d003      	beq.n	800585e <_dtoa_r+0x926>
 8005856:	4649      	mov	r1, r9
 8005858:	4620      	mov	r0, r4
 800585a:	f000 f986 	bl	8005b6a <_Bfree>
 800585e:	4639      	mov	r1, r7
 8005860:	4620      	mov	r0, r4
 8005862:	f000 f982 	bl	8005b6a <_Bfree>
 8005866:	e6ae      	b.n	80055c6 <_dtoa_r+0x68e>
 8005868:	2600      	movs	r6, #0
 800586a:	4637      	mov	r7, r6
 800586c:	e7e1      	b.n	8005832 <_dtoa_r+0x8fa>
 800586e:	46ba      	mov	sl, r7
 8005870:	4637      	mov	r7, r6
 8005872:	e5b1      	b.n	80053d8 <_dtoa_r+0x4a0>
 8005874:	40240000 	.word	0x40240000
 8005878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587a:	f8cd 8010 	str.w	r8, [sp, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80f3 	beq.w	8005a6a <_dtoa_r+0xb32>
 8005884:	2d00      	cmp	r5, #0
 8005886:	dd05      	ble.n	8005894 <_dtoa_r+0x95c>
 8005888:	4639      	mov	r1, r7
 800588a:	462a      	mov	r2, r5
 800588c:	4620      	mov	r0, r4
 800588e:	f000 faf9 	bl	8005e84 <__lshift>
 8005892:	4607      	mov	r7, r0
 8005894:	9b08      	ldr	r3, [sp, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04c      	beq.n	8005934 <_dtoa_r+0x9fc>
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4620      	mov	r0, r4
 800589e:	f000 f930 	bl	8005b02 <_Balloc>
 80058a2:	4605      	mov	r5, r0
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	f107 010c 	add.w	r1, r7, #12
 80058aa:	3202      	adds	r2, #2
 80058ac:	0092      	lsls	r2, r2, #2
 80058ae:	300c      	adds	r0, #12
 80058b0:	f000 f91a 	bl	8005ae8 <memcpy>
 80058b4:	2201      	movs	r2, #1
 80058b6:	4629      	mov	r1, r5
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fae3 	bl	8005e84 <__lshift>
 80058be:	46b9      	mov	r9, r7
 80058c0:	4607      	mov	r7, r0
 80058c2:	9b06      	ldr	r3, [sp, #24]
 80058c4:	9307      	str	r3, [sp, #28]
 80058c6:	9b02      	ldr	r3, [sp, #8]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	9308      	str	r3, [sp, #32]
 80058ce:	4631      	mov	r1, r6
 80058d0:	4658      	mov	r0, fp
 80058d2:	f7ff faa3 	bl	8004e1c <quorem>
 80058d6:	4649      	mov	r1, r9
 80058d8:	4605      	mov	r5, r0
 80058da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 fb24 	bl	8005f2c <__mcmp>
 80058e4:	463a      	mov	r2, r7
 80058e6:	9002      	str	r0, [sp, #8]
 80058e8:	4631      	mov	r1, r6
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fb38 	bl	8005f60 <__mdiff>
 80058f0:	68c3      	ldr	r3, [r0, #12]
 80058f2:	4602      	mov	r2, r0
 80058f4:	bb03      	cbnz	r3, 8005938 <_dtoa_r+0xa00>
 80058f6:	4601      	mov	r1, r0
 80058f8:	9009      	str	r0, [sp, #36]	; 0x24
 80058fa:	4658      	mov	r0, fp
 80058fc:	f000 fb16 	bl	8005f2c <__mcmp>
 8005900:	4603      	mov	r3, r0
 8005902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005904:	4611      	mov	r1, r2
 8005906:	4620      	mov	r0, r4
 8005908:	9309      	str	r3, [sp, #36]	; 0x24
 800590a:	f000 f92e 	bl	8005b6a <_Bfree>
 800590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005910:	b9a3      	cbnz	r3, 800593c <_dtoa_r+0xa04>
 8005912:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005914:	b992      	cbnz	r2, 800593c <_dtoa_r+0xa04>
 8005916:	9a08      	ldr	r2, [sp, #32]
 8005918:	b982      	cbnz	r2, 800593c <_dtoa_r+0xa04>
 800591a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800591e:	d029      	beq.n	8005974 <_dtoa_r+0xa3c>
 8005920:	9b02      	ldr	r3, [sp, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	dd01      	ble.n	800592a <_dtoa_r+0x9f2>
 8005926:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800592a:	9b07      	ldr	r3, [sp, #28]
 800592c:	1c5d      	adds	r5, r3, #1
 800592e:	f883 8000 	strb.w	r8, [r3]
 8005932:	e784      	b.n	800583e <_dtoa_r+0x906>
 8005934:	4638      	mov	r0, r7
 8005936:	e7c2      	b.n	80058be <_dtoa_r+0x986>
 8005938:	2301      	movs	r3, #1
 800593a:	e7e3      	b.n	8005904 <_dtoa_r+0x9cc>
 800593c:	9a02      	ldr	r2, [sp, #8]
 800593e:	2a00      	cmp	r2, #0
 8005940:	db04      	blt.n	800594c <_dtoa_r+0xa14>
 8005942:	d123      	bne.n	800598c <_dtoa_r+0xa54>
 8005944:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005946:	bb0a      	cbnz	r2, 800598c <_dtoa_r+0xa54>
 8005948:	9a08      	ldr	r2, [sp, #32]
 800594a:	b9fa      	cbnz	r2, 800598c <_dtoa_r+0xa54>
 800594c:	2b00      	cmp	r3, #0
 800594e:	ddec      	ble.n	800592a <_dtoa_r+0x9f2>
 8005950:	4659      	mov	r1, fp
 8005952:	2201      	movs	r2, #1
 8005954:	4620      	mov	r0, r4
 8005956:	f000 fa95 	bl	8005e84 <__lshift>
 800595a:	4631      	mov	r1, r6
 800595c:	4683      	mov	fp, r0
 800595e:	f000 fae5 	bl	8005f2c <__mcmp>
 8005962:	2800      	cmp	r0, #0
 8005964:	dc03      	bgt.n	800596e <_dtoa_r+0xa36>
 8005966:	d1e0      	bne.n	800592a <_dtoa_r+0x9f2>
 8005968:	f018 0f01 	tst.w	r8, #1
 800596c:	d0dd      	beq.n	800592a <_dtoa_r+0x9f2>
 800596e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005972:	d1d8      	bne.n	8005926 <_dtoa_r+0x9ee>
 8005974:	9b07      	ldr	r3, [sp, #28]
 8005976:	9a07      	ldr	r2, [sp, #28]
 8005978:	1c5d      	adds	r5, r3, #1
 800597a:	2339      	movs	r3, #57	; 0x39
 800597c:	7013      	strb	r3, [r2, #0]
 800597e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005982:	1e6a      	subs	r2, r5, #1
 8005984:	2b39      	cmp	r3, #57	; 0x39
 8005986:	d04d      	beq.n	8005a24 <_dtoa_r+0xaec>
 8005988:	3301      	adds	r3, #1
 800598a:	e052      	b.n	8005a32 <_dtoa_r+0xafa>
 800598c:	9a07      	ldr	r2, [sp, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f102 0501 	add.w	r5, r2, #1
 8005994:	dd06      	ble.n	80059a4 <_dtoa_r+0xa6c>
 8005996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800599a:	d0eb      	beq.n	8005974 <_dtoa_r+0xa3c>
 800599c:	f108 0801 	add.w	r8, r8, #1
 80059a0:	9b07      	ldr	r3, [sp, #28]
 80059a2:	e7c4      	b.n	800592e <_dtoa_r+0x9f6>
 80059a4:	9b06      	ldr	r3, [sp, #24]
 80059a6:	9a04      	ldr	r2, [sp, #16]
 80059a8:	1aeb      	subs	r3, r5, r3
 80059aa:	4293      	cmp	r3, r2
 80059ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 80059b0:	d021      	beq.n	80059f6 <_dtoa_r+0xabe>
 80059b2:	4659      	mov	r1, fp
 80059b4:	2300      	movs	r3, #0
 80059b6:	220a      	movs	r2, #10
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 f8ed 	bl	8005b98 <__multadd>
 80059be:	45b9      	cmp	r9, r7
 80059c0:	4683      	mov	fp, r0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	f04f 020a 	mov.w	r2, #10
 80059ca:	4649      	mov	r1, r9
 80059cc:	4620      	mov	r0, r4
 80059ce:	d105      	bne.n	80059dc <_dtoa_r+0xaa4>
 80059d0:	f000 f8e2 	bl	8005b98 <__multadd>
 80059d4:	4681      	mov	r9, r0
 80059d6:	4607      	mov	r7, r0
 80059d8:	9507      	str	r5, [sp, #28]
 80059da:	e778      	b.n	80058ce <_dtoa_r+0x996>
 80059dc:	f000 f8dc 	bl	8005b98 <__multadd>
 80059e0:	4639      	mov	r1, r7
 80059e2:	4681      	mov	r9, r0
 80059e4:	2300      	movs	r3, #0
 80059e6:	220a      	movs	r2, #10
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 f8d5 	bl	8005b98 <__multadd>
 80059ee:	4607      	mov	r7, r0
 80059f0:	e7f2      	b.n	80059d8 <_dtoa_r+0xaa0>
 80059f2:	f04f 0900 	mov.w	r9, #0
 80059f6:	4659      	mov	r1, fp
 80059f8:	2201      	movs	r2, #1
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fa42 	bl	8005e84 <__lshift>
 8005a00:	4631      	mov	r1, r6
 8005a02:	4683      	mov	fp, r0
 8005a04:	f000 fa92 	bl	8005f2c <__mcmp>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	dcb8      	bgt.n	800597e <_dtoa_r+0xa46>
 8005a0c:	d102      	bne.n	8005a14 <_dtoa_r+0xadc>
 8005a0e:	f018 0f01 	tst.w	r8, #1
 8005a12:	d1b4      	bne.n	800597e <_dtoa_r+0xa46>
 8005a14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a18:	1e6a      	subs	r2, r5, #1
 8005a1a:	2b30      	cmp	r3, #48	; 0x30
 8005a1c:	f47f af0f 	bne.w	800583e <_dtoa_r+0x906>
 8005a20:	4615      	mov	r5, r2
 8005a22:	e7f7      	b.n	8005a14 <_dtoa_r+0xadc>
 8005a24:	9b06      	ldr	r3, [sp, #24]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d105      	bne.n	8005a36 <_dtoa_r+0xafe>
 8005a2a:	2331      	movs	r3, #49	; 0x31
 8005a2c:	9a06      	ldr	r2, [sp, #24]
 8005a2e:	f10a 0a01 	add.w	sl, sl, #1
 8005a32:	7013      	strb	r3, [r2, #0]
 8005a34:	e703      	b.n	800583e <_dtoa_r+0x906>
 8005a36:	4615      	mov	r5, r2
 8005a38:	e7a1      	b.n	800597e <_dtoa_r+0xa46>
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <_dtoa_r+0xb60>)
 8005a3c:	f7ff bae1 	b.w	8005002 <_dtoa_r+0xca>
 8005a40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f47f aabb 	bne.w	8004fbe <_dtoa_r+0x86>
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <_dtoa_r+0xb64>)
 8005a4a:	f7ff bada 	b.w	8005002 <_dtoa_r+0xca>
 8005a4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f77f ae3f 	ble.w	80056d4 <_dtoa_r+0x79c>
 8005a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a58:	9308      	str	r3, [sp, #32]
 8005a5a:	e653      	b.n	8005704 <_dtoa_r+0x7cc>
 8005a5c:	9b04      	ldr	r3, [sp, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dc03      	bgt.n	8005a6a <_dtoa_r+0xb32>
 8005a62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	f73f aed5 	bgt.w	8005814 <_dtoa_r+0x8dc>
 8005a6a:	9d06      	ldr	r5, [sp, #24]
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4658      	mov	r0, fp
 8005a70:	f7ff f9d4 	bl	8004e1c <quorem>
 8005a74:	9b06      	ldr	r3, [sp, #24]
 8005a76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a7a:	f805 8b01 	strb.w	r8, [r5], #1
 8005a7e:	9a04      	ldr	r2, [sp, #16]
 8005a80:	1aeb      	subs	r3, r5, r3
 8005a82:	429a      	cmp	r2, r3
 8005a84:	ddb5      	ble.n	80059f2 <_dtoa_r+0xaba>
 8005a86:	4659      	mov	r1, fp
 8005a88:	2300      	movs	r3, #0
 8005a8a:	220a      	movs	r2, #10
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 f883 	bl	8005b98 <__multadd>
 8005a92:	4683      	mov	fp, r0
 8005a94:	e7ea      	b.n	8005a6c <_dtoa_r+0xb34>
 8005a96:	bf00      	nop
 8005a98:	08006184 	.word	0x08006184
 8005a9c:	08006186 	.word	0x08006186

08005aa0 <__locale_ctype_ptr_l>:
 8005aa0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005aa4:	4770      	bx	lr
	...

08005aa8 <_localeconv_r>:
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <_localeconv_r+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a18      	ldr	r0, [r3, #32]
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <_localeconv_r+0x18>)
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	bf08      	it	eq
 8005ab4:	4618      	moveq	r0, r3
 8005ab6:	30f0      	adds	r0, #240	; 0xf0
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000010 	.word	0x20000010
 8005ac0:	20000074 	.word	0x20000074

08005ac4 <__ascii_mbtowc>:
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	b901      	cbnz	r1, 8005aca <__ascii_mbtowc+0x6>
 8005ac8:	a901      	add	r1, sp, #4
 8005aca:	b142      	cbz	r2, 8005ade <__ascii_mbtowc+0x1a>
 8005acc:	b14b      	cbz	r3, 8005ae2 <__ascii_mbtowc+0x1e>
 8005ace:	7813      	ldrb	r3, [r2, #0]
 8005ad0:	600b      	str	r3, [r1, #0]
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	1c10      	adds	r0, r2, #0
 8005ad6:	bf18      	it	ne
 8005ad8:	2001      	movne	r0, #1
 8005ada:	b002      	add	sp, #8
 8005adc:	4770      	bx	lr
 8005ade:	4610      	mov	r0, r2
 8005ae0:	e7fb      	b.n	8005ada <__ascii_mbtowc+0x16>
 8005ae2:	f06f 0001 	mvn.w	r0, #1
 8005ae6:	e7f8      	b.n	8005ada <__ascii_mbtowc+0x16>

08005ae8 <memcpy>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	1e43      	subs	r3, r0, #1
 8005aec:	440a      	add	r2, r1
 8005aee:	4291      	cmp	r1, r2
 8005af0:	d100      	bne.n	8005af4 <memcpy+0xc>
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005afc:	e7f7      	b.n	8005aee <memcpy+0x6>

08005afe <__malloc_lock>:
 8005afe:	4770      	bx	lr

08005b00 <__malloc_unlock>:
 8005b00:	4770      	bx	lr

08005b02 <_Balloc>:
 8005b02:	b570      	push	{r4, r5, r6, lr}
 8005b04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b06:	4604      	mov	r4, r0
 8005b08:	460e      	mov	r6, r1
 8005b0a:	b93d      	cbnz	r5, 8005b1c <_Balloc+0x1a>
 8005b0c:	2010      	movs	r0, #16
 8005b0e:	f7fe fcf7 	bl	8004500 <malloc>
 8005b12:	6260      	str	r0, [r4, #36]	; 0x24
 8005b14:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b18:	6005      	str	r5, [r0, #0]
 8005b1a:	60c5      	str	r5, [r0, #12]
 8005b1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b1e:	68eb      	ldr	r3, [r5, #12]
 8005b20:	b183      	cbz	r3, 8005b44 <_Balloc+0x42>
 8005b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b2a:	b9b8      	cbnz	r0, 8005b5c <_Balloc+0x5a>
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f506 	lsl.w	r5, r1, r6
 8005b32:	1d6a      	adds	r2, r5, #5
 8005b34:	0092      	lsls	r2, r2, #2
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 fabf 	bl	80060ba <_calloc_r>
 8005b3c:	b160      	cbz	r0, 8005b58 <_Balloc+0x56>
 8005b3e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b42:	e00e      	b.n	8005b62 <_Balloc+0x60>
 8005b44:	2221      	movs	r2, #33	; 0x21
 8005b46:	2104      	movs	r1, #4
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fab6 	bl	80060ba <_calloc_r>
 8005b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b50:	60e8      	str	r0, [r5, #12]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e4      	bne.n	8005b22 <_Balloc+0x20>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	6802      	ldr	r2, [r0, #0]
 8005b5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b62:	2300      	movs	r3, #0
 8005b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b68:	e7f7      	b.n	8005b5a <_Balloc+0x58>

08005b6a <_Bfree>:
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b6e:	4606      	mov	r6, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	b93c      	cbnz	r4, 8005b84 <_Bfree+0x1a>
 8005b74:	2010      	movs	r0, #16
 8005b76:	f7fe fcc3 	bl	8004500 <malloc>
 8005b7a:	6270      	str	r0, [r6, #36]	; 0x24
 8005b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b80:	6004      	str	r4, [r0, #0]
 8005b82:	60c4      	str	r4, [r0, #12]
 8005b84:	b13d      	cbz	r5, 8005b96 <_Bfree+0x2c>
 8005b86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b88:	686a      	ldr	r2, [r5, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b90:	6029      	str	r1, [r5, #0]
 8005b92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b96:	bd70      	pop	{r4, r5, r6, pc}

08005b98 <__multadd>:
 8005b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	461f      	mov	r7, r3
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	690d      	ldr	r5, [r1, #16]
 8005ba6:	f101 0c14 	add.w	ip, r1, #20
 8005baa:	f8dc 0000 	ldr.w	r0, [ip]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	b281      	uxth	r1, r0
 8005bb2:	fb02 7101 	mla	r1, r2, r1, r7
 8005bb6:	0c00      	lsrs	r0, r0, #16
 8005bb8:	0c0f      	lsrs	r7, r1, #16
 8005bba:	fb02 7000 	mla	r0, r2, r0, r7
 8005bbe:	b289      	uxth	r1, r1
 8005bc0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005bc4:	429d      	cmp	r5, r3
 8005bc6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005bca:	f84c 1b04 	str.w	r1, [ip], #4
 8005bce:	dcec      	bgt.n	8005baa <__multadd+0x12>
 8005bd0:	b1d7      	cbz	r7, 8005c08 <__multadd+0x70>
 8005bd2:	68a3      	ldr	r3, [r4, #8]
 8005bd4:	42ab      	cmp	r3, r5
 8005bd6:	dc12      	bgt.n	8005bfe <__multadd+0x66>
 8005bd8:	6861      	ldr	r1, [r4, #4]
 8005bda:	4630      	mov	r0, r6
 8005bdc:	3101      	adds	r1, #1
 8005bde:	f7ff ff90 	bl	8005b02 <_Balloc>
 8005be2:	4680      	mov	r8, r0
 8005be4:	6922      	ldr	r2, [r4, #16]
 8005be6:	f104 010c 	add.w	r1, r4, #12
 8005bea:	3202      	adds	r2, #2
 8005bec:	0092      	lsls	r2, r2, #2
 8005bee:	300c      	adds	r0, #12
 8005bf0:	f7ff ff7a 	bl	8005ae8 <memcpy>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f7ff ffb7 	bl	8005b6a <_Bfree>
 8005bfc:	4644      	mov	r4, r8
 8005bfe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c02:	3501      	adds	r5, #1
 8005c04:	615f      	str	r7, [r3, #20]
 8005c06:	6125      	str	r5, [r4, #16]
 8005c08:	4620      	mov	r0, r4
 8005c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c0e <__hi0bits>:
 8005c0e:	0c02      	lsrs	r2, r0, #16
 8005c10:	0412      	lsls	r2, r2, #16
 8005c12:	4603      	mov	r3, r0
 8005c14:	b9b2      	cbnz	r2, 8005c44 <__hi0bits+0x36>
 8005c16:	0403      	lsls	r3, r0, #16
 8005c18:	2010      	movs	r0, #16
 8005c1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c1e:	bf04      	itt	eq
 8005c20:	021b      	lsleq	r3, r3, #8
 8005c22:	3008      	addeq	r0, #8
 8005c24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c28:	bf04      	itt	eq
 8005c2a:	011b      	lsleq	r3, r3, #4
 8005c2c:	3004      	addeq	r0, #4
 8005c2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c32:	bf04      	itt	eq
 8005c34:	009b      	lsleq	r3, r3, #2
 8005c36:	3002      	addeq	r0, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db06      	blt.n	8005c4a <__hi0bits+0x3c>
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	d503      	bpl.n	8005c48 <__hi0bits+0x3a>
 8005c40:	3001      	adds	r0, #1
 8005c42:	4770      	bx	lr
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7e8      	b.n	8005c1a <__hi0bits+0xc>
 8005c48:	2020      	movs	r0, #32
 8005c4a:	4770      	bx	lr

08005c4c <__lo0bits>:
 8005c4c:	6803      	ldr	r3, [r0, #0]
 8005c4e:	4601      	mov	r1, r0
 8005c50:	f013 0207 	ands.w	r2, r3, #7
 8005c54:	d00b      	beq.n	8005c6e <__lo0bits+0x22>
 8005c56:	07da      	lsls	r2, r3, #31
 8005c58:	d423      	bmi.n	8005ca2 <__lo0bits+0x56>
 8005c5a:	0798      	lsls	r0, r3, #30
 8005c5c:	bf49      	itett	mi
 8005c5e:	085b      	lsrmi	r3, r3, #1
 8005c60:	089b      	lsrpl	r3, r3, #2
 8005c62:	2001      	movmi	r0, #1
 8005c64:	600b      	strmi	r3, [r1, #0]
 8005c66:	bf5c      	itt	pl
 8005c68:	600b      	strpl	r3, [r1, #0]
 8005c6a:	2002      	movpl	r0, #2
 8005c6c:	4770      	bx	lr
 8005c6e:	b298      	uxth	r0, r3
 8005c70:	b9a8      	cbnz	r0, 8005c9e <__lo0bits+0x52>
 8005c72:	2010      	movs	r0, #16
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c7a:	bf04      	itt	eq
 8005c7c:	0a1b      	lsreq	r3, r3, #8
 8005c7e:	3008      	addeq	r0, #8
 8005c80:	071a      	lsls	r2, r3, #28
 8005c82:	bf04      	itt	eq
 8005c84:	091b      	lsreq	r3, r3, #4
 8005c86:	3004      	addeq	r0, #4
 8005c88:	079a      	lsls	r2, r3, #30
 8005c8a:	bf04      	itt	eq
 8005c8c:	089b      	lsreq	r3, r3, #2
 8005c8e:	3002      	addeq	r0, #2
 8005c90:	07da      	lsls	r2, r3, #31
 8005c92:	d402      	bmi.n	8005c9a <__lo0bits+0x4e>
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	d006      	beq.n	8005ca6 <__lo0bits+0x5a>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	600b      	str	r3, [r1, #0]
 8005c9c:	4770      	bx	lr
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	e7e9      	b.n	8005c76 <__lo0bits+0x2a>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	4770      	bx	lr
 8005ca6:	2020      	movs	r0, #32
 8005ca8:	4770      	bx	lr

08005caa <__i2b>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	2101      	movs	r1, #1
 8005cb0:	f7ff ff27 	bl	8005b02 <_Balloc>
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	6144      	str	r4, [r0, #20]
 8005cb8:	6102      	str	r2, [r0, #16]
 8005cba:	bd10      	pop	{r4, pc}

08005cbc <__multiply>:
 8005cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	690a      	ldr	r2, [r1, #16]
 8005cc4:	6923      	ldr	r3, [r4, #16]
 8005cc6:	4688      	mov	r8, r1
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	bfbe      	ittt	lt
 8005ccc:	460b      	movlt	r3, r1
 8005cce:	46a0      	movlt	r8, r4
 8005cd0:	461c      	movlt	r4, r3
 8005cd2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005cd6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cde:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ce2:	eb07 0609 	add.w	r6, r7, r9
 8005ce6:	42b3      	cmp	r3, r6
 8005ce8:	bfb8      	it	lt
 8005cea:	3101      	addlt	r1, #1
 8005cec:	f7ff ff09 	bl	8005b02 <_Balloc>
 8005cf0:	f100 0514 	add.w	r5, r0, #20
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005cfc:	4573      	cmp	r3, lr
 8005cfe:	d316      	bcc.n	8005d2e <__multiply+0x72>
 8005d00:	f104 0214 	add.w	r2, r4, #20
 8005d04:	f108 0114 	add.w	r1, r8, #20
 8005d08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	9b00      	ldr	r3, [sp, #0]
 8005d14:	9201      	str	r2, [sp, #4]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d80c      	bhi.n	8005d34 <__multiply+0x78>
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	dd03      	ble.n	8005d26 <__multiply+0x6a>
 8005d1e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d05d      	beq.n	8005de2 <__multiply+0x126>
 8005d26:	6106      	str	r6, [r0, #16]
 8005d28:	b003      	add	sp, #12
 8005d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2e:	f843 2b04 	str.w	r2, [r3], #4
 8005d32:	e7e3      	b.n	8005cfc <__multiply+0x40>
 8005d34:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d38:	f1bb 0f00 	cmp.w	fp, #0
 8005d3c:	d023      	beq.n	8005d86 <__multiply+0xca>
 8005d3e:	4689      	mov	r9, r1
 8005d40:	46ac      	mov	ip, r5
 8005d42:	f04f 0800 	mov.w	r8, #0
 8005d46:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d4a:	f8dc a000 	ldr.w	sl, [ip]
 8005d4e:	b2a3      	uxth	r3, r4
 8005d50:	fa1f fa8a 	uxth.w	sl, sl
 8005d54:	fb0b a303 	mla	r3, fp, r3, sl
 8005d58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d5c:	f8dc 4000 	ldr.w	r4, [ip]
 8005d60:	4443      	add	r3, r8
 8005d62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d66:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d6a:	46e2      	mov	sl, ip
 8005d6c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d76:	454f      	cmp	r7, r9
 8005d78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d7c:	f84a 3b04 	str.w	r3, [sl], #4
 8005d80:	d82b      	bhi.n	8005dda <__multiply+0x11e>
 8005d82:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d86:	9b01      	ldr	r3, [sp, #4]
 8005d88:	3204      	adds	r2, #4
 8005d8a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d8e:	f1ba 0f00 	cmp.w	sl, #0
 8005d92:	d020      	beq.n	8005dd6 <__multiply+0x11a>
 8005d94:	4689      	mov	r9, r1
 8005d96:	46a8      	mov	r8, r5
 8005d98:	f04f 0b00 	mov.w	fp, #0
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	f8b9 c000 	ldrh.w	ip, [r9]
 8005da2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	fb0a 440c 	mla	r4, sl, ip, r4
 8005dac:	46c4      	mov	ip, r8
 8005dae:	445c      	add	r4, fp
 8005db0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005db4:	f84c 3b04 	str.w	r3, [ip], #4
 8005db8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005dbc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	fb0a b303 	mla	r3, sl, r3, fp
 8005dc6:	454f      	cmp	r7, r9
 8005dc8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005dcc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005dd0:	d805      	bhi.n	8005dde <__multiply+0x122>
 8005dd2:	f8c8 3004 	str.w	r3, [r8, #4]
 8005dd6:	3504      	adds	r5, #4
 8005dd8:	e79b      	b.n	8005d12 <__multiply+0x56>
 8005dda:	46d4      	mov	ip, sl
 8005ddc:	e7b3      	b.n	8005d46 <__multiply+0x8a>
 8005dde:	46e0      	mov	r8, ip
 8005de0:	e7dd      	b.n	8005d9e <__multiply+0xe2>
 8005de2:	3e01      	subs	r6, #1
 8005de4:	e799      	b.n	8005d1a <__multiply+0x5e>
	...

08005de8 <__pow5mult>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4615      	mov	r5, r2
 8005dee:	f012 0203 	ands.w	r2, r2, #3
 8005df2:	4606      	mov	r6, r0
 8005df4:	460f      	mov	r7, r1
 8005df6:	d007      	beq.n	8005e08 <__pow5mult+0x20>
 8005df8:	4c21      	ldr	r4, [pc, #132]	; (8005e80 <__pow5mult+0x98>)
 8005dfa:	3a01      	subs	r2, #1
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e02:	f7ff fec9 	bl	8005b98 <__multadd>
 8005e06:	4607      	mov	r7, r0
 8005e08:	10ad      	asrs	r5, r5, #2
 8005e0a:	d035      	beq.n	8005e78 <__pow5mult+0x90>
 8005e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e0e:	b93c      	cbnz	r4, 8005e20 <__pow5mult+0x38>
 8005e10:	2010      	movs	r0, #16
 8005e12:	f7fe fb75 	bl	8004500 <malloc>
 8005e16:	6270      	str	r0, [r6, #36]	; 0x24
 8005e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e1c:	6004      	str	r4, [r0, #0]
 8005e1e:	60c4      	str	r4, [r0, #12]
 8005e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e28:	b94c      	cbnz	r4, 8005e3e <__pow5mult+0x56>
 8005e2a:	f240 2171 	movw	r1, #625	; 0x271
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff3b 	bl	8005caa <__i2b>
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e3c:	6003      	str	r3, [r0, #0]
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	07eb      	lsls	r3, r5, #31
 8005e44:	d50a      	bpl.n	8005e5c <__pow5mult+0x74>
 8005e46:	4639      	mov	r1, r7
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff ff36 	bl	8005cbc <__multiply>
 8005e50:	4681      	mov	r9, r0
 8005e52:	4639      	mov	r1, r7
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff fe88 	bl	8005b6a <_Bfree>
 8005e5a:	464f      	mov	r7, r9
 8005e5c:	106d      	asrs	r5, r5, #1
 8005e5e:	d00b      	beq.n	8005e78 <__pow5mult+0x90>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	b938      	cbnz	r0, 8005e74 <__pow5mult+0x8c>
 8005e64:	4622      	mov	r2, r4
 8005e66:	4621      	mov	r1, r4
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ff27 	bl	8005cbc <__multiply>
 8005e6e:	6020      	str	r0, [r4, #0]
 8005e70:	f8c0 8000 	str.w	r8, [r0]
 8005e74:	4604      	mov	r4, r0
 8005e76:	e7e4      	b.n	8005e42 <__pow5mult+0x5a>
 8005e78:	4638      	mov	r0, r7
 8005e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7e:	bf00      	nop
 8005e80:	080062f0 	.word	0x080062f0

08005e84 <__lshift>:
 8005e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e88:	460c      	mov	r4, r1
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e94:	eb0a 0903 	add.w	r9, sl, r3
 8005e98:	6849      	ldr	r1, [r1, #4]
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	f109 0501 	add.w	r5, r9, #1
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	db32      	blt.n	8005f0a <__lshift+0x86>
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7ff fe2c 	bl	8005b02 <_Balloc>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4680      	mov	r8, r0
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f100 0114 	add.w	r1, r0, #20
 8005eb4:	4553      	cmp	r3, sl
 8005eb6:	db2b      	blt.n	8005f10 <__lshift+0x8c>
 8005eb8:	6920      	ldr	r0, [r4, #16]
 8005eba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ebe:	f104 0314 	add.w	r3, r4, #20
 8005ec2:	f016 021f 	ands.w	r2, r6, #31
 8005ec6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ece:	d025      	beq.n	8005f1c <__lshift+0x98>
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f1c2 0e20 	rsb	lr, r2, #32
 8005ed6:	468a      	mov	sl, r1
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	4096      	lsls	r6, r2
 8005edc:	4330      	orrs	r0, r6
 8005ede:	f84a 0b04 	str.w	r0, [sl], #4
 8005ee2:	f853 0b04 	ldr.w	r0, [r3], #4
 8005ee6:	459c      	cmp	ip, r3
 8005ee8:	fa20 f00e 	lsr.w	r0, r0, lr
 8005eec:	d814      	bhi.n	8005f18 <__lshift+0x94>
 8005eee:	6048      	str	r0, [r1, #4]
 8005ef0:	b108      	cbz	r0, 8005ef6 <__lshift+0x72>
 8005ef2:	f109 0502 	add.w	r5, r9, #2
 8005ef6:	3d01      	subs	r5, #1
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f8c8 5010 	str.w	r5, [r8, #16]
 8005efe:	4621      	mov	r1, r4
 8005f00:	f7ff fe33 	bl	8005b6a <_Bfree>
 8005f04:	4640      	mov	r0, r8
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	3101      	adds	r1, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	e7c7      	b.n	8005ea0 <__lshift+0x1c>
 8005f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f14:	3301      	adds	r3, #1
 8005f16:	e7cd      	b.n	8005eb4 <__lshift+0x30>
 8005f18:	4651      	mov	r1, sl
 8005f1a:	e7dc      	b.n	8005ed6 <__lshift+0x52>
 8005f1c:	3904      	subs	r1, #4
 8005f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f22:	459c      	cmp	ip, r3
 8005f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f28:	d8f9      	bhi.n	8005f1e <__lshift+0x9a>
 8005f2a:	e7e4      	b.n	8005ef6 <__lshift+0x72>

08005f2c <__mcmp>:
 8005f2c:	6903      	ldr	r3, [r0, #16]
 8005f2e:	690a      	ldr	r2, [r1, #16]
 8005f30:	b530      	push	{r4, r5, lr}
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	d10c      	bne.n	8005f50 <__mcmp+0x24>
 8005f36:	0092      	lsls	r2, r2, #2
 8005f38:	3014      	adds	r0, #20
 8005f3a:	3114      	adds	r1, #20
 8005f3c:	1884      	adds	r4, r0, r2
 8005f3e:	4411      	add	r1, r2
 8005f40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f48:	4295      	cmp	r5, r2
 8005f4a:	d003      	beq.n	8005f54 <__mcmp+0x28>
 8005f4c:	d305      	bcc.n	8005f5a <__mcmp+0x2e>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd30      	pop	{r4, r5, pc}
 8005f54:	42a0      	cmp	r0, r4
 8005f56:	d3f3      	bcc.n	8005f40 <__mcmp+0x14>
 8005f58:	e7fa      	b.n	8005f50 <__mcmp+0x24>
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f5e:	e7f7      	b.n	8005f50 <__mcmp+0x24>

08005f60 <__mdiff>:
 8005f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f64:	460d      	mov	r5, r1
 8005f66:	4607      	mov	r7, r0
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	f7ff ffdd 	bl	8005f2c <__mcmp>
 8005f72:	1e06      	subs	r6, r0, #0
 8005f74:	d108      	bne.n	8005f88 <__mdiff+0x28>
 8005f76:	4631      	mov	r1, r6
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7ff fdc2 	bl	8005b02 <_Balloc>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	bfa4      	itt	ge
 8005f8a:	4623      	movge	r3, r4
 8005f8c:	462c      	movge	r4, r5
 8005f8e:	4638      	mov	r0, r7
 8005f90:	6861      	ldr	r1, [r4, #4]
 8005f92:	bfa6      	itte	ge
 8005f94:	461d      	movge	r5, r3
 8005f96:	2600      	movge	r6, #0
 8005f98:	2601      	movlt	r6, #1
 8005f9a:	f7ff fdb2 	bl	8005b02 <_Balloc>
 8005f9e:	f04f 0e00 	mov.w	lr, #0
 8005fa2:	60c6      	str	r6, [r0, #12]
 8005fa4:	692b      	ldr	r3, [r5, #16]
 8005fa6:	6926      	ldr	r6, [r4, #16]
 8005fa8:	f104 0214 	add.w	r2, r4, #20
 8005fac:	f105 0914 	add.w	r9, r5, #20
 8005fb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005fb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005fb8:	f100 0114 	add.w	r1, r0, #20
 8005fbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8005fc0:	f859 5b04 	ldr.w	r5, [r9], #4
 8005fc4:	fa1f f38a 	uxth.w	r3, sl
 8005fc8:	4473      	add	r3, lr
 8005fca:	b2ac      	uxth	r4, r5
 8005fcc:	1b1b      	subs	r3, r3, r4
 8005fce:	0c2c      	lsrs	r4, r5, #16
 8005fd0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005fd4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005fde:	45c8      	cmp	r8, r9
 8005fe0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005fe4:	4694      	mov	ip, r2
 8005fe6:	f841 4b04 	str.w	r4, [r1], #4
 8005fea:	d8e7      	bhi.n	8005fbc <__mdiff+0x5c>
 8005fec:	45bc      	cmp	ip, r7
 8005fee:	d304      	bcc.n	8005ffa <__mdiff+0x9a>
 8005ff0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ff4:	b183      	cbz	r3, 8006018 <__mdiff+0xb8>
 8005ff6:	6106      	str	r6, [r0, #16]
 8005ff8:	e7c4      	b.n	8005f84 <__mdiff+0x24>
 8005ffa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005ffe:	b2a2      	uxth	r2, r4
 8006000:	4472      	add	r2, lr
 8006002:	1413      	asrs	r3, r2, #16
 8006004:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006008:	b292      	uxth	r2, r2
 800600a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800600e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006012:	f841 2b04 	str.w	r2, [r1], #4
 8006016:	e7e9      	b.n	8005fec <__mdiff+0x8c>
 8006018:	3e01      	subs	r6, #1
 800601a:	e7e9      	b.n	8005ff0 <__mdiff+0x90>

0800601c <__d2b>:
 800601c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006020:	461c      	mov	r4, r3
 8006022:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006026:	2101      	movs	r1, #1
 8006028:	4690      	mov	r8, r2
 800602a:	f7ff fd6a 	bl	8005b02 <_Balloc>
 800602e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006032:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006036:	4607      	mov	r7, r0
 8006038:	bb34      	cbnz	r4, 8006088 <__d2b+0x6c>
 800603a:	9201      	str	r2, [sp, #4]
 800603c:	f1b8 0200 	subs.w	r2, r8, #0
 8006040:	d027      	beq.n	8006092 <__d2b+0x76>
 8006042:	a802      	add	r0, sp, #8
 8006044:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006048:	f7ff fe00 	bl	8005c4c <__lo0bits>
 800604c:	9900      	ldr	r1, [sp, #0]
 800604e:	b1f0      	cbz	r0, 800608e <__d2b+0x72>
 8006050:	9a01      	ldr	r2, [sp, #4]
 8006052:	f1c0 0320 	rsb	r3, r0, #32
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	430b      	orrs	r3, r1
 800605c:	40c2      	lsrs	r2, r0
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	9201      	str	r2, [sp, #4]
 8006062:	9b01      	ldr	r3, [sp, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf14      	ite	ne
 8006068:	2102      	movne	r1, #2
 800606a:	2101      	moveq	r1, #1
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	6139      	str	r1, [r7, #16]
 8006070:	b1c4      	cbz	r4, 80060a4 <__d2b+0x88>
 8006072:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006076:	4404      	add	r4, r0
 8006078:	6034      	str	r4, [r6, #0]
 800607a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800607e:	6028      	str	r0, [r5, #0]
 8006080:	4638      	mov	r0, r7
 8006082:	b002      	add	sp, #8
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800608c:	e7d5      	b.n	800603a <__d2b+0x1e>
 800608e:	6179      	str	r1, [r7, #20]
 8006090:	e7e7      	b.n	8006062 <__d2b+0x46>
 8006092:	a801      	add	r0, sp, #4
 8006094:	f7ff fdda 	bl	8005c4c <__lo0bits>
 8006098:	2101      	movs	r1, #1
 800609a:	9b01      	ldr	r3, [sp, #4]
 800609c:	6139      	str	r1, [r7, #16]
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	3020      	adds	r0, #32
 80060a2:	e7e5      	b.n	8006070 <__d2b+0x54>
 80060a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060ac:	6030      	str	r0, [r6, #0]
 80060ae:	6918      	ldr	r0, [r3, #16]
 80060b0:	f7ff fdad 	bl	8005c0e <__hi0bits>
 80060b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80060b8:	e7e1      	b.n	800607e <__d2b+0x62>

080060ba <_calloc_r>:
 80060ba:	b538      	push	{r3, r4, r5, lr}
 80060bc:	fb02 f401 	mul.w	r4, r2, r1
 80060c0:	4621      	mov	r1, r4
 80060c2:	f7fe fa2d 	bl	8004520 <_malloc_r>
 80060c6:	4605      	mov	r5, r0
 80060c8:	b118      	cbz	r0, 80060d2 <_calloc_r+0x18>
 80060ca:	4622      	mov	r2, r4
 80060cc:	2100      	movs	r1, #0
 80060ce:	f7fe fa1f 	bl	8004510 <memset>
 80060d2:	4628      	mov	r0, r5
 80060d4:	bd38      	pop	{r3, r4, r5, pc}

080060d6 <__ascii_wctomb>:
 80060d6:	b149      	cbz	r1, 80060ec <__ascii_wctomb+0x16>
 80060d8:	2aff      	cmp	r2, #255	; 0xff
 80060da:	bf8b      	itete	hi
 80060dc:	238a      	movhi	r3, #138	; 0x8a
 80060de:	700a      	strbls	r2, [r1, #0]
 80060e0:	6003      	strhi	r3, [r0, #0]
 80060e2:	2001      	movls	r0, #1
 80060e4:	bf88      	it	hi
 80060e6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80060ea:	4770      	bx	lr
 80060ec:	4608      	mov	r0, r1
 80060ee:	4770      	bx	lr

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
