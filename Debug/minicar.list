
minicar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007200  08007200  00017200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007520  08007520  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007520  08007520  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007520  08007520  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001e0  08007708  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08007708  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018516  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dda  00000000  00000000  0003871f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  0003c500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  0003d568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d89d  00000000  00000000  0003e438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ffc  00000000  00000000  0005bcd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000930c0  00000000  00000000  0006ccd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffd91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  000ffe0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080071e8 	.word	0x080071e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080071e8 	.word	0x080071e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2uiz>:
 800107c:	0042      	lsls	r2, r0, #1
 800107e:	d20e      	bcs.n	800109e <__aeabi_f2uiz+0x22>
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001084:	d30b      	bcc.n	800109e <__aeabi_f2uiz+0x22>
 8001086:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d409      	bmi.n	80010a4 <__aeabi_f2uiz+0x28>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr
 80010a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a8:	d101      	bne.n	80010ae <__aeabi_f2uiz+0x32>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	d102      	bne.n	80010b4 <__aeabi_f2uiz+0x38>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b2:	4770      	bx	lr
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <HAL_UART_RxIdleCallback>:

	HAL_UART_Transmit(&huart1, ptr, len, 100);

	return len;
}
void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	handle_idle(huart);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fab1 	bl	800162c <handle_idle>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 fdd8 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f82e 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 fa54 	bl	800158c <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f000 fa2c 	bl	8001540 <MX_DMA_Init>
  MX_TIM1_Init();
 80010e8:	f000 f8ce 	bl	8001288 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ec:	f000 f950 	bl	8001390 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010f0:	f000 f9d2 	bl	8001498 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010f4:	f000 f9fa 	bl	80014ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010f8:	f000 f878 	bl	80011ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	servo_pwm_htim = &htim1;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <main+0x48>)
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <main+0x4c>)
 8001100:	601a      	str	r2, [r3, #0]
	motor_pwm_htim = &htim2;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <main+0x50>)
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <main+0x54>)
 8001106:	601a      	str	r2, [r3, #0]
	connect_huart = &huart2;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <main+0x58>)
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <main+0x5c>)
 800110c:	601a      	str	r2, [r3, #0]
	sensor_hadc = &hadc1;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <main+0x60>)
 8001110:	4a09      	ldr	r2, [pc, #36]	; (8001138 <main+0x64>)
 8001112:	601a      	str	r2, [r3, #0]

	loop();
 8001114:	f000 faa4 	bl	8001660 <loop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001118:	e7fe      	b.n	8001118 <main+0x44>
 800111a:	bf00      	nop
 800111c:	20000378 	.word	0x20000378
 8001120:	20000330 	.word	0x20000330
 8001124:	20000408 	.word	0x20000408
 8001128:	2000037c 	.word	0x2000037c
 800112c:	20000274 	.word	0x20000274
 8001130:	200003c4 	.word	0x200003c4
 8001134:	200002e8 	.word	0x200002e8
 8001138:	20000278 	.word	0x20000278

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2228      	movs	r2, #40	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fa5a 	bl	8005604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800117c:	2300      	movs	r3, #0
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001180:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001184:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fe18 	bl	8002dc0 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001196:	f000 fa43 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f882 	bl	80032c0 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011c2:	f000 fa2d 	bl	8001620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011c6:	2302      	movs	r3, #2
 80011c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80011ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fa10 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011de:	f000 fa1f 	bl	8001620 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3750      	adds	r7, #80	; 0x50
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_ADC1_Init+0x94>)
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <MX_ADC1_Init+0x98>)
 8001200:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_ADC1_Init+0x94>)
 8001204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_ADC1_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_ADC1_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_ADC1_Init+0x94>)
 8001218:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800121c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_ADC1_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_ADC1_Init+0x94>)
 8001226:	2202      	movs	r2, #2
 8001228:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <MX_ADC1_Init+0x94>)
 800122c:	f000 fdb2 	bl	8001d94 <HAL_ADC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001236:	f000 f9f3 	bl	8001620 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2301      	movs	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001242:	2302      	movs	r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_ADC1_Init+0x94>)
 800124c:	f000 fe7a 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001256:	f000 f9e3 	bl	8001620 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800125a:	2301      	movs	r3, #1
 800125c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800125e:	2302      	movs	r3, #2
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_ADC1_Init+0x94>)
 8001268:	f000 fe6c 	bl	8001f44 <HAL_ADC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001272:	f000 f9d5 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000278 	.word	0x20000278
 8001284:	40012400 	.word	0x40012400

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b092      	sub	sp, #72	; 0x48
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2220      	movs	r2, #32
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f9a6 	bl	8005604 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_TIM1_Init+0x100>)
 80012ba:	4a34      	ldr	r2, [pc, #208]	; (800138c <MX_TIM1_Init+0x104>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_TIM1_Init+0x100>)
 80012c0:	223f      	movs	r2, #63	; 0x3f
 80012c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <MX_TIM1_Init+0x100>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_TIM1_Init+0x100>)
 80012cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_TIM1_Init+0x100>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_TIM1_Init+0x100>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_TIM1_Init+0x100>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e4:	4828      	ldr	r0, [pc, #160]	; (8001388 <MX_TIM1_Init+0x100>)
 80012e6:	f002 fb51 	bl	800398c <HAL_TIM_PWM_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012f0:	f000 f996 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001300:	4619      	mov	r1, r3
 8001302:	4821      	ldr	r0, [pc, #132]	; (8001388 <MX_TIM1_Init+0x100>)
 8001304:	f002 ff58 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 f987 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001312:	2360      	movs	r3, #96	; 0x60
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 9999;
 8001316:	f242 730f 	movw	r3, #9999	; 0x270f
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_TIM1_Init+0x100>)
 800133a:	f002 fc71 	bl	8003c20 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001344:	f000 f96c 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM1_Init+0x100>)
 800136c:	f002 ff82 	bl	8004274 <HAL_TIMEx_ConfigBreakDeadTime>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001376:	f000 f953 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM1_Init+0x100>)
 800137c:	f000 fa6a 	bl	8001854 <HAL_TIM_MspPostInit>

}
 8001380:	bf00      	nop
 8001382:	3748      	adds	r7, #72	; 0x48
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000330 	.word	0x20000330
 800138c:	40012c00 	.word	0x40012c00

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <MX_TIM2_Init+0x104>)
 80013b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <MX_TIM2_Init+0x104>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <MX_TIM2_Init+0x104>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <MX_TIM2_Init+0x104>)
 80013c8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80013cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <MX_TIM2_Init+0x104>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <MX_TIM2_Init+0x104>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013da:	482e      	ldr	r0, [pc, #184]	; (8001494 <MX_TIM2_Init+0x104>)
 80013dc:	f002 fad6 	bl	800398c <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013e6:	f000 f91b 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80013ea:	482a      	ldr	r0, [pc, #168]	; (8001494 <MX_TIM2_Init+0x104>)
 80013ec:	f002 fa76 	bl	80038dc <HAL_TIM_OC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013f6:	f000 f913 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4619      	mov	r1, r3
 8001408:	4822      	ldr	r0, [pc, #136]	; (8001494 <MX_TIM2_Init+0x104>)
 800140a:	f002 fed5 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001414:	f000 f904 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4819      	ldr	r0, [pc, #100]	; (8001494 <MX_TIM2_Init+0x104>)
 8001430:	f002 fbf6 	bl	8003c20 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800143a:	f000 f8f1 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2204      	movs	r2, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_TIM2_Init+0x104>)
 8001446:	f002 fbeb 	bl	8003c20 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8001450:	f000 f8e6 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2208      	movs	r2, #8
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_TIM2_Init+0x104>)
 8001460:	f002 fb86 	bl	8003b70 <HAL_TIM_OC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800146a:	f000 f8d9 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	220c      	movs	r2, #12
 8001472:	4619      	mov	r1, r3
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_TIM2_Init+0x104>)
 8001476:	f002 fb7b 	bl	8003b70 <HAL_TIM_OC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001480:	f000 f8ce 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_TIM2_Init+0x104>)
 8001486:	f000 f9e5 	bl	8001854 <HAL_TIM_MspPostInit>

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000037c 	.word	0x2000037c

08001498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <MX_USART1_UART_Init+0x50>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014d0:	f002 ff21 	bl	8004316 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014da:	f000 f8a1 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002a8 	.word	0x200002a8
 80014e8:	40013800 	.word	0x40013800

080014ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_USART2_UART_Init+0x50>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 80014f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001512:	2204      	movs	r2, #4
 8001514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001524:	f002 fef7 	bl	8004316 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800152e:	f000 f877 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200003c4 	.word	0x200003c4
 800153c:	40004400 	.word	0x40004400

08001540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_DMA_Init+0x48>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <MX_DMA_Init+0x48>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_DMA_Init+0x48>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	200b      	movs	r0, #11
 8001564:	f000 ffe5 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001568:	200b      	movs	r0, #11
 800156a:	f000 fffe 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2010      	movs	r0, #16
 8001574:	f000 ffdd 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001578:	2010      	movs	r0, #16
 800157a:	f000 fff6 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015a6:	f043 0320 	orr.w	r3, r3, #32
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a16      	ldr	r2, [pc, #88]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_GPIO_Init+0x8c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2101      	movs	r1, #1
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <MX_GPIO_Init+0x90>)
 80015ee:	f001 fbcf 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : nSleep_Pin */
  GPIO_InitStruct.Pin = nSleep_Pin;
 80015f2:	2301      	movs	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2302      	movs	r3, #2
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSleep_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0x90>)
 800160a:	f001 fa67 	bl	8002adc <HAL_GPIO_Init>

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010c00 	.word	0x40010c00

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <handle_idle>:
void HAL_UART_RxIdleCallback(UART_HandleTypeDef *huart) {
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
	car->handle_rx_idle(huart);
}

void handle_idle(UART_HandleTypeDef *huart) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0210 	bic.w	r2, r2, #16
 8001642:	60da      	str	r2, [r3, #12]
	car->handle_rx_idle(huart);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <handle_idle+0x30>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fb2f 	bl	8004cb0 <_ZN3Car14handle_rx_idleEP20__UART_HandleTypeDef>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001fc 	.word	0x200001fc

08001660 <loop>:

void loop() {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af02      	add	r7, sp, #8

	car = new Car(servo_pwm_htim, motor_pwm_htim, connect_huart, sensor_hadc);
 8001666:	2010      	movs	r0, #16
 8001668:	f003 ff64 	bl	8005534 <_Znwj>
 800166c:	4603      	mov	r3, r0
 800166e:	461c      	mov	r4, r3
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <loop+0x4c>)
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <loop+0x50>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <loop+0x54>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <loop+0x58>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4603      	mov	r3, r0
 8001684:	4620      	mov	r0, r4
 8001686:	f003 fadb 	bl	8004c40 <_ZN3CarC1EP17TIM_HandleTypeDefS1_P20__UART_HandleTypeDefP19__ADC_HandleTypeDef>
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <loop+0x5c>)
 800168c:	601c      	str	r4, [r3, #0]

	car->start();
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <loop+0x5c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fb20 	bl	8004cd8 <_ZN3Car5startEv>
//	car->test();

	for (;;) {
		car->update();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <loop+0x5c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fb4b 	bl	8004d38 <_ZN3Car6updateEv>
		HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f000 fb54 	bl	8001d50 <HAL_Delay>
		car->update();
 80016a8:	e7f6      	b.n	8001698 <loop+0x38>
 80016aa:	bf00      	nop
 80016ac:	20000378 	.word	0x20000378
 80016b0:	20000408 	.word	0x20000408
 80016b4:	20000274 	.word	0x20000274
 80016b8:	200002e8 	.word	0x200002e8
 80016bc:	200001fc 	.word	0x200001fc

080016c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a14      	ldr	r2, [pc, #80]	; (800171c <HAL_MspInit+0x5c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_MspInit+0x5c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_MspInit+0x5c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_MspInit+0x5c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_MspInit+0x60>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_MspInit+0x60>)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000

08001724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <HAL_ADC_MspInit+0xbc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d149      	bne.n	80017d8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_ADC_MspInit+0xc0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <HAL_ADC_MspInit+0xc0>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_ADC_MspInit+0xc0>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_ADC_MspInit+0xc0>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <HAL_ADC_MspInit+0xc0>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_ADC_MspInit+0xc0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001774:	2303      	movs	r3, #3
 8001776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001778:	2303      	movs	r3, #3
 800177a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4819      	ldr	r0, [pc, #100]	; (80017e8 <HAL_ADC_MspInit+0xc4>)
 8001784:	f001 f9aa 	bl	8002adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_ADC_MspInit+0xcc>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017be:	f000 feef 	bl	80025a0 <HAL_DMA_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80017c8:	f7ff ff2a 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017d0:	621a      	str	r2, [r3, #32]
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_ADC_MspInit+0xc8>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40012400 	.word	0x40012400
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	200002ec 	.word	0x200002ec
 80017f0:	40020008 	.word	0x40020008

080017f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_TIM_PWM_MspInit+0x58>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10c      	bne.n	8001820 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_TIM_PWM_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_TIM_PWM_MspInit+0x5c>)
 800180c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_TIM_PWM_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800181e:	e010      	b.n	8001842 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d10b      	bne.n	8001842 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_TIM_PWM_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_TIM_PWM_MspInit+0x5c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_TIM_PWM_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a35      	ldr	r2, [pc, #212]	; (8001944 <HAL_TIM_MspPostInit+0xf0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d119      	bne.n	80018a8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a33      	ldr	r2, [pc, #204]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800188c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	482a      	ldr	r0, [pc, #168]	; (800194c <HAL_TIM_MspPostInit+0xf8>)
 80018a2:	f001 f91b 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018a6:	e048      	b.n	800193a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d143      	bne.n	800193a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6193      	str	r3, [r2, #24]
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_TIM_MspPostInit+0xf4>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80018e2:	f640 4308 	movw	r3, #3080	; 0xc08
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4816      	ldr	r0, [pc, #88]	; (8001950 <HAL_TIM_MspPostInit+0xfc>)
 80018f8:	f001 f8f0 	bl	8002adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2302      	movs	r3, #2
 8001908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <HAL_TIM_MspPostInit+0xf8>)
 8001912:	f001 f8e3 	bl	8002adc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_TIM_MspPostInit+0x100>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_TIM_MspPostInit+0x100>)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	6053      	str	r3, [r2, #4]
}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00
 8001954:	40010000 	.word	0x40010000

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_UART_MspInit+0x154>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d132      	bne.n	80019de <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a46      	ldr	r2, [pc, #280]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	4619      	mov	r1, r3
 80019bc:	483d      	ldr	r0, [pc, #244]	; (8001ab4 <HAL_UART_MspInit+0x15c>)
 80019be:	f001 f88d 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	4619      	mov	r1, r3
 80019d6:	4837      	ldr	r0, [pc, #220]	; (8001ab4 <HAL_UART_MspInit+0x15c>)
 80019d8:	f001 f880 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019dc:	e062      	b.n	8001aa4 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d15d      	bne.n	8001aa4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 80019ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f2:	61d3      	str	r3, [r2, #28]
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4822      	ldr	r0, [pc, #136]	; (8001ab4 <HAL_UART_MspInit+0x15c>)
 8001a2c:	f001 f856 	bl	8002adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a30:	2308      	movs	r3, #8
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	4619      	mov	r1, r3
 8001a42:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0x15c>)
 8001a44:	f001 f84a 	bl	8002adc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0x168>)
 8001a4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a78:	4810      	ldr	r0, [pc, #64]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a7a:	f000 fd91 	bl	80025a0 <HAL_DMA_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001a84:	f7ff fdcc 	bl	8001620 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2026      	movs	r0, #38	; 0x26
 8001a9a:	f000 fd4a 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a9e:	2026      	movs	r0, #38	; 0x26
 8001aa0:	f000 fd63 	bl	800256a <HAL_NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010800 	.word	0x40010800
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	20000230 	.word	0x20000230
 8001ac0:	4002006c 	.word	0x4002006c

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <MemManage_Handler+0x4>

08001adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <BusFault_Handler+0x4>

08001ae2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <UsageFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f902 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA1_Channel1_IRQHandler+0x10>)
 8001b1e:	f000 fea9 	bl	8002874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002ec 	.word	0x200002ec

08001b2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <DMA1_Channel6_IRQHandler+0x10>)
 8001b32:	f000 fe9f 	bl	8002874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000230 	.word	0x20000230

08001b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <USART2_IRQHandler+0x40>)
 8001b48:	f002 fd0e 	bl	8004568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (__HAL_UART_GET_FLAG (&huart2, UART_FLAG_IDLE))
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <USART2_IRQHandler+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d10d      	bne.n	8001b76 <USART2_IRQHandler+0x36>

    {

	  HAL_UART_RxIdleCallback (&huart2);
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <USART2_IRQHandler+0x40>)
 8001b5c:	f7ff faae 	bl	80010bc <HAL_UART_RxIdleCallback>

     __HAL_UART_CLEAR_IDLEFLAG (&huart2);
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <USART2_IRQHandler+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <USART2_IRQHandler+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

    }


  /* USER CODE END USART2_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200003c4 	.word	0x200003c4

08001b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	return 1;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <_kill>:

int _kill(int pid, int sig)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b9c:	f003 fd00 	bl	80055a0 <__errno>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	2316      	movs	r3, #22
 8001ba4:	6013      	str	r3, [r2, #0]
	return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_exit>:

void _exit (int status)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffe7 	bl	8001b92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bc4:	e7fe      	b.n	8001bc4 <_exit+0x12>
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f003 fcd2 	bl	80055a0 <__errno>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	230c      	movs	r3, #12
 8001c00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20005000 	.word	0x20005000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20000200 	.word	0x20000200
 8001c30:	20000418 	.word	0x20000418

08001c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c42:	e003      	b.n	8001c4c <LoopCopyDataInit>

08001c44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c4a:	3104      	adds	r1, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c4c:	480a      	ldr	r0, [pc, #40]	; (8001c78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c54:	d3f6      	bcc.n	8001c44 <CopyDataInit>
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c58:	e002      	b.n	8001c60 <LoopFillZerobss>

08001c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c5c:	f842 3b04 	str.w	r3, [r2], #4

08001c60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c64:	d3f9      	bcc.n	8001c5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c66:	f7ff ffe5 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f003 fc9f 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7ff fa31 	bl	80010d4 <main>
  bx lr
 8001c72:	4770      	bx	lr
  ldr r3, =_sidata
 8001c74:	08007528 	.word	0x08007528
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001c80:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001c84:	20000414 	.word	0x20000414

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x28>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x28>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 fc3d 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fd0a 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fc55 	bl	8002586 <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf4:	f000 fc1d 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x1c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x20>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_IncTick+0x20>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000008 	.word	0x20000008
 8001d38:	2000040c 	.word	0x2000040c

08001d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_GetTick+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000040c 	.word	0x2000040c

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffe0 	bl	8001d3c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0be      	b.n	8001f34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fca6 	bl	8001724 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f9fd 	bl	80021d8 <ADC_ConversionStop_Disable>
 8001dde:	4603      	mov	r3, r0
 8001de0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8099 	bne.w	8001f22 <HAL_ADC_Init+0x18e>
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 8095 	bne.w	8001f22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e00:	f023 0302 	bic.w	r3, r3, #2
 8001e04:	f043 0202 	orr.w	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b1b      	ldrb	r3, [r3, #12]
 8001e1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d003      	beq.n	8001e36 <HAL_ADC_Init+0xa2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_ADC_Init+0xa8>
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Init+0xaa>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7d1b      	ldrb	r3, [r3, #20]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d119      	bne.n	8001e80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7b1b      	ldrb	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	035a      	lsls	r2, r3, #13
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e00b      	b.n	8001e80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_ADC_Init+0x1a8>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb0:	d003      	beq.n	8001eba <HAL_ADC_Init+0x126>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d104      	bne.n	8001ec4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	051b      	lsls	r3, r3, #20
 8001ec2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_ADC_Init+0x1ac>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d10b      	bne.n	8001f00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001efe:	e018      	b.n	8001f32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f023 0312 	bic.w	r3, r3, #18
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f20:	e007      	b.n	8001f32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f40:	ff1f0efe 	.word	0xff1f0efe

08001f44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x20>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e0dc      	b.n	800211e <HAL_ADC_ConfigChannel+0x1da>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	d81c      	bhi.n	8001fae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b05      	subs	r3, #5
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4019      	ands	r1, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b05      	subs	r3, #5
 8001fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
 8001fac:	e03c      	b.n	8002028 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d81c      	bhi.n	8001ff0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b23      	subs	r3, #35	; 0x23
 8001fc8:	221f      	movs	r2, #31
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4019      	ands	r1, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b23      	subs	r3, #35	; 0x23
 8001fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
 8001fee:	e01b      	b.n	8002028 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3b41      	subs	r3, #65	; 0x41
 8002002:	221f      	movs	r2, #31
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	4019      	ands	r1, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b41      	subs	r3, #65	; 0x41
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d91c      	bls.n	800206a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	3b1e      	subs	r3, #30
 8002042:	2207      	movs	r2, #7
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4019      	ands	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6898      	ldr	r0, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	3b1e      	subs	r3, #30
 800205c:	fa00 f203 	lsl.w	r2, r0, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	e019      	b.n	800209e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	2207      	movs	r2, #7
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6898      	ldr	r0, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d003      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020aa:	2b11      	cmp	r3, #17
 80020ac:	d132      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_ADC_ConfigChannel+0x1e4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d125      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d126      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020d4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d11a      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_ADC_ConfigChannel+0x1e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_ADC_ConfigChannel+0x1ec>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9a      	lsrs	r2, r3, #18
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x1b2>
 8002102:	e007      	b.n	8002114 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40012400 	.word	0x40012400
 800212c:	20000000 	.word	0x20000000
 8002130:	431bde83 	.word	0x431bde83

08002134 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d039      	beq.n	80021c6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <ADC_Enable+0x9c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <ADC_Enable+0xa0>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002170:	e002      	b.n	8002178 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800217e:	f7ff fddd 	bl	8001d3c <HAL_GetTick>
 8002182:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002184:	e018      	b.n	80021b8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002186:	f7ff fdd9 	bl	8001d3c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d911      	bls.n	80021b8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1df      	bne.n	8002186 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	431bde83 	.word	0x431bde83

080021d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d127      	bne.n	8002242 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002202:	f7ff fd9b 	bl	8001d3c <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002208:	e014      	b.n	8002234 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800220a:	f7ff fd97 	bl	8001d3c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d90d      	bls.n	8002234 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f043 0210 	orr.w	r2, r3, #16
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e007      	b.n	8002244 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d0e3      	beq.n	800220a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADCEx_Calibration_Start+0x1e>
 8002266:	2302      	movs	r3, #2
 8002268:	e086      	b.n	8002378 <HAL_ADCEx_Calibration_Start+0x12c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffb0 	bl	80021d8 <ADC_ConversionStop_Disable>
 8002278:	4603      	mov	r3, r0
 800227a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d175      	bne.n	800236e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800228a:	f023 0302 	bic.w	r3, r3, #2
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_ADCEx_Calibration_Start+0x134>)
 8002298:	681c      	ldr	r4, [r3, #0]
 800229a:	2002      	movs	r0, #2
 800229c:	f001 fa62 	bl	8003764 <HAL_RCCEx_GetPeriphCLKFreq>
 80022a0:	4603      	mov	r3, r0
 80022a2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80022a6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80022a8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80022aa:	e002      	b.n	80022b2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f9      	bne.n	80022ac <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff3b 	bl	8002134 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0208 	orr.w	r2, r2, #8
 80022cc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80022ce:	f7ff fd35 	bl	8001d3c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80022d4:	e014      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022d6:	f7ff fd31 	bl	8001d3c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b0a      	cmp	r3, #10
 80022e2:	d90d      	bls.n	8002300 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f023 0312 	bic.w	r3, r3, #18
 80022ec:	f043 0210 	orr.w	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e03b      	b.n	8002378 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e3      	bne.n	80022d6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0204 	orr.w	r2, r2, #4
 800231c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800231e:	f7ff fd0d 	bl	8001d3c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002324:	e014      	b.n	8002350 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002326:	f7ff fd09 	bl	8001d3c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b0a      	cmp	r3, #10
 8002332:	d90d      	bls.n	8002350 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f023 0312 	bic.w	r3, r3, #18
 800233c:	f043 0210 	orr.w	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e013      	b.n	8002378 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e3      	bne.n	8002326 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
}
 8002378:	4618      	mov	r0, r3
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	20000000 	.word	0x20000000

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4906      	ldr	r1, [pc, #24]	; (800241c <__NVIC_EnableIRQ+0x34>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024fc:	f7ff ff90 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff2d 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff42 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff90 	bl	8002474 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5f 	bl	8002420 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff35 	bl	80023e8 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e043      	b.n	800263e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_DMA_Init+0xa8>)
 80025be:	4413      	add	r3, r2
 80025c0:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_DMA_Init+0xac>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_DMA_Init+0xb0>)
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	bffdfff8 	.word	0xbffdfff8
 800264c:	cccccccd 	.word	0xcccccccd
 8002650:	40020000 	.word	0x40020000

08002654 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Start_IT+0x20>
 8002670:	2302      	movs	r3, #2
 8002672:	e04a      	b.n	800270a <HAL_DMA_Start_IT+0xb6>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002682:	2b01      	cmp	r3, #1
 8002684:	d13a      	bne.n	80026fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f9e8 	bl	8002a80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 020e 	orr.w	r2, r2, #14
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e00f      	b.n	80026ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0204 	bic.w	r2, r2, #4
 80026d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 020a 	orr.w	r2, r2, #10
 80026e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e005      	b.n	8002708 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002704:	2302      	movs	r3, #2
 8002706:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002708:	7dfb      	ldrb	r3, [r7, #23]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002724:	2b02      	cmp	r3, #2
 8002726:	d008      	beq.n	800273a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2204      	movs	r2, #4
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e020      	b.n	800277c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020e 	bic.w	r2, r2, #14
 8002748:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
	...

08002788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800279a:	2b02      	cmp	r3, #2
 800279c:	d005      	beq.n	80027aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2204      	movs	r2, #4
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e051      	b.n	800284e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 020e 	bic.w	r2, r2, #14
 80027b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_DMA_Abort_IT+0xd0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d029      	beq.n	8002828 <HAL_DMA_Abort_IT+0xa0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_DMA_Abort_IT+0xd4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d022      	beq.n	8002824 <HAL_DMA_Abort_IT+0x9c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_DMA_Abort_IT+0xd8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d01a      	beq.n	800281e <HAL_DMA_Abort_IT+0x96>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_DMA_Abort_IT+0xdc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d012      	beq.n	8002818 <HAL_DMA_Abort_IT+0x90>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_DMA_Abort_IT+0xe0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00a      	beq.n	8002812 <HAL_DMA_Abort_IT+0x8a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_DMA_Abort_IT+0xe4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d102      	bne.n	800280c <HAL_DMA_Abort_IT+0x84>
 8002806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800280a:	e00e      	b.n	800282a <HAL_DMA_Abort_IT+0xa2>
 800280c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002810:	e00b      	b.n	800282a <HAL_DMA_Abort_IT+0xa2>
 8002812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002816:	e008      	b.n	800282a <HAL_DMA_Abort_IT+0xa2>
 8002818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281c:	e005      	b.n	800282a <HAL_DMA_Abort_IT+0xa2>
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	e002      	b.n	800282a <HAL_DMA_Abort_IT+0xa2>
 8002824:	2310      	movs	r3, #16
 8002826:	e000      	b.n	800282a <HAL_DMA_Abort_IT+0xa2>
 8002828:	2301      	movs	r3, #1
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_DMA_Abort_IT+0xe8>)
 800282c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
    } 
  }
  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40020008 	.word	0x40020008
 800285c:	4002001c 	.word	0x4002001c
 8002860:	40020030 	.word	0x40020030
 8002864:	40020044 	.word	0x40020044
 8002868:	40020058 	.word	0x40020058
 800286c:	4002006c 	.word	0x4002006c
 8002870:	40020000 	.word	0x40020000

08002874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d04f      	beq.n	800293c <HAL_DMA_IRQHandler+0xc8>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04a      	beq.n	800293c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0204 	bic.w	r2, r2, #4
 80028c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_DMA_IRQHandler+0x1f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d029      	beq.n	8002922 <HAL_DMA_IRQHandler+0xae>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_DMA_IRQHandler+0x1f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0xaa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <HAL_DMA_IRQHandler+0x1f8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01a      	beq.n	8002918 <HAL_DMA_IRQHandler+0xa4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a62      	ldr	r2, [pc, #392]	; (8002a70 <HAL_DMA_IRQHandler+0x1fc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d012      	beq.n	8002912 <HAL_DMA_IRQHandler+0x9e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_DMA_IRQHandler+0x200>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00a      	beq.n	800290c <HAL_DMA_IRQHandler+0x98>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5f      	ldr	r2, [pc, #380]	; (8002a78 <HAL_DMA_IRQHandler+0x204>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d102      	bne.n	8002906 <HAL_DMA_IRQHandler+0x92>
 8002900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002904:	e00e      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800290a:	e00b      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 800290c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002910:	e008      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002916:	e005      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	e002      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	e000      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002922:	2304      	movs	r3, #4
 8002924:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <HAL_DMA_IRQHandler+0x208>)
 8002926:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8094 	beq.w	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800293a:	e08e      	b.n	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2202      	movs	r2, #2
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d056      	beq.n	80029fa <HAL_DMA_IRQHandler+0x186>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d051      	beq.n	80029fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 020a 	bic.w	r2, r2, #10
 8002972:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a38      	ldr	r2, [pc, #224]	; (8002a64 <HAL_DMA_IRQHandler+0x1f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d029      	beq.n	80029da <HAL_DMA_IRQHandler+0x166>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a37      	ldr	r2, [pc, #220]	; (8002a68 <HAL_DMA_IRQHandler+0x1f4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x162>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a35      	ldr	r2, [pc, #212]	; (8002a6c <HAL_DMA_IRQHandler+0x1f8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x15c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <HAL_DMA_IRQHandler+0x1fc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0x156>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_DMA_IRQHandler+0x200>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x150>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <HAL_DMA_IRQHandler+0x204>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_DMA_IRQHandler+0x14a>
 80029b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029bc:	e00e      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	e00b      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c8:	e008      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ce:	e005      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	e002      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029d6:	2320      	movs	r3, #32
 80029d8:	e000      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029da:	2302      	movs	r3, #2
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_DMA_IRQHandler+0x208>)
 80029de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d034      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029f8:	e02f      	b.n	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2208      	movs	r2, #8
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d028      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x1e8>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d023      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020e 	bic.w	r2, r2, #14
 8002a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
    }
  }
  return;
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
}
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40020008 	.word	0x40020008
 8002a68:	4002001c 	.word	0x4002001c
 8002a6c:	40020030 	.word	0x40020030
 8002a70:	40020044 	.word	0x40020044
 8002a74:	40020058 	.word	0x40020058
 8002a78:	4002006c 	.word	0x4002006c
 8002a7c:	40020000 	.word	0x40020000

08002a80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d108      	bne.n	8002ac0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002abe:	e007      	b.n	8002ad0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b08b      	sub	sp, #44	; 0x2c
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	e127      	b.n	8002d40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af0:	2201      	movs	r2, #1
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 8116 	bne.w	8002d3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b12      	cmp	r3, #18
 8002b14:	d034      	beq.n	8002b80 <HAL_GPIO_Init+0xa4>
 8002b16:	2b12      	cmp	r3, #18
 8002b18:	d80d      	bhi.n	8002b36 <HAL_GPIO_Init+0x5a>
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d02b      	beq.n	8002b76 <HAL_GPIO_Init+0x9a>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d804      	bhi.n	8002b2c <HAL_GPIO_Init+0x50>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d031      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d01c      	beq.n	8002b64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b2a:	e048      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d043      	beq.n	8002bb8 <HAL_GPIO_Init+0xdc>
 8002b30:	2b11      	cmp	r3, #17
 8002b32:	d01b      	beq.n	8002b6c <HAL_GPIO_Init+0x90>
          break;
 8002b34:	e043      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b36:	4a89      	ldr	r2, [pc, #548]	; (8002d5c <HAL_GPIO_Init+0x280>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d026      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b3c:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_GPIO_Init+0x280>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d806      	bhi.n	8002b50 <HAL_GPIO_Init+0x74>
 8002b42:	4a87      	ldr	r2, [pc, #540]	; (8002d60 <HAL_GPIO_Init+0x284>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d020      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b48:	4a86      	ldr	r2, [pc, #536]	; (8002d64 <HAL_GPIO_Init+0x288>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
          break;
 8002b4e:	e036      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b50:	4a85      	ldr	r2, [pc, #532]	; (8002d68 <HAL_GPIO_Init+0x28c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b56:	4a85      	ldr	r2, [pc, #532]	; (8002d6c <HAL_GPIO_Init+0x290>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d016      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b5c:	4a84      	ldr	r2, [pc, #528]	; (8002d70 <HAL_GPIO_Init+0x294>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
          break;
 8002b62:	e02c      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	623b      	str	r3, [r7, #32]
          break;
 8002b6a:	e028      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	623b      	str	r3, [r7, #32]
          break;
 8002b74:	e023      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	623b      	str	r3, [r7, #32]
          break;
 8002b7e:	e01e      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	330c      	adds	r3, #12
 8002b86:	623b      	str	r3, [r7, #32]
          break;
 8002b88:	e019      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b92:	2304      	movs	r3, #4
 8002b94:	623b      	str	r3, [r7, #32]
          break;
 8002b96:	e012      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	611a      	str	r2, [r3, #16]
          break;
 8002baa:	e008      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bac:	2308      	movs	r3, #8
 8002bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	615a      	str	r2, [r3, #20]
          break;
 8002bb6:	e002      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2bff      	cmp	r3, #255	; 0xff
 8002bc2:	d801      	bhi.n	8002bc8 <HAL_GPIO_Init+0xec>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	e001      	b.n	8002bcc <HAL_GPIO_Init+0xf0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2bff      	cmp	r3, #255	; 0xff
 8002bd2:	d802      	bhi.n	8002bda <HAL_GPIO_Init+0xfe>
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x104>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3b08      	subs	r3, #8
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	210f      	movs	r1, #15
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8096 	beq.w	8002d3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c0e:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_GPIO_Init+0x298>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_GPIO_Init+0x298>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6193      	str	r3, [r2, #24]
 8002c1a:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_GPIO_Init+0x298>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c26:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x29c>)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_GPIO_Init+0x2a0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_GPIO_Init+0x19e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4a      	ldr	r2, [pc, #296]	; (8002d80 <HAL_GPIO_Init+0x2a4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00d      	beq.n	8002c76 <HAL_GPIO_Init+0x19a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a49      	ldr	r2, [pc, #292]	; (8002d84 <HAL_GPIO_Init+0x2a8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x196>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a48      	ldr	r2, [pc, #288]	; (8002d88 <HAL_GPIO_Init+0x2ac>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_GPIO_Init+0x192>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c8c:	493a      	ldr	r1, [pc, #232]	; (8002d78 <HAL_GPIO_Init+0x29c>)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4938      	ldr	r1, [pc, #224]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
 8002cb2:	e006      	b.n	8002cc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	4933      	ldr	r1, [pc, #204]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	492e      	ldr	r1, [pc, #184]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	e006      	b.n	8002cea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4929      	ldr	r1, [pc, #164]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	4924      	ldr	r1, [pc, #144]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	491f      	ldr	r1, [pc, #124]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	491a      	ldr	r1, [pc, #104]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60cb      	str	r3, [r1, #12]
 8002d2a:	e006      	b.n	8002d3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	4915      	ldr	r1, [pc, #84]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f aed0 	bne.w	8002af0 <HAL_GPIO_Init+0x14>
  }
}
 8002d50:	bf00      	nop
 8002d52:	372c      	adds	r7, #44	; 0x2c
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	10210000 	.word	0x10210000
 8002d60:	10110000 	.word	0x10110000
 8002d64:	10120000 	.word	0x10120000
 8002d68:	10310000 	.word	0x10310000
 8002d6c:	10320000 	.word	0x10320000
 8002d70:	10220000 	.word	0x10220000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40010800 	.word	0x40010800
 8002d80:	40010c00 	.word	0x40010c00
 8002d84:	40011000 	.word	0x40011000
 8002d88:	40011400 	.word	0x40011400
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dac:	e003      	b.n	8002db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	611a      	str	r2, [r3, #16]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e26c      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8087 	beq.w	8002eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d00c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dec:	4b8f      	ldr	r3, [pc, #572]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d112      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5e>
 8002df8:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06c      	beq.n	8002eec <HAL_RCC_OscConfig+0x12c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d168      	bne.n	8002eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e246      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x76>
 8002e28:	4b80      	ldr	r3, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a7f      	ldr	r2, [pc, #508]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e02e      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x98>
 8002e3e:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b78      	ldr	r3, [pc, #480]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a77      	ldr	r2, [pc, #476]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0xbc>
 8002e62:	4b72      	ldr	r3, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a71      	ldr	r2, [pc, #452]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b6f      	ldr	r3, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6e      	ldr	r2, [pc, #440]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xd4>
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6a      	ldr	r2, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a67      	ldr	r2, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe ff4e 	bl	8001d3c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe ff4a 	bl	8001d3c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1fa      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe4>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe ff3a 	bl	8001d3c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe ff36 	bl	8001d3c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1e6      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x10c>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x18c>
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x176>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1ba      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4939      	ldr	r1, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe feef 	bl	8001d3c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe feeb 	bl	8001d3c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e19b      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fece 	bl	8001d3c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7fe feca 	bl	8001d3c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e17a      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03a      	beq.n	8003044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe feae 	bl	8001d3c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe feaa 	bl	8001d3c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e15a      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003002:	2001      	movs	r0, #1
 8003004:	f000 fada 	bl	80035bc <RCC_Delay>
 8003008:	e01c      	b.n	8003044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fe94 	bl	8001d3c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003016:	e00f      	b.n	8003038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe fe90 	bl	8001d3c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d908      	bls.n	8003038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e140      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	42420000 	.word	0x42420000
 8003034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b9e      	ldr	r3, [pc, #632]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e9      	bne.n	8003018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a6 	beq.w	800319e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b97      	ldr	r3, [pc, #604]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	4b94      	ldr	r3, [pc, #592]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4a93      	ldr	r2, [pc, #588]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	61d3      	str	r3, [r2, #28]
 800306e:	4b91      	ldr	r3, [pc, #580]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b8e      	ldr	r3, [pc, #568]	; (80032b8 <HAL_RCC_OscConfig+0x4f8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x4f8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x4f8>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003096:	f7fe fe51 	bl	8001d3c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7fe fe4d 	bl	8001d3c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b64      	cmp	r3, #100	; 0x64
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0fd      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x4f8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x312>
 80030c4:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a7a      	ldr	r2, [pc, #488]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	e02d      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x334>
 80030da:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a72      	ldr	r2, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	e01c      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x356>
 80030fc:	4b6d      	ldr	r3, [pc, #436]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a6c      	ldr	r2, [pc, #432]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a69      	ldr	r2, [pc, #420]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	e00b      	b.n	800312e <HAL_RCC_OscConfig+0x36e>
 8003116:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a66      	ldr	r2, [pc, #408]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d015      	beq.n	8003162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe fe01 	bl	8001d3c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fdfd 	bl	8001d3c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0ab      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ee      	beq.n	800313e <HAL_RCC_OscConfig+0x37e>
 8003160:	e014      	b.n	800318c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe fdeb 	bl	8001d3c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe fde7 	bl	8001d3c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e095      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ee      	bne.n	800316a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b48      	ldr	r3, [pc, #288]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a47      	ldr	r2, [pc, #284]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8081 	beq.w	80032aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a8:	4b42      	ldr	r3, [pc, #264]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d061      	beq.n	8003278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d146      	bne.n	800324a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x4fc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fdbb 	bl	8001d3c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe fdb7 	bl	8001d3c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e067      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031dc:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d108      	bne.n	8003204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	492d      	ldr	r1, [pc, #180]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a19      	ldr	r1, [r3, #32]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	430b      	orrs	r3, r1
 8003216:	4927      	ldr	r1, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x4fc>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe fd8b 	bl	8001d3c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322a:	f7fe fd87 	bl	8001d3c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e037      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x46a>
 8003248:	e02f      	b.n	80032aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_RCC_OscConfig+0x4fc>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fd74 	bl	8001d3c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe fd70 	bl	8001d3c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e020      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x498>
 8003276:	e018      	b.n	80032aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e013      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_OscConfig+0x4f4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	429a      	cmp	r2, r3
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
 80032bc:	42420060 	.word	0x42420060

080032c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0d0      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d910      	bls.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4965      	ldr	r1, [pc, #404]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b63      	ldr	r3, [pc, #396]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b8      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800331c:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800333e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b50      	ldr	r3, [pc, #320]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	494d      	ldr	r1, [pc, #308]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d040      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d115      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e073      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06b      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f023 0203 	bic.w	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4936      	ldr	r1, [pc, #216]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fe fcc4 	bl	8001d3c <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fe fcc0 	bl	8001d3c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e053      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 020c 	and.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1eb      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d210      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0207 	bic.w	r2, r3, #7
 80033f6:	4922      	ldr	r1, [pc, #136]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e032      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4916      	ldr	r1, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490e      	ldr	r1, [pc, #56]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f821 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003452:	4601      	mov	r1, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	5cd3      	ldrb	r3, [r2, r3]
 8003462:	fa21 f303 	lsr.w	r3, r1, r3
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x1cc>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x1d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fc22 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
 8003488:	08007228 	.word	0x08007228
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b490      	push	{r4, r7}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCC_GetSysClockFreq+0xb0>)
 800349c:	1d3c      	adds	r4, r7, #4
 800349e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x40>
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x46>
 80034d2:	e02d      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034d6:	623b      	str	r3, [r7, #32]
      break;
 80034d8:	e02d      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	0c9b      	lsrs	r3, r3, #18
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034e6:	4413      	add	r3, r2
 80034e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0c5b      	lsrs	r3, r3, #17
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003506:	4413      	add	r3, r2
 8003508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800350c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003512:	fb02 f203 	mul.w	r2, r2, r3
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	e004      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	623b      	str	r3, [r7, #32]
      break;
 800352e:	e002      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003532:	623b      	str	r3, [r7, #32]
      break;
 8003534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003536:	6a3b      	ldr	r3, [r7, #32]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bc90      	pop	{r4, r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	08007200 	.word	0x08007200
 8003548:	08007210 	.word	0x08007210
 800354c:	40021000 	.word	0x40021000
 8003550:	007a1200 	.word	0x007a1200
 8003554:	003d0900 	.word	0x003d0900

08003558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800355c:	4b02      	ldr	r3, [pc, #8]	; (8003568 <HAL_RCC_GetHCLKFreq+0x10>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	20000000 	.word	0x20000000

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003570:	f7ff fff2 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8003574:	4601      	mov	r1, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4a03      	ldr	r2, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	08007238 	.word	0x08007238

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003598:	f7ff ffde 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 800359c:	4601      	mov	r1, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0adb      	lsrs	r3, r3, #11
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08007238 	.word	0x08007238

080035bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <RCC_Delay+0x34>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <RCC_Delay+0x38>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d8:	bf00      	nop
  }
  while (Delay --);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e5a      	subs	r2, r3, #1
 80035de:	60fa      	str	r2, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f9      	bne.n	80035d8 <RCC_Delay+0x1c>
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d07d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003618:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	61d3      	str	r3, [r2, #28]
 8003630:	4b49      	ldr	r3, [pc, #292]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a42      	ldr	r2, [pc, #264]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fe fb70 	bl	8001d3c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fe fb6c 	bl	8001d3c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e06d      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367e:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d027      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe fb3b 	bl	8001d3c <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fb37 	bl	8001d3c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e036      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4917      	ldr	r1, [pc, #92]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	490b      	ldr	r1, [pc, #44]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
 8003760:	42420440 	.word	0x42420440

08003764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b08d      	sub	sp, #52	; 0x34
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800376e:	f107 040c 	add.w	r4, r7, #12
 8003772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d07f      	beq.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d002      	beq.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800379c:	2b01      	cmp	r3, #1
 800379e:	d048      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80037a0:	e08b      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037a8:	4b48      	ldr	r3, [pc, #288]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d07f      	beq.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	0c9b      	lsrs	r3, r3, #18
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037c0:	4413      	add	r3, r2
 80037c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037c6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d2:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0c5b      	lsrs	r3, r3, #17
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037e0:	4413      	add	r3, r2
 80037e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037f2:	4a37      	ldr	r2, [pc, #220]	; (80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003802:	e004      	b.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	4a33      	ldr	r2, [pc, #204]	; (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800380e:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381a:	d102      	bne.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003820:	e048      	b.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4a2c      	ldr	r2, [pc, #176]	; (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003830:	e040      	b.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	d108      	bne.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
 8003854:	e01f      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d109      	bne.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800386e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
 8003874:	e00f      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003880:	d11a      	bne.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d014      	beq.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800388e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003894:	e010      	b.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003896:	e00f      	b.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003898:	f7ff fe7c 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	0b9b      	lsrs	r3, r3, #14
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	3301      	adds	r3, #1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80038b8:	bf00      	nop
    }
  }
  return (frequency);
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3734      	adds	r7, #52	; 0x34
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}
 80038c4:	08007214 	.word	0x08007214
 80038c8:	08007224 	.word	0x08007224
 80038cc:	40021000 	.word	0x40021000
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	003d0900 	.word	0x003d0900
 80038d8:	aaaaaaab 	.word	0xaaaaaaab

080038dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e041      	b.n	8003972 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f839 	bl	800397a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f000 fa3e 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e041      	b.n	8003a22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd ff1e 	bl	80017f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f000 f9e6 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_TIM_PWM_Start+0x24>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e022      	b.n	8003a96 <HAL_TIM_PWM_Start+0x6a>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d109      	bne.n	8003a6a <HAL_TIM_PWM_Start+0x3e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e015      	b.n	8003a96 <HAL_TIM_PWM_Start+0x6a>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d109      	bne.n	8003a84 <HAL_TIM_PWM_Start+0x58>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e008      	b.n	8003a96 <HAL_TIM_PWM_Start+0x6a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e05e      	b.n	8003b5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0x82>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aac:	e013      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xaa>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Start+0x92>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003abc:	e00b      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xaa>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start+0xa2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	e003      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fb46 	bl	8004170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIM_PWM_Start+0x138>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d107      	bne.n	8003afe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_TIM_PWM_Start+0x138>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIM_PWM_Start+0xfa>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d009      	beq.n	8003b26 <HAL_TIM_PWM_Start+0xfa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <HAL_TIM_PWM_Start+0x13c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIM_PWM_Start+0xfa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <HAL_TIM_PWM_Start+0x140>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d111      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d010      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	e007      	b.n	8003b5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800

08003b70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e046      	b.n	8003c18 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d839      	bhi.n	8003c0c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bd5 	.word	0x08003bd5
 8003ba4:	08003c0d 	.word	0x08003c0d
 8003ba8:	08003c0d 	.word	0x08003c0d
 8003bac:	08003c0d 	.word	0x08003c0d
 8003bb0:	08003be3 	.word	0x08003be3
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	08003c0d 	.word	0x08003c0d
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003bf1 	.word	0x08003bf1
 8003bc4:	08003c0d 	.word	0x08003c0d
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003bff 	.word	0x08003bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f940 	bl	8003e60 <TIM_OC1_SetConfig>
      break;
 8003be0:	e015      	b.n	8003c0e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f99f 	bl	8003f2c <TIM_OC2_SetConfig>
      break;
 8003bee:	e00e      	b.n	8003c0e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa02 	bl	8004000 <TIM_OC3_SetConfig>
      break;
 8003bfc:	e007      	b.n	8003c0e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fa65 	bl	80040d4 <TIM_OC4_SetConfig>
      break;
 8003c0a:	e000      	b.n	8003c0e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0ac      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	f200 809f 	bhi.w	8003d88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003d89 	.word	0x08003d89
 8003c58:	08003d89 	.word	0x08003d89
 8003c5c:	08003d89 	.word	0x08003d89
 8003c60:	08003cc5 	.word	0x08003cc5
 8003c64:	08003d89 	.word	0x08003d89
 8003c68:	08003d89 	.word	0x08003d89
 8003c6c:	08003d89 	.word	0x08003d89
 8003c70:	08003d07 	.word	0x08003d07
 8003c74:	08003d89 	.word	0x08003d89
 8003c78:	08003d89 	.word	0x08003d89
 8003c7c:	08003d89 	.word	0x08003d89
 8003c80:	08003d47 	.word	0x08003d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f8e8 	bl	8003e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6999      	ldr	r1, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	619a      	str	r2, [r3, #24]
      break;
 8003cc2:	e062      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f92e 	bl	8003f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
      break;
 8003d04:	e041      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f977 	bl	8004000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0208 	orr.w	r2, r2, #8
 8003d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0204 	bic.w	r2, r2, #4
 8003d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
      break;
 8003d44:	e021      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 f9c1 	bl	80040d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	021a      	lsls	r2, r3, #8
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	61da      	str	r2, [r3, #28]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <TIM_Base_SetConfig+0xb8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00b      	beq.n	8003dcc <TIM_Base_SetConfig+0x30>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d007      	beq.n	8003dcc <TIM_Base_SetConfig+0x30>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <TIM_Base_SetConfig+0xbc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0x30>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <TIM_Base_SetConfig+0xc0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d108      	bne.n	8003dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <TIM_Base_SetConfig+0xb8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0x62>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0x62>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <TIM_Base_SetConfig+0xbc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0x62>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <TIM_Base_SetConfig+0xc0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <TIM_Base_SetConfig+0xb8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800

08003e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0302 	bic.w	r3, r3, #2
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <TIM_OC1_SetConfig+0xc8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d10c      	bne.n	8003ed6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0308 	bic.w	r3, r3, #8
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <TIM_OC1_SetConfig+0xc8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d111      	bne.n	8003f02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	621a      	str	r2, [r3, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40012c00 	.word	0x40012c00

08003f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0210 	bic.w	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0320 	bic.w	r3, r3, #32
 8003f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <TIM_OC2_SetConfig+0xd0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10d      	bne.n	8003fa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <TIM_OC2_SetConfig+0xd0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d113      	bne.n	8003fd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00

08004000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <TIM_OC3_SetConfig+0xd0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10d      	bne.n	800407a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <TIM_OC3_SetConfig+0xd0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d113      	bne.n	80040aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40012c00 	.word	0x40012c00

080040d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800411e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	031b      	lsls	r3, r3, #12
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a0f      	ldr	r2, [pc, #60]	; (800416c <TIM_OC4_SetConfig+0x98>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d109      	bne.n	8004148 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800413a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	019b      	lsls	r3, r3, #6
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	40012c00 	.word	0x40012c00

08004170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2201      	movs	r2, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e046      	b.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d009      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800

08004274 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800428c:	2302      	movs	r3, #2
 800428e:	e03d      	b.n	800430c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e03f      	b.n	80043a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fd fb0b 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2224      	movs	r2, #36	; 0x24
 8004346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004358:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fbe2 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800436e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800437e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800438e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d166      	bne.n	8004498 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_UART_Receive_DMA+0x26>
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e05f      	b.n	800449a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Receive_DMA+0x38>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e058      	b.n	800449a <HAL_UART_Receive_DMA+0xea>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2222      	movs	r2, #34	; 0x22
 8004406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <HAL_UART_Receive_DMA+0xf4>)
 8004410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <HAL_UART_Receive_DMA+0xf8>)
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_UART_Receive_DMA+0xfc>)
 8004420:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	2200      	movs	r2, #0
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	f7fe f907 	bl	8002654 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004472:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004492:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	080047b1 	.word	0x080047b1
 80044a8:	08004819 	.word	0x08004819
 80044ac:	08004835 	.word	0x08004835

080044b0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b21      	cmp	r3, #33	; 0x21
 80044dc:	d116      	bne.n	800450c <HAL_UART_DMAStop+0x5c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe f906 	bl	8002712 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9de 	bl	80048c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b22      	cmp	r3, #34	; 0x22
 800452c:	d116      	bne.n	800455c <HAL_UART_DMAStop+0xac>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004542:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe f8de 	bl	8002712 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9cb 	bl	80048f2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_UART_IRQHandler+0x52>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa35 	bl	8004a22 <UART_Receive_IT>
      return;
 80045b8:	e0d1      	b.n	800475e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80b0 	beq.w	8004722 <HAL_UART_IRQHandler+0x1ba>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_UART_IRQHandler+0x70>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80a5 	beq.w	8004722 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_UART_IRQHandler+0x90>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_UART_IRQHandler+0xb0>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	f043 0202 	orr.w	r2, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_UART_IRQHandler+0xd0>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	f043 0204 	orr.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00f      	beq.n	8004662 <HAL_UART_IRQHandler+0xfa>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <HAL_UART_IRQHandler+0xee>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	f043 0208 	orr.w	r2, r3, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d078      	beq.n	800475c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_UART_IRQHandler+0x11c>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9cf 	bl	8004a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_UART_IRQHandler+0x144>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d031      	beq.n	8004710 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f920 	bl	80048f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d023      	beq.n	8004708 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <HAL_UART_IRQHandler+0x1fc>)
 80046de:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f84f 	bl	8002788 <HAL_DMA_Abort_IT>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d016      	beq.n	800471e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046fa:	4610      	mov	r0, r2
 80046fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fe:	e00e      	b.n	800471e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f84c 	bl	800479e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004706:	e00a      	b.n	800471e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f848 	bl	800479e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470e:	e006      	b.n	800471e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f844 	bl	800479e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800471c:	e01e      	b.n	800475c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471e:	bf00      	nop
    return;
 8004720:	e01c      	b.n	800475c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x1d6>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f90c 	bl	8004954 <UART_Transmit_IT>
    return;
 800473c:	e00f      	b.n	800475e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_UART_IRQHandler+0x1f6>
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f94d 	bl	80049f2 <UART_EndTransmit_IT>
    return;
 8004758:	bf00      	nop
 800475a:	e000      	b.n	800475e <HAL_UART_IRQHandler+0x1f6>
    return;
 800475c:	bf00      	nop
  }
}
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	0800492d 	.word	0x0800492d

08004768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11e      	bne.n	800480a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004800:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ffb5 	bl	800477a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff ffb0 	bl	800478c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b21      	cmp	r3, #33	; 0x21
 8004866:	d108      	bne.n	800487a <UART_DMAError+0x46>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004874:	68b8      	ldr	r0, [r7, #8]
 8004876:	f000 f827 	bl	80048c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b22      	cmp	r3, #34	; 0x22
 800489a:	d108      	bne.n	80048ae <UART_DMAError+0x7a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f000 f822 	bl	80048f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ba:	68b8      	ldr	r0, [r7, #8]
 80048bc:	f7ff ff6f 	bl	800479e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004908:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff ff29 	bl	800479e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b21      	cmp	r3, #33	; 0x21
 8004966:	d13e      	bne.n	80049e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d114      	bne.n	800499c <UART_Transmit_IT+0x48>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	621a      	str	r2, [r3, #32]
 800499a:	e008      	b.n	80049ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6211      	str	r1, [r2, #32]
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4619      	mov	r1, r3
 80049bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fea8 	bl	8004768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b22      	cmp	r3, #34	; 0x22
 8004a34:	d170      	bne.n	8004b18 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	d117      	bne.n	8004a70 <UART_Receive_IT+0x4e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d113      	bne.n	8004a70 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	1c9a      	adds	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004a6e:	e026      	b.n	8004abe <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	d007      	beq.n	8004a94 <UART_Receive_IT+0x72>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <UART_Receive_IT+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e008      	b.n	8004ab4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d120      	bne.n	8004b14 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0220 	bic.w	r2, r2, #32
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fe35 	bl	800477a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e002      	b.n	8004b1a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b5e:	f023 030c 	bic.w	r3, r3, #12
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <UART_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe fd02 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	e002      	b.n	8004b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe fcea 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8004b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <UART_SetConfig+0x118>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	0119      	lsls	r1, r3, #4
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <UART_SetConfig+0x118>)
 8004bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2064      	movs	r0, #100	; 0x64
 8004bda:	fb00 f303 	mul.w	r3, r0, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <UART_SetConfig+0x118>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	4419      	add	r1, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <UART_SetConfig+0x118>)
 8004c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2064      	movs	r0, #100	; 0x64
 8004c12:	fb00 f303 	mul.w	r3, r0, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <UART_SetConfig+0x118>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	51eb851f 	.word	0x51eb851f

08004c40 <_ZN3CarC1EP17TIM_HandleTypeDefS1_P20__UART_HandleTypeDefP19__ADC_HandleTypeDef>:
#include "car.h"

Car::Car(TIM_HandleTypeDef *servo_pwm_htim_, TIM_HandleTypeDef *motor_pwm_htim_,
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
		UART_HandleTypeDef *connect_huart, ADC_HandleTypeDef *sensor_hadc) {
	servo = new Servo(servo_pwm_htim_);
 8004c4e:	2034      	movs	r0, #52	; 0x34
 8004c50:	f000 fc70 	bl	8005534 <_Znwj>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461c      	mov	r4, r3
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f000 fbd0 	bl	8005400 <_ZN5ServoC1EP17TIM_HandleTypeDef>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	601c      	str	r4, [r3, #0]
	motor = new Motor(motor_pwm_htim_);
 8004c64:	2028      	movs	r0, #40	; 0x28
 8004c66:	f000 fc65 	bl	8005534 <_Znwj>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461c      	mov	r4, r3
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4620      	mov	r0, r4
 8004c72:	f000 f9b5 	bl	8004fe0 <_ZN5MotorC1EP17TIM_HandleTypeDef>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605c      	str	r4, [r3, #4]
	connect = new Connect(connect_huart);
 8004c7a:	203c      	movs	r0, #60	; 0x3c
 8004c7c:	f000 fc5a 	bl	8005534 <_Znwj>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461c      	mov	r4, r3
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 f8fc 	bl	8004e84 <_ZN7ConnectC1EP20__UART_HandleTypeDef>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	609c      	str	r4, [r3, #8]
	sensor = new Sensor(sensor_hadc);
 8004c90:	2018      	movs	r0, #24
 8004c92:	f000 fc4f 	bl	8005534 <_Znwj>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461c      	mov	r4, r3
 8004c9a:	6a39      	ldr	r1, [r7, #32]
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 fb51 	bl	8005344 <_ZN6SensorC1EP19__ADC_HandleTypeDef>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60dc      	str	r4, [r3, #12]
}
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}

08004cb0 <_ZN3Car14handle_rx_idleEP20__UART_HandleTypeDef>:

void Car::handle_rx_idle(UART_HandleTypeDef *huart) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	if (huart == connect->connect_huart) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d104      	bne.n	8004cd0 <_ZN3Car14handle_rx_idleEP20__UART_HandleTypeDef+0x20>
		connect->handle_rx_idle();
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f94a 	bl	8004f64 <_ZN7Connect14handle_rx_idleEv>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <_ZN3Car5startEv>:

void Car::start() {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	servo->start();
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
	motor->start();
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4798      	blx	r3
	connect->start();
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4798      	blx	r3
	sensor->start();
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4798      	blx	r3

	motor->set_control_speed_norm(0);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f9ed 	bl	8005108 <_ZN5Motor22set_control_speed_normEf>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <_ZN3Car6updateEv>:
	servo->test_deg();
//	motor->test_pid();
//	sensor->test();
}

void Car::update() {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	6078      	str	r0, [r7, #4]
	if (connect->was_control_received) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d02e      	beq.n	8004daa <_ZN3Car6updateEv+0x72>
		float control_angle_deg = a_to_b(connect->control_angle,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb ff52 	bl	8000bfc <__aeabi_i2f>
		CONN_MAX_CTRL_VALUE, CONN_MIN_CTRL_VALUE, SERVO_MAX_ANGLE_DEG,
		SERVO_MIN_ANGLE_DEG);
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <_ZN3Car6updateEv+0x8c>)
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <_ZN3Car6updateEv+0x90>)
 8004d62:	491a      	ldr	r1, [pc, #104]	; (8004dcc <_ZN3Car6updateEv+0x94>)
 8004d64:	f000 f836 	bl	8004dd4 <_Z6a_to_bfffff>
 8004d68:	60f8      	str	r0, [r7, #12]
		float control_speed_norm = a_to_b(connect->control_speed,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb ff43 	bl	8000bfc <__aeabi_i2f>
		CONN_MAX_CTRL_VALUE, CONN_MIN_CTRL_VALUE, 1, -1);
 8004d76:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <_ZN3Car6updateEv+0x98>)
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <_ZN3Car6updateEv+0x90>)
 8004d80:	4912      	ldr	r1, [pc, #72]	; (8004dcc <_ZN3Car6updateEv+0x94>)
 8004d82:	f000 f827 	bl	8004dd4 <_Z6a_to_bfffff>
 8004d86:	60b8      	str	r0, [r7, #8]
		servo->set_angle_deg(control_angle_deg);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fb84 	bl	800549c <_ZN5Servo13set_angle_degEf>
		motor->set_control_speed_norm(control_speed_norm);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f9b4 	bl	8005108 <_ZN5Motor22set_control_speed_normEf>
		connect->was_control_received = false;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
//		servo->set_angle_deg(60);
//	} else {
//		servo->set_angle_deg(90);
//	}

	motor->update();
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3304      	adds	r3, #4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4610      	mov	r0, r2
 8004dba:	4798      	blx	r3
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	43340000 	.word	0x43340000
 8004dc8:	42c80000 	.word	0x42c80000
 8004dcc:	43960000 	.word	0x43960000
 8004dd0:	bf800000 	.word	0xbf800000

08004dd4 <_Z6a_to_bfffff>:
#include "common.h"

float a_to_b(float a, float a_max, float a_min, float b_max, float b_min) {
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	if (a > a_max) {
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7fc f919 	bl	800101c <__aeabi_fcmpgt>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <_Z6a_to_bfffff+0x20>
		a = a_max;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	60fb      	str	r3, [r7, #12]
	}
	if (a < a_min) {
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7fc f8f2 	bl	8000fe0 <__aeabi_fcmplt>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <_Z6a_to_bfffff+0x32>
		a = a_min;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
	}
	float res = ((a - a_min) * (b_max - b_min)) / (a_max - a_min) + b_min;
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7fb fe41 	bl	8000a90 <__aeabi_fsub>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461c      	mov	r4, r3
 8004e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f7fb fe3b 	bl	8000a90 <__aeabi_fsub>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7fb ff40 	bl	8000ca4 <__aeabi_fmul>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461c      	mov	r4, r3
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f7fb fe30 	bl	8000a90 <__aeabi_fsub>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4619      	mov	r1, r3
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7fb ffe9 	bl	8000e0c <__aeabi_fdiv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e40:	f7fb fe28 	bl	8000a94 <__addsf3>
 8004e44:	4603      	mov	r3, r0
 8004e46:	617b      	str	r3, [r7, #20]
	return res;
 8004e48:	697b      	ldr	r3, [r7, #20]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}
	...

08004e54 <_ZN6ModuleC1Em>:
class Module {
protected:
	uint32_t prev_update_time;
	uint32_t now;
	uint32_t update_period;
	Module(uint32_t update_period_) :
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
			update_period(update_period_) {
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <_ZN6ModuleC1Em+0x2c>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	60da      	str	r2, [r3, #12]
		prev_update_time = HAL_GetTick();
 8004e6a:	f7fc ff67 	bl	8001d3c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	605a      	str	r2, [r3, #4]
	}
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	08007258 	.word	0x08007258

08004e84 <_ZN7ConnectC1EP20__UART_HandleTypeDef>:
#include <stdio.h>
#include <string.h>

static uint8_t buffer[32];

Connect::Connect(UART_HandleTypeDef *connect_huart_) :
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
		Module(0), connect_huart(connect_huart_), min_control_speed(
		CONN_MIN_CTRL_SPEED), max_control_speed(CONN_MAX_CTRL_SPEED), min_control_angle(
		CONN_MIN_CTRL_ANGLE), max_control_angle(CONN_MAX_CTRL_ANGLE) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff ffde 	bl	8004e54 <_ZN6ModuleC1Em>
 8004e98:	4a0e      	ldr	r2, [pc, #56]	; (8004ed4 <_ZN7ConnectC1EP20__UART_HandleTypeDef+0x50>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2264      	movs	r2, #100	; 0x64
 8004ea2:	611a      	str	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eaa:	615a      	str	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2264      	movs	r2, #100	; 0x64
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eb8:	61da      	str	r2, [r3, #28]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08007248 	.word	0x08007248

08004ed8 <_ZN7Connect8start_rxEv>:

void Connect::start_rx() {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(connect_huart);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_ENABLE_IT(connect_huart, UART_IT_IDLE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0210 	orr.w	r2, r2, #16
 8004f0c:	60da      	str	r2, [r3, #12]
	if (HAL_UART_Receive_DMA(connect_huart, buffer, sizeof(buffer)) != HAL_OK) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	2220      	movs	r2, #32
 8004f14:	4904      	ldr	r1, [pc, #16]	; (8004f28 <_ZN7Connect8start_rxEv+0x50>)
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fa4a 	bl	80043b0 <HAL_UART_Receive_DMA>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
		// error
	}
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000204 	.word	0x20000204

08004f2c <_ZN7Connect5startEv>:

void Connect::start() {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, sizeof(buffer));
 8004f34:	2220      	movs	r2, #32
 8004f36:	2100      	movs	r1, #0
 8004f38:	4804      	ldr	r0, [pc, #16]	; (8004f4c <_ZN7Connect5startEv+0x20>)
 8004f3a:	f000 fb63 	bl	8005604 <memset>
	start_rx();
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ffca 	bl	8004ed8 <_ZN7Connect8start_rxEv>
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000204 	.word	0x20000204

08004f50 <_ZN7Connect6updateEv>:

void Connect::update() {
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
	...

08004f64 <_ZN7Connect14handle_rx_idleEv>:

void Connect::handle_rx_idle() {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(connect_huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fa9d 	bl	80044b0 <HAL_UART_DMAStop>
	int rcvdCount = sizeof(buffer) - connect_huart->hdmarx->Instance->CNDTR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f1c3 0320 	rsb	r3, r3, #32
 8004f84:	60fb      	str	r3, [r7, #12]

	if (rcvdCount == 8) {
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d11e      	bne.n	8004fca <_ZN7Connect14handle_rx_idleEv+0x66>
		int control = atoi((char*) &(buffer[1]));
 8004f8c:	4812      	ldr	r0, [pc, #72]	; (8004fd8 <_ZN7Connect14handle_rx_idleEv+0x74>)
 8004f8e:	f000 fb03 	bl	8005598 <atoi>
 8004f92:	60b8      	str	r0, [r7, #8]
		control_speed = control % 1000;
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <_ZN7Connect14handle_rx_idleEv+0x78>)
 8004f98:	fb83 1302 	smull	r1, r3, r3, r2
 8004f9c:	1199      	asrs	r1, r3, #6
 8004f9e:	17d3      	asrs	r3, r2, #31
 8004fa0:	1acb      	subs	r3, r1, r3
 8004fa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fa6:	fb01 f303 	mul.w	r3, r1, r3
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6353      	str	r3, [r2, #52]	; 0x34
		control_angle = control / 1000;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <_ZN7Connect14handle_rx_idleEv+0x78>)
 8004fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8004fb8:	1192      	asrs	r2, r2, #6
 8004fba:	17db      	asrs	r3, r3, #31
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
		was_control_received = true;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}

	start_rx();
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff84 	bl	8004ed8 <_ZN7Connect8start_rxEv>

}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000205 	.word	0x20000205
 8004fdc:	10624dd3 	.word	0x10624dd3

08004fe0 <_ZN5MotorC1EP17TIM_HandleTypeDef>:
#include "motor.h"
#include "common.h"

Motor::Motor(TIM_HandleTypeDef *pwmHtim_) :
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
		Module(MOTOR_UPDATE_PERIOD), pwmHtim(pwmHtim_), current_speed_norm(0.0), control_speed_norm(
				0.0), max_speed_pulse(
		MOTOR_MAX_PULSE), min_speed_pulse(MOTOR_MIN_PULSE) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	210a      	movs	r1, #10
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff30 	bl	8004e54 <_ZN6ModuleC1Em>
 8004ff4:	4a11      	ldr	r2, [pc, #68]	; (800503c <_ZN5MotorC1EP17TIM_HandleTypeDef+0x5c>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	615a      	str	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	619a      	str	r2, [r3, #24]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	61da      	str	r2, [r3, #28]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a09      	ldr	r2, [pc, #36]	; (8005040 <_ZN5MotorC1EP17TIM_HandleTypeDef+0x60>)
 800501c:	621a      	str	r2, [r3, #32]
	pid = new Pid();
 800501e:	200c      	movs	r0, #12
 8005020:	f000 fa88 	bl	8005534 <_Znwj>
 8005024:	4603      	mov	r3, r0
 8005026:	461c      	mov	r4, r3
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f975 	bl	8005318 <_ZN3PidC1Ev>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	625c      	str	r4, [r3, #36]	; 0x24
}
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	bd90      	pop	{r4, r7, pc}
 800503c:	08007268 	.word	0x08007268
 8005040:	44f9e000 	.word	0x44f9e000

08005044 <_ZN5Motor14set_speed_normEf>:

void Motor::set_speed_norm(float v_norm) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]

	if (v_norm > 0) {
 800504e:	f04f 0100 	mov.w	r1, #0
 8005052:	6838      	ldr	r0, [r7, #0]
 8005054:	f7fb ffe2 	bl	800101c <__aeabi_fcmpgt>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d027      	beq.n	80050ae <_ZN5Motor14set_speed_normEf+0x6a>

		int pulse = (int) a_to_b(v_norm, 1.0, 0.0, max_speed_pulse,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1a      	ldr	r2, [r3, #32]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005072:	6838      	ldr	r0, [r7, #0]
 8005074:	f7ff feae 	bl	8004dd4 <_Z6a_to_bfffff>
 8005078:	4603      	mov	r3, r0
				min_speed_pulse);
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb ffd8 	bl	8001030 <__aeabi_f2iz>
 8005080:	4603      	mov	r3, r0
 8005082:	60bb      	str	r3, [r7, #8]
		pwmHtim->Instance->CCR1 = pulse;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	635a      	str	r2, [r3, #52]	; 0x34
		pwmHtim->Instance->CCR2 = 0;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
		pwmHtim->Instance->CCR3 = pulse;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	63da      	str	r2, [r3, #60]	; 0x3c
		pwmHtim->Instance->CCR4 = 0;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
		pwmHtim->Instance->CCR1 = 0;
		pwmHtim->Instance->CCR2 = pulse;
		pwmHtim->Instance->CCR3 = 0;
		pwmHtim->Instance->CCR4 = pulse;
	}
}
 80050ac:	e028      	b.n	8005100 <_ZN5Motor14set_speed_normEf+0xbc>
		int pulse = (int) a_to_b(-v_norm, 1.0, 0.0, max_speed_pulse,
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f083 4000 	eor.w	r0, r3, #2147483648	; 0x80000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80050c8:	f7ff fe84 	bl	8004dd4 <_Z6a_to_bfffff>
 80050cc:	4603      	mov	r3, r0
				min_speed_pulse);
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fb ffae 	bl	8001030 <__aeabi_f2iz>
 80050d4:	4603      	mov	r3, r0
 80050d6:	60fb      	str	r3, [r7, #12]
		pwmHtim->Instance->CCR1 = 0;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
		pwmHtim->Instance->CCR2 = pulse;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
		pwmHtim->Instance->CCR3 = 0;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c
		pwmHtim->Instance->CCR4 = pulse;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <_ZN5Motor22set_control_speed_normEf>:

void Motor::set_control_speed_norm(float v_norm) {
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	control_speed_norm = v_norm;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	619a      	str	r2, [r3, #24]
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr
	...

08005124 <_ZN5Motor5startEv>:

void Motor::start() {
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fc7a 	bl	8003a2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2104      	movs	r1, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fc74 	bl	8003a2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2108      	movs	r1, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fc6e 	bl	8003a2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_4);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	210c      	movs	r1, #12
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe fc68 	bl	8003a2c <HAL_TIM_PWM_Start>
	stop();
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f84f 	bl	8005200 <_ZN5Motor4stopEv>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 8005162:	2201      	movs	r2, #1
 8005164:	2101      	movs	r1, #1
 8005166:	4803      	ldr	r0, [pc, #12]	; (8005174 <_ZN5Motor5startEv+0x50>)
 8005168:	f7fd fe12 	bl	8002d90 <HAL_GPIO_WritePin>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40010c00 	.word	0x40010c00

08005178 <_ZN5Motor6updateEv>:

void Motor::update() {
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	now = HAL_GetTick();
 8005180:	f7fc fddc 	bl	8001d3c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
	uint32_t dt = now - prev_update_time;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	60fb      	str	r3, [r7, #12]

	if (dt > update_period) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	429a      	cmp	r2, r3
 800519e:	d92b      	bls.n	80051f8 <_ZN5Motor6updateEv+0x80>
		float error = control_speed_norm - current_speed_norm;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f7fb fc70 	bl	8000a90 <__aeabi_fsub>
 80051b0:	4603      	mov	r3, r0
 80051b2:	60bb      	str	r3, [r7, #8]
		pid->update(error, dt);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7fb fd1b 	bl	8000bf4 <__aeabi_ui2f>
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 f83d 	bl	8005244 <_ZN3Pid6updateEff>
		current_speed_norm += pid->control;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f7fb fc5c 	bl	8000a94 <__addsf3>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	615a      	str	r2, [r3, #20]
		set_speed_norm(current_speed_norm);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff ff2a 	bl	8005044 <_ZN5Motor14set_speed_normEf>
		prev_update_time = now;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	605a      	str	r2, [r3, #4]
	}
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}

08005200 <_ZN5Motor4stopEv>:

void Motor::stop() {
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	pwmHtim->Instance->CCR1 = 0;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHtim->Instance->CCR2 = 0;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHtim->Instance->CCR3 = 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHtim->Instance->CCR4 = 0;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2200      	movs	r2, #0
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
	current_speed_norm = 0;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	615a      	str	r2, [r3, #20]
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
	...

08005244 <_ZN3Pid6updateEff>:
#include "pid.h"

void Pid::update(float error, float dt) {
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b08d      	sub	sp, #52	; 0x34
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	float p, i, d, pOut, iOut, dOut, controlOutput, de = 0;
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28

	p = error;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
	i = sumError + error * dt;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685c      	ldr	r4, [r3, #4]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	68b8      	ldr	r0, [r7, #8]
 8005262:	f7fb fd1f 	bl	8000ca4 <__aeabi_fmul>
 8005266:	4603      	mov	r3, r0
 8005268:	4619      	mov	r1, r3
 800526a:	4620      	mov	r0, r4
 800526c:	f7fb fc12 	bl	8000a94 <__addsf3>
 8005270:	4603      	mov	r3, r0
 8005272:	623b      	str	r3, [r7, #32]
	de = error - lastError;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4619      	mov	r1, r3
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	f7fb fc08 	bl	8000a90 <__aeabi_fsub>
 8005280:	4603      	mov	r3, r0
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28

	if (de == 0) {
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528a:	f7fb fe9f 	bl	8000fcc <__aeabi_fcmpeq>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <_ZN3Pid6updateEff+0x5e>
		d = error / dt;
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	68b8      	ldr	r0, [r7, #8]
 8005298:	f7fb fdb8 	bl	8000e0c <__aeabi_fdiv>
 800529c:	4603      	mov	r3, r0
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a0:	e00c      	b.n	80052bc <_ZN3Pid6updateEff+0x78>
	} else {
		d = (error - lastError) / dt;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4619      	mov	r1, r3
 80052a8:	68b8      	ldr	r0, [r7, #8]
 80052aa:	f7fb fbf1 	bl	8000a90 <__aeabi_fsub>
 80052ae:	4603      	mov	r3, r0
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fdaa 	bl	8000e0c <__aeabi_fdiv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	pOut = p * PID_KP;
 80052bc:	4915      	ldr	r1, [pc, #84]	; (8005314 <_ZN3Pid6updateEff+0xd0>)
 80052be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c0:	f7fb fcf0 	bl	8000ca4 <__aeabi_fmul>
 80052c4:	4603      	mov	r3, r0
 80052c6:	61fb      	str	r3, [r7, #28]
	iOut = i * PID_KI;
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	6a38      	ldr	r0, [r7, #32]
 80052ce:	f7fb fce9 	bl	8000ca4 <__aeabi_fmul>
 80052d2:	4603      	mov	r3, r0
 80052d4:	61bb      	str	r3, [r7, #24]
	dOut = d * PID_KD;
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052dc:	f7fb fce2 	bl	8000ca4 <__aeabi_fmul>
 80052e0:	4603      	mov	r3, r0
 80052e2:	617b      	str	r3, [r7, #20]

	controlOutput = pOut + iOut + dOut;
 80052e4:	69b9      	ldr	r1, [r7, #24]
 80052e6:	69f8      	ldr	r0, [r7, #28]
 80052e8:	f7fb fbd4 	bl	8000a94 <__addsf3>
 80052ec:	4603      	mov	r3, r0
 80052ee:	4619      	mov	r1, r3
 80052f0:	6978      	ldr	r0, [r7, #20]
 80052f2:	f7fb fbcf 	bl	8000a94 <__addsf3>
 80052f6:	4603      	mov	r3, r0
 80052f8:	613b      	str	r3, [r7, #16]

	sumError = i;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	605a      	str	r2, [r3, #4]
	lastError = error;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	601a      	str	r2, [r3, #0]
	control = controlOutput;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	3734      	adds	r7, #52	; 0x34
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}
 8005314:	3e99999a 	.word	0x3e99999a

08005318 <_ZN3PidC1Ev>:

Pid::Pid() :
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
		lastError(0), sumError(0), control(0) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <_ZN6SensorC1EP19__ADC_HandleTypeDef>:
#include "sensor.h"

uint32_t adcValues[2];

Sensor::Sensor(ADC_HandleTypeDef *hadc_) :
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
		Module(0), hadc(hadc_) {
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fd7e 	bl	8004e54 <_ZN6ModuleC1Em>
 8005358:	4a05      	ldr	r2, [pc, #20]	; (8005370 <_ZN6SensorC1EP19__ADC_HandleTypeDef+0x2c>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	611a      	str	r2, [r3, #16]
}
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	08007278 	.word	0x08007278

08005374 <_ZN6Sensor5startEv>:

void Sensor::start() {
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef adcStatus = HAL_ADCEx_Calibration_Start(hadc);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	4618      	mov	r0, r3
 8005382:	f7fc ff63 	bl	800224c <HAL_ADCEx_Calibration_Start>
 8005386:	4603      	mov	r3, r0
 8005388:	73fb      	strb	r3, [r7, #15]
	if (adcStatus != HAL_OK) {
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <_ZN6Sensor5startEv+0x20>
		Error_Handler();
 8005390:	f7fc f946 	bl	8001620 <Error_Handler>
	}

}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <_ZN6Sensor6updateEv>:
	is_line_left = adcValues[0] > SENSOR_EDGE_VALUE;
	is_line_right = adcValues[1] < SENSOR_EDGE_VALUE;

}

void Sensor::update() {
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <_ZN5Servo12deg_to_pulseEf>:
#include "servo.h"

float Servo::deg_to_pulse(float v_deg) {
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af02      	add	r7, sp, #8
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
	return a_to_b(v_deg, max_angle_deg, min_angle_deg, max_angle_pulse,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a18      	ldr	r0, [r3, #32]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
			min_angle_pulse);
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	4603      	mov	r3, r0
 80053cc:	6838      	ldr	r0, [r7, #0]
 80053ce:	f7ff fd01 	bl	8004dd4 <_Z6a_to_bfffff>
 80053d2:	4603      	mov	r3, r0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZN5Servo9set_pulseEf>:
float Servo::pulse_to_deg(float v_pulse) {
	return a_to_b(v_pulse, max_angle_pulse, min_angle_pulse, max_angle_deg,
			min_angle_deg);
}

void Servo::set_pulse(float pulse) {
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	pwmHtim->Instance->CCR1 = pulse;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	681c      	ldr	r4, [r3, #0]
 80053ec:	6838      	ldr	r0, [r7, #0]
 80053ee:	f7fb fe45 	bl	800107c <__aeabi_f2uiz>
 80053f2:	4603      	mov	r3, r0
 80053f4:	6363      	str	r3, [r4, #52]	; 0x34
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}
	...

08005400 <_ZN5ServoC1EP17TIM_HandleTypeDef>:

Servo::Servo(TIM_HandleTypeDef *pwmHtim_) :
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
		Module(0), pwmHtim(pwmHtim_), min_angle_pulse(SERVO_MIN_ANGLE_PULSE), max_angle_pulse(
		SERVO_MAX_ANGLE_PULSE), min_angle_deg(SERVO_MIN_ANGLE_DEG), max_angle_deg(
		SERVO_MAX_ANGLE_DEG), stop_angle_deg(SERVO_STOP_ANGLE_DEG), min_angle_with_wheel_deg(
		SERVO_WITH_WHEEL_MIN_ANGLE_DEG), max_angle_with_wheel_deg(
		SERVO_WITH_WHEEL_MAX_ANGLE_DEG) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fd20 	bl	8004e54 <_ZN6ModuleC1Em>
 8005414:	4a10      	ldr	r2, [pc, #64]	; (8005458 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x58>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	611a      	str	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0e      	ldr	r2, [pc, #56]	; (800545c <_ZN5ServoC1EP17TIM_HandleTypeDef+0x5c>)
 8005424:	619a      	str	r2, [r3, #24]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x60>)
 800542a:	61da      	str	r2, [r3, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x64>)
 8005430:	621a      	str	r2, [r3, #32]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	625a      	str	r2, [r3, #36]	; 0x24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x68>)
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a0a      	ldr	r2, [pc, #40]	; (800546c <_ZN5ServoC1EP17TIM_HandleTypeDef+0x6c>)
 8005444:	62da      	str	r2, [r3, #44]	; 0x2c
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a09      	ldr	r2, [pc, #36]	; (8005470 <_ZN5ServoC1EP17TIM_HandleTypeDef+0x70>)
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	08007288 	.word	0x08007288
 800545c:	42b40000 	.word	0x42b40000
 8005460:	43fa0000 	.word	0x43fa0000
 8005464:	451c4000 	.word	0x451c4000
 8005468:	43340000 	.word	0x43340000
 800546c:	42340000 	.word	0x42340000
 8005470:	43070000 	.word	0x43070000

08005474 <_ZN5Servo5startEv>:

void Servo::start() {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pwmHtim, TIM_CHANNEL_1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fad2 	bl	8003a2c <HAL_TIM_PWM_Start>
	set_angle_deg(stop_angle_deg);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f804 	bl	800549c <_ZN5Servo13set_angle_degEf>
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <_ZN5Servo13set_angle_degEf>:
void Servo::set_angle_deg(float angle_deg) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	if (angle_deg < SERVO_CENTER_MAX_ANGLE_DEG
 80054a6:	491b      	ldr	r1, [pc, #108]	; (8005514 <_ZN5Servo13set_angle_degEf+0x78>)
 80054a8:	6838      	ldr	r0, [r7, #0]
 80054aa:	f7fb fd99 	bl	8000fe0 <__aeabi_fcmplt>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <_ZN5Servo13set_angle_degEf+0x2c>
			&& angle_deg > SERVO_CENTER_MIN_ANGLE_DEG) {
 80054b4:	4918      	ldr	r1, [pc, #96]	; (8005518 <_ZN5Servo13set_angle_degEf+0x7c>)
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f7fb fdb0 	bl	800101c <__aeabi_fcmpgt>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <_ZN5Servo13set_angle_degEf+0x2c>
		angle_deg = stop_angle_deg;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	603b      	str	r3, [r7, #0]
	}
	if (angle_deg > max_angle_with_wheel_deg) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	4619      	mov	r1, r3
 80054ce:	6838      	ldr	r0, [r7, #0]
 80054d0:	f7fb fda4 	bl	800101c <__aeabi_fcmpgt>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <_ZN5Servo13set_angle_degEf+0x44>
		angle_deg = max_angle_with_wheel_deg;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	603b      	str	r3, [r7, #0]
	}
	if (angle_deg < min_angle_with_wheel_deg) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4619      	mov	r1, r3
 80054e6:	6838      	ldr	r0, [r7, #0]
 80054e8:	f7fb fd7a 	bl	8000fe0 <__aeabi_fcmplt>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <_ZN5Servo13set_angle_degEf+0x5c>
		angle_deg = min_angle_with_wheel_deg;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	603b      	str	r3, [r7, #0]
	}
	set_pulse(deg_to_pulse(angle_deg));
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff57 	bl	80053ae <_ZN5Servo12deg_to_pulseEf>
 8005500:	4603      	mov	r3, r0
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ff69 	bl	80053dc <_ZN5Servo9set_pulseEf>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	42dc0000 	.word	0x42dc0000
 8005518:	428c0000 	.word	0x428c0000

0800551c <_ZN5Servo6updateEv>:

void Servo::update() {
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <__cxa_pure_virtual>:
 800552e:	b508      	push	{r3, lr}
 8005530:	f000 f826 	bl	8005580 <_ZSt9terminatev>

08005534 <_Znwj>:
 8005534:	b510      	push	{r4, lr}
 8005536:	2800      	cmp	r0, #0
 8005538:	bf14      	ite	ne
 800553a:	4604      	movne	r4, r0
 800553c:	2401      	moveq	r4, #1
 800553e:	4620      	mov	r0, r4
 8005540:	f000 f858 	bl	80055f4 <malloc>
 8005544:	b930      	cbnz	r0, 8005554 <_Znwj+0x20>
 8005546:	f000 f807 	bl	8005558 <_ZSt15get_new_handlerv>
 800554a:	b908      	cbnz	r0, 8005550 <_Znwj+0x1c>
 800554c:	f000 f81d 	bl	800558a <abort>
 8005550:	4780      	blx	r0
 8005552:	e7f4      	b.n	800553e <_Znwj+0xa>
 8005554:	bd10      	pop	{r4, pc}
	...

08005558 <_ZSt15get_new_handlerv>:
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <_ZSt15get_new_handlerv+0xc>)
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	f3bf 8f5b 	dmb	ish
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000224 	.word	0x20000224

08005568 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005568:	b508      	push	{r3, lr}
 800556a:	4780      	blx	r0
 800556c:	f000 f80d 	bl	800558a <abort>

08005570 <_ZSt13get_terminatev>:
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <_ZSt13get_terminatev+0xc>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	f3bf 8f5b 	dmb	ish
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	2000000c 	.word	0x2000000c

08005580 <_ZSt9terminatev>:
 8005580:	b508      	push	{r3, lr}
 8005582:	f7ff fff5 	bl	8005570 <_ZSt13get_terminatev>
 8005586:	f7ff ffef 	bl	8005568 <_ZN10__cxxabiv111__terminateEPFvvE>

0800558a <abort>:
 800558a:	b508      	push	{r3, lr}
 800558c:	2006      	movs	r0, #6
 800558e:	f000 fc11 	bl	8005db4 <raise>
 8005592:	2001      	movs	r0, #1
 8005594:	f7fc fb0d 	bl	8001bb2 <_exit>

08005598 <atoi>:
 8005598:	220a      	movs	r2, #10
 800559a:	2100      	movs	r1, #0
 800559c:	f000 bca2 	b.w	8005ee4 <strtol>

080055a0 <__errno>:
 80055a0:	4b01      	ldr	r3, [pc, #4]	; (80055a8 <__errno+0x8>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000010 	.word	0x20000010

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	2500      	movs	r5, #0
 80055b0:	4e0c      	ldr	r6, [pc, #48]	; (80055e4 <__libc_init_array+0x38>)
 80055b2:	4c0d      	ldr	r4, [pc, #52]	; (80055e8 <__libc_init_array+0x3c>)
 80055b4:	1ba4      	subs	r4, r4, r6
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	42a5      	cmp	r5, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	f001 fe14 	bl	80071e8 <_init>
 80055c0:	2500      	movs	r5, #0
 80055c2:	4e0a      	ldr	r6, [pc, #40]	; (80055ec <__libc_init_array+0x40>)
 80055c4:	4c0a      	ldr	r4, [pc, #40]	; (80055f0 <__libc_init_array+0x44>)
 80055c6:	1ba4      	subs	r4, r4, r6
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	42a5      	cmp	r5, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055d4:	4798      	blx	r3
 80055d6:	3501      	adds	r5, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055de:	4798      	blx	r3
 80055e0:	3501      	adds	r5, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	08007520 	.word	0x08007520
 80055e8:	08007520 	.word	0x08007520
 80055ec:	08007520 	.word	0x08007520
 80055f0:	08007524 	.word	0x08007524

080055f4 <malloc>:
 80055f4:	4b02      	ldr	r3, [pc, #8]	; (8005600 <malloc+0xc>)
 80055f6:	4601      	mov	r1, r0
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	f000 b80b 	b.w	8005614 <_malloc_r>
 80055fe:	bf00      	nop
 8005600:	20000010 	.word	0x20000010

08005604 <memset>:
 8005604:	4603      	mov	r3, r0
 8005606:	4402      	add	r2, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <_malloc_r>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	1ccd      	adds	r5, r1, #3
 8005618:	f025 0503 	bic.w	r5, r5, #3
 800561c:	3508      	adds	r5, #8
 800561e:	2d0c      	cmp	r5, #12
 8005620:	bf38      	it	cc
 8005622:	250c      	movcc	r5, #12
 8005624:	2d00      	cmp	r5, #0
 8005626:	4606      	mov	r6, r0
 8005628:	db01      	blt.n	800562e <_malloc_r+0x1a>
 800562a:	42a9      	cmp	r1, r5
 800562c:	d903      	bls.n	8005636 <_malloc_r+0x22>
 800562e:	230c      	movs	r3, #12
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	2000      	movs	r0, #0
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	f001 fade 	bl	8006bf6 <__malloc_lock>
 800563a:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <_malloc_r+0xac>)
 800563c:	6814      	ldr	r4, [r2, #0]
 800563e:	4621      	mov	r1, r4
 8005640:	b991      	cbnz	r1, 8005668 <_malloc_r+0x54>
 8005642:	4c20      	ldr	r4, [pc, #128]	; (80056c4 <_malloc_r+0xb0>)
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	b91b      	cbnz	r3, 8005650 <_malloc_r+0x3c>
 8005648:	4630      	mov	r0, r6
 800564a:	f000 fb7b 	bl	8005d44 <_sbrk_r>
 800564e:	6020      	str	r0, [r4, #0]
 8005650:	4629      	mov	r1, r5
 8005652:	4630      	mov	r0, r6
 8005654:	f000 fb76 	bl	8005d44 <_sbrk_r>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d124      	bne.n	80056a6 <_malloc_r+0x92>
 800565c:	230c      	movs	r3, #12
 800565e:	4630      	mov	r0, r6
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	f001 fac9 	bl	8006bf8 <__malloc_unlock>
 8005666:	e7e4      	b.n	8005632 <_malloc_r+0x1e>
 8005668:	680b      	ldr	r3, [r1, #0]
 800566a:	1b5b      	subs	r3, r3, r5
 800566c:	d418      	bmi.n	80056a0 <_malloc_r+0x8c>
 800566e:	2b0b      	cmp	r3, #11
 8005670:	d90f      	bls.n	8005692 <_malloc_r+0x7e>
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	18cc      	adds	r4, r1, r3
 8005676:	50cd      	str	r5, [r1, r3]
 8005678:	4630      	mov	r0, r6
 800567a:	f001 fabd 	bl	8006bf8 <__malloc_unlock>
 800567e:	f104 000b 	add.w	r0, r4, #11
 8005682:	1d23      	adds	r3, r4, #4
 8005684:	f020 0007 	bic.w	r0, r0, #7
 8005688:	1ac3      	subs	r3, r0, r3
 800568a:	d0d3      	beq.n	8005634 <_malloc_r+0x20>
 800568c:	425a      	negs	r2, r3
 800568e:	50e2      	str	r2, [r4, r3]
 8005690:	e7d0      	b.n	8005634 <_malloc_r+0x20>
 8005692:	684b      	ldr	r3, [r1, #4]
 8005694:	428c      	cmp	r4, r1
 8005696:	bf16      	itet	ne
 8005698:	6063      	strne	r3, [r4, #4]
 800569a:	6013      	streq	r3, [r2, #0]
 800569c:	460c      	movne	r4, r1
 800569e:	e7eb      	b.n	8005678 <_malloc_r+0x64>
 80056a0:	460c      	mov	r4, r1
 80056a2:	6849      	ldr	r1, [r1, #4]
 80056a4:	e7cc      	b.n	8005640 <_malloc_r+0x2c>
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d005      	beq.n	80056bc <_malloc_r+0xa8>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 fb46 	bl	8005d44 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d0cf      	beq.n	800565c <_malloc_r+0x48>
 80056bc:	6025      	str	r5, [r4, #0]
 80056be:	e7db      	b.n	8005678 <_malloc_r+0x64>
 80056c0:	20000228 	.word	0x20000228
 80056c4:	2000022c 	.word	0x2000022c

080056c8 <__cvt>:
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ce:	461e      	mov	r6, r3
 80056d0:	bfbb      	ittet	lt
 80056d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056d6:	461e      	movlt	r6, r3
 80056d8:	2300      	movge	r3, #0
 80056da:	232d      	movlt	r3, #45	; 0x2d
 80056dc:	b088      	sub	sp, #32
 80056de:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80056e0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80056e4:	f027 0720 	bic.w	r7, r7, #32
 80056e8:	2f46      	cmp	r7, #70	; 0x46
 80056ea:	4614      	mov	r4, r2
 80056ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056ee:	700b      	strb	r3, [r1, #0]
 80056f0:	d004      	beq.n	80056fc <__cvt+0x34>
 80056f2:	2f45      	cmp	r7, #69	; 0x45
 80056f4:	d100      	bne.n	80056f8 <__cvt+0x30>
 80056f6:	3501      	adds	r5, #1
 80056f8:	2302      	movs	r3, #2
 80056fa:	e000      	b.n	80056fe <__cvt+0x36>
 80056fc:	2303      	movs	r3, #3
 80056fe:	aa07      	add	r2, sp, #28
 8005700:	9204      	str	r2, [sp, #16]
 8005702:	aa06      	add	r2, sp, #24
 8005704:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005708:	e9cd 3500 	strd	r3, r5, [sp]
 800570c:	4622      	mov	r2, r4
 800570e:	4633      	mov	r3, r6
 8005710:	f000 fc8e 	bl	8006030 <_dtoa_r>
 8005714:	2f47      	cmp	r7, #71	; 0x47
 8005716:	4680      	mov	r8, r0
 8005718:	d102      	bne.n	8005720 <__cvt+0x58>
 800571a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800571c:	07db      	lsls	r3, r3, #31
 800571e:	d526      	bpl.n	800576e <__cvt+0xa6>
 8005720:	2f46      	cmp	r7, #70	; 0x46
 8005722:	eb08 0905 	add.w	r9, r8, r5
 8005726:	d111      	bne.n	800574c <__cvt+0x84>
 8005728:	f898 3000 	ldrb.w	r3, [r8]
 800572c:	2b30      	cmp	r3, #48	; 0x30
 800572e:	d10a      	bne.n	8005746 <__cvt+0x7e>
 8005730:	2200      	movs	r2, #0
 8005732:	2300      	movs	r3, #0
 8005734:	4620      	mov	r0, r4
 8005736:	4631      	mov	r1, r6
 8005738:	f7fb f936 	bl	80009a8 <__aeabi_dcmpeq>
 800573c:	b918      	cbnz	r0, 8005746 <__cvt+0x7e>
 800573e:	f1c5 0501 	rsb	r5, r5, #1
 8005742:	f8ca 5000 	str.w	r5, [sl]
 8005746:	f8da 3000 	ldr.w	r3, [sl]
 800574a:	4499      	add	r9, r3
 800574c:	2200      	movs	r2, #0
 800574e:	2300      	movs	r3, #0
 8005750:	4620      	mov	r0, r4
 8005752:	4631      	mov	r1, r6
 8005754:	f7fb f928 	bl	80009a8 <__aeabi_dcmpeq>
 8005758:	b938      	cbnz	r0, 800576a <__cvt+0xa2>
 800575a:	2230      	movs	r2, #48	; 0x30
 800575c:	9b07      	ldr	r3, [sp, #28]
 800575e:	454b      	cmp	r3, r9
 8005760:	d205      	bcs.n	800576e <__cvt+0xa6>
 8005762:	1c59      	adds	r1, r3, #1
 8005764:	9107      	str	r1, [sp, #28]
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e7f8      	b.n	800575c <__cvt+0x94>
 800576a:	f8cd 901c 	str.w	r9, [sp, #28]
 800576e:	4640      	mov	r0, r8
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005774:	eba3 0308 	sub.w	r3, r3, r8
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	b008      	add	sp, #32
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005780 <__exponent>:
 8005780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	bfb4      	ite	lt
 8005786:	232d      	movlt	r3, #45	; 0x2d
 8005788:	232b      	movge	r3, #43	; 0x2b
 800578a:	4604      	mov	r4, r0
 800578c:	bfb8      	it	lt
 800578e:	4249      	neglt	r1, r1
 8005790:	2909      	cmp	r1, #9
 8005792:	f804 2b02 	strb.w	r2, [r4], #2
 8005796:	7043      	strb	r3, [r0, #1]
 8005798:	dd21      	ble.n	80057de <__exponent+0x5e>
 800579a:	f10d 0307 	add.w	r3, sp, #7
 800579e:	461f      	mov	r7, r3
 80057a0:	260a      	movs	r6, #10
 80057a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80057a6:	fb06 1115 	mls	r1, r6, r5, r1
 80057aa:	2d09      	cmp	r5, #9
 80057ac:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80057b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057b4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80057b8:	4629      	mov	r1, r5
 80057ba:	dc09      	bgt.n	80057d0 <__exponent+0x50>
 80057bc:	3130      	adds	r1, #48	; 0x30
 80057be:	3b02      	subs	r3, #2
 80057c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057c4:	42bb      	cmp	r3, r7
 80057c6:	4622      	mov	r2, r4
 80057c8:	d304      	bcc.n	80057d4 <__exponent+0x54>
 80057ca:	1a10      	subs	r0, r2, r0
 80057cc:	b003      	add	sp, #12
 80057ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d0:	4613      	mov	r3, r2
 80057d2:	e7e6      	b.n	80057a2 <__exponent+0x22>
 80057d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057d8:	f804 2b01 	strb.w	r2, [r4], #1
 80057dc:	e7f2      	b.n	80057c4 <__exponent+0x44>
 80057de:	2330      	movs	r3, #48	; 0x30
 80057e0:	4419      	add	r1, r3
 80057e2:	7083      	strb	r3, [r0, #2]
 80057e4:	1d02      	adds	r2, r0, #4
 80057e6:	70c1      	strb	r1, [r0, #3]
 80057e8:	e7ef      	b.n	80057ca <__exponent+0x4a>
	...

080057ec <_printf_float>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	b091      	sub	sp, #68	; 0x44
 80057f2:	460c      	mov	r4, r1
 80057f4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80057f6:	4693      	mov	fp, r2
 80057f8:	461e      	mov	r6, r3
 80057fa:	4605      	mov	r5, r0
 80057fc:	f001 f9d0 	bl	8006ba0 <_localeconv_r>
 8005800:	6803      	ldr	r3, [r0, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	9309      	str	r3, [sp, #36]	; 0x24
 8005806:	f7fa fca3 	bl	8000150 <strlen>
 800580a:	2300      	movs	r3, #0
 800580c:	930e      	str	r3, [sp, #56]	; 0x38
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	900a      	str	r0, [sp, #40]	; 0x28
 8005812:	3307      	adds	r3, #7
 8005814:	f023 0307 	bic.w	r3, r3, #7
 8005818:	f103 0208 	add.w	r2, r3, #8
 800581c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005820:	f8d4 a000 	ldr.w	sl, [r4]
 8005824:	603a      	str	r2, [r7, #0]
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800582e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005836:	930b      	str	r3, [sp, #44]	; 0x2c
 8005838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800583c:	4ba6      	ldr	r3, [pc, #664]	; (8005ad8 <_printf_float+0x2ec>)
 800583e:	4638      	mov	r0, r7
 8005840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005842:	f7fb f8e3 	bl	8000a0c <__aeabi_dcmpun>
 8005846:	bb68      	cbnz	r0, 80058a4 <_printf_float+0xb8>
 8005848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800584c:	4ba2      	ldr	r3, [pc, #648]	; (8005ad8 <_printf_float+0x2ec>)
 800584e:	4638      	mov	r0, r7
 8005850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005852:	f7fb f8bd 	bl	80009d0 <__aeabi_dcmple>
 8005856:	bb28      	cbnz	r0, 80058a4 <_printf_float+0xb8>
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	4638      	mov	r0, r7
 800585e:	4649      	mov	r1, r9
 8005860:	f7fb f8ac 	bl	80009bc <__aeabi_dcmplt>
 8005864:	b110      	cbz	r0, 800586c <_printf_float+0x80>
 8005866:	232d      	movs	r3, #45	; 0x2d
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	4f9b      	ldr	r7, [pc, #620]	; (8005adc <_printf_float+0x2f0>)
 800586e:	4b9c      	ldr	r3, [pc, #624]	; (8005ae0 <_printf_float+0x2f4>)
 8005870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005874:	bf98      	it	ls
 8005876:	461f      	movls	r7, r3
 8005878:	2303      	movs	r3, #3
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	f02a 0304 	bic.w	r3, sl, #4
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	9600      	str	r6, [sp, #0]
 8005888:	465b      	mov	r3, fp
 800588a:	aa0f      	add	r2, sp, #60	; 0x3c
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f9e2 	bl	8005c58 <_printf_common>
 8005894:	3001      	adds	r0, #1
 8005896:	f040 8090 	bne.w	80059ba <_printf_float+0x1ce>
 800589a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800589e:	b011      	add	sp, #68	; 0x44
 80058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a4:	463a      	mov	r2, r7
 80058a6:	464b      	mov	r3, r9
 80058a8:	4638      	mov	r0, r7
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fb f8ae 	bl	8000a0c <__aeabi_dcmpun>
 80058b0:	b110      	cbz	r0, 80058b8 <_printf_float+0xcc>
 80058b2:	4f8c      	ldr	r7, [pc, #560]	; (8005ae4 <_printf_float+0x2f8>)
 80058b4:	4b8c      	ldr	r3, [pc, #560]	; (8005ae8 <_printf_float+0x2fc>)
 80058b6:	e7db      	b.n	8005870 <_printf_float+0x84>
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	a80d      	add	r0, sp, #52	; 0x34
 80058c2:	a90e      	add	r1, sp, #56	; 0x38
 80058c4:	d140      	bne.n	8005948 <_printf_float+0x15c>
 80058c6:	2306      	movs	r3, #6
 80058c8:	6063      	str	r3, [r4, #4]
 80058ca:	f04f 0c00 	mov.w	ip, #0
 80058ce:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80058d2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	6022      	str	r2, [r4, #0]
 80058da:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	463a      	mov	r2, r7
 80058e2:	464b      	mov	r3, r9
 80058e4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7ff feed 	bl	80056c8 <__cvt>
 80058ee:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80058f2:	2b47      	cmp	r3, #71	; 0x47
 80058f4:	4607      	mov	r7, r0
 80058f6:	d109      	bne.n	800590c <_printf_float+0x120>
 80058f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058fa:	1cd8      	adds	r0, r3, #3
 80058fc:	db02      	blt.n	8005904 <_printf_float+0x118>
 80058fe:	6862      	ldr	r2, [r4, #4]
 8005900:	4293      	cmp	r3, r2
 8005902:	dd47      	ble.n	8005994 <_printf_float+0x1a8>
 8005904:	f1a8 0802 	sub.w	r8, r8, #2
 8005908:	fa5f f888 	uxtb.w	r8, r8
 800590c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005910:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005912:	d824      	bhi.n	800595e <_printf_float+0x172>
 8005914:	3901      	subs	r1, #1
 8005916:	4642      	mov	r2, r8
 8005918:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800591c:	910d      	str	r1, [sp, #52]	; 0x34
 800591e:	f7ff ff2f 	bl	8005780 <__exponent>
 8005922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005924:	4681      	mov	r9, r0
 8005926:	1813      	adds	r3, r2, r0
 8005928:	2a01      	cmp	r2, #1
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	dc02      	bgt.n	8005934 <_printf_float+0x148>
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	07d1      	lsls	r1, r2, #31
 8005932:	d501      	bpl.n	8005938 <_printf_float+0x14c>
 8005934:	3301      	adds	r3, #1
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0a2      	beq.n	8005886 <_printf_float+0x9a>
 8005940:	232d      	movs	r3, #45	; 0x2d
 8005942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005946:	e79e      	b.n	8005886 <_printf_float+0x9a>
 8005948:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800594c:	f000 816e 	beq.w	8005c2c <_printf_float+0x440>
 8005950:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005954:	d1b9      	bne.n	80058ca <_printf_float+0xde>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1b7      	bne.n	80058ca <_printf_float+0xde>
 800595a:	2301      	movs	r3, #1
 800595c:	e7b4      	b.n	80058c8 <_printf_float+0xdc>
 800595e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005962:	d119      	bne.n	8005998 <_printf_float+0x1ac>
 8005964:	2900      	cmp	r1, #0
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	dd0c      	ble.n	8005984 <_printf_float+0x198>
 800596a:	6121      	str	r1, [r4, #16]
 800596c:	b913      	cbnz	r3, 8005974 <_printf_float+0x188>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	07d2      	lsls	r2, r2, #31
 8005972:	d502      	bpl.n	800597a <_printf_float+0x18e>
 8005974:	3301      	adds	r3, #1
 8005976:	440b      	add	r3, r1
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800597c:	f04f 0900 	mov.w	r9, #0
 8005980:	65a3      	str	r3, [r4, #88]	; 0x58
 8005982:	e7d9      	b.n	8005938 <_printf_float+0x14c>
 8005984:	b913      	cbnz	r3, 800598c <_printf_float+0x1a0>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	07d0      	lsls	r0, r2, #31
 800598a:	d501      	bpl.n	8005990 <_printf_float+0x1a4>
 800598c:	3302      	adds	r3, #2
 800598e:	e7f3      	b.n	8005978 <_printf_float+0x18c>
 8005990:	2301      	movs	r3, #1
 8005992:	e7f1      	b.n	8005978 <_printf_float+0x18c>
 8005994:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005998:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800599c:	4293      	cmp	r3, r2
 800599e:	db05      	blt.n	80059ac <_printf_float+0x1c0>
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	07d1      	lsls	r1, r2, #31
 80059a6:	d5e8      	bpl.n	800597a <_printf_float+0x18e>
 80059a8:	3301      	adds	r3, #1
 80059aa:	e7e5      	b.n	8005978 <_printf_float+0x18c>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfcc      	ite	gt
 80059b0:	2301      	movgt	r3, #1
 80059b2:	f1c3 0302 	rsble	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	e7de      	b.n	8005978 <_printf_float+0x18c>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	055a      	lsls	r2, r3, #21
 80059be:	d407      	bmi.n	80059d0 <_printf_float+0x1e4>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	463a      	mov	r2, r7
 80059c4:	4659      	mov	r1, fp
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b0      	blx	r6
 80059ca:	3001      	adds	r0, #1
 80059cc:	d129      	bne.n	8005a22 <_printf_float+0x236>
 80059ce:	e764      	b.n	800589a <_printf_float+0xae>
 80059d0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80059d4:	f240 80d7 	bls.w	8005b86 <_printf_float+0x39a>
 80059d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	f7fa ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80059e4:	b388      	cbz	r0, 8005a4a <_printf_float+0x25e>
 80059e6:	2301      	movs	r3, #1
 80059e8:	4a40      	ldr	r2, [pc, #256]	; (8005aec <_printf_float+0x300>)
 80059ea:	4659      	mov	r1, fp
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b0      	blx	r6
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f af52 	beq.w	800589a <_printf_float+0xae>
 80059f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059fa:	429a      	cmp	r2, r3
 80059fc:	db02      	blt.n	8005a04 <_printf_float+0x218>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	07d8      	lsls	r0, r3, #31
 8005a02:	d50e      	bpl.n	8005a22 <_printf_float+0x236>
 8005a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a08:	4659      	mov	r1, fp
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b0      	blx	r6
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f af43 	beq.w	800589a <_printf_float+0xae>
 8005a14:	2700      	movs	r7, #0
 8005a16:	f104 081a 	add.w	r8, r4, #26
 8005a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	42bb      	cmp	r3, r7
 8005a20:	dc09      	bgt.n	8005a36 <_printf_float+0x24a>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	079f      	lsls	r7, r3, #30
 8005a26:	f100 80fd 	bmi.w	8005c24 <_printf_float+0x438>
 8005a2a:	68e0      	ldr	r0, [r4, #12]
 8005a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a2e:	4298      	cmp	r0, r3
 8005a30:	bfb8      	it	lt
 8005a32:	4618      	movlt	r0, r3
 8005a34:	e733      	b.n	800589e <_printf_float+0xb2>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4642      	mov	r2, r8
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b0      	blx	r6
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f af2a 	beq.w	800589a <_printf_float+0xae>
 8005a46:	3701      	adds	r7, #1
 8005a48:	e7e7      	b.n	8005a1a <_printf_float+0x22e>
 8005a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dc2b      	bgt.n	8005aa8 <_printf_float+0x2bc>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4a26      	ldr	r2, [pc, #152]	; (8005aec <_printf_float+0x300>)
 8005a54:	4659      	mov	r1, fp
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b0      	blx	r6
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f af1d 	beq.w	800589a <_printf_float+0xae>
 8005a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a62:	b923      	cbnz	r3, 8005a6e <_printf_float+0x282>
 8005a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a66:	b913      	cbnz	r3, 8005a6e <_printf_float+0x282>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	07d9      	lsls	r1, r3, #31
 8005a6c:	d5d9      	bpl.n	8005a22 <_printf_float+0x236>
 8005a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a72:	4659      	mov	r1, fp
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f af0e 	beq.w	800589a <_printf_float+0xae>
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	f104 091a 	add.w	r9, r4, #26
 8005a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a88:	425b      	negs	r3, r3
 8005a8a:	4543      	cmp	r3, r8
 8005a8c:	dc01      	bgt.n	8005a92 <_printf_float+0x2a6>
 8005a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a90:	e797      	b.n	80059c2 <_printf_float+0x1d6>
 8005a92:	2301      	movs	r3, #1
 8005a94:	464a      	mov	r2, r9
 8005a96:	4659      	mov	r1, fp
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b0      	blx	r6
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f aefc 	beq.w	800589a <_printf_float+0xae>
 8005aa2:	f108 0801 	add.w	r8, r8, #1
 8005aa6:	e7ee      	b.n	8005a86 <_printf_float+0x29a>
 8005aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aac:	429a      	cmp	r2, r3
 8005aae:	bfa8      	it	ge
 8005ab0:	461a      	movge	r2, r3
 8005ab2:	2a00      	cmp	r2, #0
 8005ab4:	4690      	mov	r8, r2
 8005ab6:	dd07      	ble.n	8005ac8 <_printf_float+0x2dc>
 8005ab8:	4613      	mov	r3, r2
 8005aba:	4659      	mov	r1, fp
 8005abc:	463a      	mov	r2, r7
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f aee9 	beq.w	800589a <_printf_float+0xae>
 8005ac8:	f104 031a 	add.w	r3, r4, #26
 8005acc:	f04f 0a00 	mov.w	sl, #0
 8005ad0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad6:	e015      	b.n	8005b04 <_printf_float+0x318>
 8005ad8:	7fefffff 	.word	0x7fefffff
 8005adc:	08007294 	.word	0x08007294
 8005ae0:	08007290 	.word	0x08007290
 8005ae4:	0800729c 	.word	0x0800729c
 8005ae8:	08007298 	.word	0x08007298
 8005aec:	080072a0 	.word	0x080072a0
 8005af0:	2301      	movs	r3, #1
 8005af2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005af4:	4659      	mov	r1, fp
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b0      	blx	r6
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f aecd 	beq.w	800589a <_printf_float+0xae>
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005b08:	eba9 0308 	sub.w	r3, r9, r8
 8005b0c:	4553      	cmp	r3, sl
 8005b0e:	dcef      	bgt.n	8005af0 <_printf_float+0x304>
 8005b10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b14:	429a      	cmp	r2, r3
 8005b16:	444f      	add	r7, r9
 8005b18:	db14      	blt.n	8005b44 <_printf_float+0x358>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	07da      	lsls	r2, r3, #31
 8005b1e:	d411      	bmi.n	8005b44 <_printf_float+0x358>
 8005b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b24:	eba3 0209 	sub.w	r2, r3, r9
 8005b28:	eba3 0901 	sub.w	r9, r3, r1
 8005b2c:	4591      	cmp	r9, r2
 8005b2e:	bfa8      	it	ge
 8005b30:	4691      	movge	r9, r2
 8005b32:	f1b9 0f00 	cmp.w	r9, #0
 8005b36:	dc0d      	bgt.n	8005b54 <_printf_float+0x368>
 8005b38:	2700      	movs	r7, #0
 8005b3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b3e:	f104 081a 	add.w	r8, r4, #26
 8005b42:	e018      	b.n	8005b76 <_printf_float+0x38a>
 8005b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b48:	4659      	mov	r1, fp
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b0      	blx	r6
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d1e6      	bne.n	8005b20 <_printf_float+0x334>
 8005b52:	e6a2      	b.n	800589a <_printf_float+0xae>
 8005b54:	464b      	mov	r3, r9
 8005b56:	463a      	mov	r2, r7
 8005b58:	4659      	mov	r1, fp
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d1ea      	bne.n	8005b38 <_printf_float+0x34c>
 8005b62:	e69a      	b.n	800589a <_printf_float+0xae>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4642      	mov	r2, r8
 8005b68:	4659      	mov	r1, fp
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b0      	blx	r6
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f ae93 	beq.w	800589a <_printf_float+0xae>
 8005b74:	3701      	adds	r7, #1
 8005b76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	eba3 0309 	sub.w	r3, r3, r9
 8005b80:	42bb      	cmp	r3, r7
 8005b82:	dcef      	bgt.n	8005b64 <_printf_float+0x378>
 8005b84:	e74d      	b.n	8005a22 <_printf_float+0x236>
 8005b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b88:	2a01      	cmp	r2, #1
 8005b8a:	dc01      	bgt.n	8005b90 <_printf_float+0x3a4>
 8005b8c:	07db      	lsls	r3, r3, #31
 8005b8e:	d538      	bpl.n	8005c02 <_printf_float+0x416>
 8005b90:	2301      	movs	r3, #1
 8005b92:	463a      	mov	r2, r7
 8005b94:	4659      	mov	r1, fp
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b0      	blx	r6
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f ae7d 	beq.w	800589a <_printf_float+0xae>
 8005ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b0      	blx	r6
 8005baa:	3001      	adds	r0, #1
 8005bac:	f107 0701 	add.w	r7, r7, #1
 8005bb0:	f43f ae73 	beq.w	800589a <_printf_float+0xae>
 8005bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f7fa fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8005bc6:	b9c0      	cbnz	r0, 8005bfa <_printf_float+0x40e>
 8005bc8:	4643      	mov	r3, r8
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4659      	mov	r1, fp
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b0      	blx	r6
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d10d      	bne.n	8005bf2 <_printf_float+0x406>
 8005bd6:	e660      	b.n	800589a <_printf_float+0xae>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4642      	mov	r2, r8
 8005bdc:	4659      	mov	r1, fp
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b0      	blx	r6
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae59 	beq.w	800589a <_printf_float+0xae>
 8005be8:	3701      	adds	r7, #1
 8005bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bec:	3b01      	subs	r3, #1
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	dcf2      	bgt.n	8005bd8 <_printf_float+0x3ec>
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bf8:	e6e4      	b.n	80059c4 <_printf_float+0x1d8>
 8005bfa:	2700      	movs	r7, #0
 8005bfc:	f104 081a 	add.w	r8, r4, #26
 8005c00:	e7f3      	b.n	8005bea <_printf_float+0x3fe>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7e1      	b.n	8005bca <_printf_float+0x3de>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4642      	mov	r2, r8
 8005c0a:	4659      	mov	r1, fp
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b0      	blx	r6
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae42 	beq.w	800589a <_printf_float+0xae>
 8005c16:	3701      	adds	r7, #1
 8005c18:	68e3      	ldr	r3, [r4, #12]
 8005c1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	42bb      	cmp	r3, r7
 8005c20:	dcf1      	bgt.n	8005c06 <_printf_float+0x41a>
 8005c22:	e702      	b.n	8005a2a <_printf_float+0x23e>
 8005c24:	2700      	movs	r7, #0
 8005c26:	f104 0819 	add.w	r8, r4, #25
 8005c2a:	e7f5      	b.n	8005c18 <_printf_float+0x42c>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f43f ae94 	beq.w	800595a <_printf_float+0x16e>
 8005c32:	f04f 0c00 	mov.w	ip, #0
 8005c36:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005c3a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005c3e:	6022      	str	r2, [r4, #0]
 8005c40:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005c44:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	463a      	mov	r2, r7
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f7ff fd3a 	bl	80056c8 <__cvt>
 8005c54:	4607      	mov	r7, r0
 8005c56:	e64f      	b.n	80058f8 <_printf_float+0x10c>

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	461f      	mov	r7, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	4606      	mov	r6, r0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bfb8      	it	lt
 8005c6a:	4613      	movlt	r3, r2
 8005c6c:	f8c9 3000 	str.w	r3, [r9]
 8005c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c74:	460c      	mov	r4, r1
 8005c76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c7a:	b112      	cbz	r2, 8005c82 <_printf_common+0x2a>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c9 3000 	str.w	r3, [r9]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c8c:	3302      	addmi	r3, #2
 8005c8e:	f8c9 3000 	strmi.w	r3, [r9]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d107      	bne.n	8005caa <_printf_common+0x52>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dc29      	bgt.n	8005cfe <_printf_common+0xa6>
 8005caa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	3300      	adds	r3, #0
 8005cb2:	bf18      	it	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	0692      	lsls	r2, r2, #26
 8005cb8:	d42e      	bmi.n	8005d18 <_printf_common+0xc0>
 8005cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	47c0      	blx	r8
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d021      	beq.n	8005d0c <_printf_common+0xb4>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	68e5      	ldr	r5, [r4, #12]
 8005ccc:	f003 0306 	and.w	r3, r3, #6
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	bf18      	it	ne
 8005cd4:	2500      	movne	r5, #0
 8005cd6:	f8d9 2000 	ldr.w	r2, [r9]
 8005cda:	f04f 0900 	mov.w	r9, #0
 8005cde:	bf08      	it	eq
 8005ce0:	1aad      	subeq	r5, r5, r2
 8005ce2:	68a3      	ldr	r3, [r4, #8]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	bf08      	it	eq
 8005ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cec:	4293      	cmp	r3, r2
 8005cee:	bfc4      	itt	gt
 8005cf0:	1a9b      	subgt	r3, r3, r2
 8005cf2:	18ed      	addgt	r5, r5, r3
 8005cf4:	341a      	adds	r4, #26
 8005cf6:	454d      	cmp	r5, r9
 8005cf8:	d11a      	bne.n	8005d30 <_printf_common+0xd8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e008      	b.n	8005d10 <_printf_common+0xb8>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4639      	mov	r1, r7
 8005d04:	4630      	mov	r0, r6
 8005d06:	47c0      	blx	r8
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d103      	bne.n	8005d14 <_printf_common+0xbc>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7c2      	b.n	8005c9e <_printf_common+0x46>
 8005d18:	2030      	movs	r0, #48	; 0x30
 8005d1a:	18e1      	adds	r1, r4, r3
 8005d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d26:	4422      	add	r2, r4
 8005d28:	3302      	adds	r3, #2
 8005d2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2e:	e7c4      	b.n	8005cba <_printf_common+0x62>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	4639      	mov	r1, r7
 8005d36:	4630      	mov	r0, r6
 8005d38:	47c0      	blx	r8
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0e6      	beq.n	8005d0c <_printf_common+0xb4>
 8005d3e:	f109 0901 	add.w	r9, r9, #1
 8005d42:	e7d8      	b.n	8005cf6 <_printf_common+0x9e>

08005d44 <_sbrk_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	2300      	movs	r3, #0
 8005d48:	4c05      	ldr	r4, [pc, #20]	; (8005d60 <_sbrk_r+0x1c>)
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	f7fb ff3a 	bl	8001bc8 <_sbrk>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_sbrk_r+0x1a>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_sbrk_r+0x1a>
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	20000410 	.word	0x20000410

08005d64 <_raise_r>:
 8005d64:	291f      	cmp	r1, #31
 8005d66:	b538      	push	{r3, r4, r5, lr}
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	d904      	bls.n	8005d78 <_raise_r+0x14>
 8005d6e:	2316      	movs	r3, #22
 8005d70:	6003      	str	r3, [r0, #0]
 8005d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d7a:	b112      	cbz	r2, 8005d82 <_raise_r+0x1e>
 8005d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d80:	b94b      	cbnz	r3, 8005d96 <_raise_r+0x32>
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 f830 	bl	8005de8 <_getpid_r>
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d92:	f000 b817 	b.w	8005dc4 <_kill_r>
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d00a      	beq.n	8005db0 <_raise_r+0x4c>
 8005d9a:	1c59      	adds	r1, r3, #1
 8005d9c:	d103      	bne.n	8005da6 <_raise_r+0x42>
 8005d9e:	2316      	movs	r3, #22
 8005da0:	6003      	str	r3, [r0, #0]
 8005da2:	2001      	movs	r0, #1
 8005da4:	e7e7      	b.n	8005d76 <_raise_r+0x12>
 8005da6:	2400      	movs	r4, #0
 8005da8:	4628      	mov	r0, r5
 8005daa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dae:	4798      	blx	r3
 8005db0:	2000      	movs	r0, #0
 8005db2:	e7e0      	b.n	8005d76 <_raise_r+0x12>

08005db4 <raise>:
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <raise+0xc>)
 8005db6:	4601      	mov	r1, r0
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	f7ff bfd3 	b.w	8005d64 <_raise_r>
 8005dbe:	bf00      	nop
 8005dc0:	20000010 	.word	0x20000010

08005dc4 <_kill_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	4c06      	ldr	r4, [pc, #24]	; (8005de4 <_kill_r+0x20>)
 8005dca:	4605      	mov	r5, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	f7fb fede 	bl	8001b92 <_kill>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	d102      	bne.n	8005de0 <_kill_r+0x1c>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	b103      	cbz	r3, 8005de0 <_kill_r+0x1c>
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	bd38      	pop	{r3, r4, r5, pc}
 8005de2:	bf00      	nop
 8005de4:	20000410 	.word	0x20000410

08005de8 <_getpid_r>:
 8005de8:	f7fb becc 	b.w	8001b84 <_getpid>

08005dec <_strtol_l.isra.0>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	4692      	mov	sl, r2
 8005df6:	461e      	mov	r6, r3
 8005df8:	460f      	mov	r7, r1
 8005dfa:	463d      	mov	r5, r7
 8005dfc:	9808      	ldr	r0, [sp, #32]
 8005dfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e02:	f000 fec9 	bl	8006b98 <__locale_ctype_ptr_l>
 8005e06:	4420      	add	r0, r4
 8005e08:	7843      	ldrb	r3, [r0, #1]
 8005e0a:	f013 0308 	ands.w	r3, r3, #8
 8005e0e:	d132      	bne.n	8005e76 <_strtol_l.isra.0+0x8a>
 8005e10:	2c2d      	cmp	r4, #45	; 0x2d
 8005e12:	d132      	bne.n	8005e7a <_strtol_l.isra.0+0x8e>
 8005e14:	2201      	movs	r2, #1
 8005e16:	787c      	ldrb	r4, [r7, #1]
 8005e18:	1cbd      	adds	r5, r7, #2
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	d05d      	beq.n	8005eda <_strtol_l.isra.0+0xee>
 8005e1e:	2e10      	cmp	r6, #16
 8005e20:	d109      	bne.n	8005e36 <_strtol_l.isra.0+0x4a>
 8005e22:	2c30      	cmp	r4, #48	; 0x30
 8005e24:	d107      	bne.n	8005e36 <_strtol_l.isra.0+0x4a>
 8005e26:	782b      	ldrb	r3, [r5, #0]
 8005e28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e2c:	2b58      	cmp	r3, #88	; 0x58
 8005e2e:	d14f      	bne.n	8005ed0 <_strtol_l.isra.0+0xe4>
 8005e30:	2610      	movs	r6, #16
 8005e32:	786c      	ldrb	r4, [r5, #1]
 8005e34:	3502      	adds	r5, #2
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005e3e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005e42:	2700      	movs	r7, #0
 8005e44:	fbb1 fcf6 	udiv	ip, r1, r6
 8005e48:	4638      	mov	r0, r7
 8005e4a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005e4e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005e52:	2b09      	cmp	r3, #9
 8005e54:	d817      	bhi.n	8005e86 <_strtol_l.isra.0+0x9a>
 8005e56:	461c      	mov	r4, r3
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	dd23      	ble.n	8005ea4 <_strtol_l.isra.0+0xb8>
 8005e5c:	1c7b      	adds	r3, r7, #1
 8005e5e:	d007      	beq.n	8005e70 <_strtol_l.isra.0+0x84>
 8005e60:	4584      	cmp	ip, r0
 8005e62:	d31c      	bcc.n	8005e9e <_strtol_l.isra.0+0xb2>
 8005e64:	d101      	bne.n	8005e6a <_strtol_l.isra.0+0x7e>
 8005e66:	45a6      	cmp	lr, r4
 8005e68:	db19      	blt.n	8005e9e <_strtol_l.isra.0+0xb2>
 8005e6a:	2701      	movs	r7, #1
 8005e6c:	fb00 4006 	mla	r0, r0, r6, r4
 8005e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e74:	e7eb      	b.n	8005e4e <_strtol_l.isra.0+0x62>
 8005e76:	462f      	mov	r7, r5
 8005e78:	e7bf      	b.n	8005dfa <_strtol_l.isra.0+0xe>
 8005e7a:	2c2b      	cmp	r4, #43	; 0x2b
 8005e7c:	bf04      	itt	eq
 8005e7e:	1cbd      	addeq	r5, r7, #2
 8005e80:	787c      	ldrbeq	r4, [r7, #1]
 8005e82:	461a      	mov	r2, r3
 8005e84:	e7c9      	b.n	8005e1a <_strtol_l.isra.0+0x2e>
 8005e86:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005e8a:	2b19      	cmp	r3, #25
 8005e8c:	d801      	bhi.n	8005e92 <_strtol_l.isra.0+0xa6>
 8005e8e:	3c37      	subs	r4, #55	; 0x37
 8005e90:	e7e2      	b.n	8005e58 <_strtol_l.isra.0+0x6c>
 8005e92:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005e96:	2b19      	cmp	r3, #25
 8005e98:	d804      	bhi.n	8005ea4 <_strtol_l.isra.0+0xb8>
 8005e9a:	3c57      	subs	r4, #87	; 0x57
 8005e9c:	e7dc      	b.n	8005e58 <_strtol_l.isra.0+0x6c>
 8005e9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ea2:	e7e5      	b.n	8005e70 <_strtol_l.isra.0+0x84>
 8005ea4:	1c7b      	adds	r3, r7, #1
 8005ea6:	d108      	bne.n	8005eba <_strtol_l.isra.0+0xce>
 8005ea8:	2322      	movs	r3, #34	; 0x22
 8005eaa:	4608      	mov	r0, r1
 8005eac:	f8c8 3000 	str.w	r3, [r8]
 8005eb0:	f1ba 0f00 	cmp.w	sl, #0
 8005eb4:	d107      	bne.n	8005ec6 <_strtol_l.isra.0+0xda>
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	b102      	cbz	r2, 8005ebe <_strtol_l.isra.0+0xd2>
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	f1ba 0f00 	cmp.w	sl, #0
 8005ec2:	d0f8      	beq.n	8005eb6 <_strtol_l.isra.0+0xca>
 8005ec4:	b10f      	cbz	r7, 8005eca <_strtol_l.isra.0+0xde>
 8005ec6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005eca:	f8ca 9000 	str.w	r9, [sl]
 8005ece:	e7f2      	b.n	8005eb6 <_strtol_l.isra.0+0xca>
 8005ed0:	2430      	movs	r4, #48	; 0x30
 8005ed2:	2e00      	cmp	r6, #0
 8005ed4:	d1af      	bne.n	8005e36 <_strtol_l.isra.0+0x4a>
 8005ed6:	2608      	movs	r6, #8
 8005ed8:	e7ad      	b.n	8005e36 <_strtol_l.isra.0+0x4a>
 8005eda:	2c30      	cmp	r4, #48	; 0x30
 8005edc:	d0a3      	beq.n	8005e26 <_strtol_l.isra.0+0x3a>
 8005ede:	260a      	movs	r6, #10
 8005ee0:	e7a9      	b.n	8005e36 <_strtol_l.isra.0+0x4a>
	...

08005ee4 <strtol>:
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <strtol+0x24>)
 8005ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ee8:	681c      	ldr	r4, [r3, #0]
 8005eea:	4d08      	ldr	r5, [pc, #32]	; (8005f0c <strtol+0x28>)
 8005eec:	6a23      	ldr	r3, [r4, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf08      	it	eq
 8005ef2:	462b      	moveq	r3, r5
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	460a      	mov	r2, r1
 8005efa:	4601      	mov	r1, r0
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff ff75 	bl	8005dec <_strtol_l.isra.0>
 8005f02:	b003      	add	sp, #12
 8005f04:	bd30      	pop	{r4, r5, pc}
 8005f06:	bf00      	nop
 8005f08:	20000010 	.word	0x20000010
 8005f0c:	20000074 	.word	0x20000074

08005f10 <quorem>:
 8005f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	6903      	ldr	r3, [r0, #16]
 8005f16:	690c      	ldr	r4, [r1, #16]
 8005f18:	4680      	mov	r8, r0
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	f2c0 8084 	blt.w	8006028 <quorem+0x118>
 8005f20:	3c01      	subs	r4, #1
 8005f22:	f101 0714 	add.w	r7, r1, #20
 8005f26:	f100 0614 	add.w	r6, r0, #20
 8005f2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f32:	3501      	adds	r5, #1
 8005f34:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f38:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f3c:	eb06 030c 	add.w	r3, r6, ip
 8005f40:	eb07 090c 	add.w	r9, r7, ip
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	b39d      	cbz	r5, 8005fb0 <quorem+0xa0>
 8005f48:	f04f 0a00 	mov.w	sl, #0
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	46b6      	mov	lr, r6
 8005f50:	46d3      	mov	fp, sl
 8005f52:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f56:	b293      	uxth	r3, r2
 8005f58:	fb05 a303 	mla	r3, r5, r3, sl
 8005f5c:	0c12      	lsrs	r2, r2, #16
 8005f5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f62:	fb05 a202 	mla	r2, r5, r2, sl
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	ebab 0303 	sub.w	r3, fp, r3
 8005f6c:	f8de b000 	ldr.w	fp, [lr]
 8005f70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f74:	fa1f fb8b 	uxth.w	fp, fp
 8005f78:	445b      	add	r3, fp
 8005f7a:	fa1f fb82 	uxth.w	fp, r2
 8005f7e:	f8de 2000 	ldr.w	r2, [lr]
 8005f82:	4581      	cmp	r9, r0
 8005f84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f92:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f96:	f84e 3b04 	str.w	r3, [lr], #4
 8005f9a:	d2da      	bcs.n	8005f52 <quorem+0x42>
 8005f9c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005fa0:	b933      	cbnz	r3, 8005fb0 <quorem+0xa0>
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	429e      	cmp	r6, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	d331      	bcc.n	8006010 <quorem+0x100>
 8005fac:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	f001 f837 	bl	8007024 <__mcmp>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	db26      	blt.n	8006008 <quorem+0xf8>
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f04f 0c00 	mov.w	ip, #0
 8005fc0:	3501      	adds	r5, #1
 8005fc2:	f857 1b04 	ldr.w	r1, [r7], #4
 8005fc6:	f8d0 e000 	ldr.w	lr, [r0]
 8005fca:	b28b      	uxth	r3, r1
 8005fcc:	ebac 0303 	sub.w	r3, ip, r3
 8005fd0:	fa1f f28e 	uxth.w	r2, lr
 8005fd4:	4413      	add	r3, r2
 8005fd6:	0c0a      	lsrs	r2, r1, #16
 8005fd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe6:	45b9      	cmp	r9, r7
 8005fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fec:	f840 3b04 	str.w	r3, [r0], #4
 8005ff0:	d2e7      	bcs.n	8005fc2 <quorem+0xb2>
 8005ff2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ff6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ffa:	b92a      	cbnz	r2, 8006008 <quorem+0xf8>
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	429e      	cmp	r6, r3
 8006000:	461a      	mov	r2, r3
 8006002:	d30b      	bcc.n	800601c <quorem+0x10c>
 8006004:	f8c8 4010 	str.w	r4, [r8, #16]
 8006008:	4628      	mov	r0, r5
 800600a:	b003      	add	sp, #12
 800600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	3b04      	subs	r3, #4
 8006014:	2a00      	cmp	r2, #0
 8006016:	d1c9      	bne.n	8005fac <quorem+0x9c>
 8006018:	3c01      	subs	r4, #1
 800601a:	e7c4      	b.n	8005fa6 <quorem+0x96>
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	3b04      	subs	r3, #4
 8006020:	2a00      	cmp	r2, #0
 8006022:	d1ef      	bne.n	8006004 <quorem+0xf4>
 8006024:	3c01      	subs	r4, #1
 8006026:	e7ea      	b.n	8005ffe <quorem+0xee>
 8006028:	2000      	movs	r0, #0
 800602a:	e7ee      	b.n	800600a <quorem+0xfa>
 800602c:	0000      	movs	r0, r0
	...

08006030 <_dtoa_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	4616      	mov	r6, r2
 8006036:	461f      	mov	r7, r3
 8006038:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800603a:	b095      	sub	sp, #84	; 0x54
 800603c:	4604      	mov	r4, r0
 800603e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006042:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006046:	b93d      	cbnz	r5, 8006058 <_dtoa_r+0x28>
 8006048:	2010      	movs	r0, #16
 800604a:	f7ff fad3 	bl	80055f4 <malloc>
 800604e:	6260      	str	r0, [r4, #36]	; 0x24
 8006050:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006054:	6005      	str	r5, [r0, #0]
 8006056:	60c5      	str	r5, [r0, #12]
 8006058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	b151      	cbz	r1, 8006074 <_dtoa_r+0x44>
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	2301      	movs	r3, #1
 8006062:	4093      	lsls	r3, r2
 8006064:	604a      	str	r2, [r1, #4]
 8006066:	608b      	str	r3, [r1, #8]
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fdfa 	bl	8006c62 <_Bfree>
 800606e:	2200      	movs	r2, #0
 8006070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	1e3b      	subs	r3, r7, #0
 8006076:	bfaf      	iteee	ge
 8006078:	2300      	movge	r3, #0
 800607a:	2201      	movlt	r2, #1
 800607c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006080:	9303      	strlt	r3, [sp, #12]
 8006082:	bfac      	ite	ge
 8006084:	f8c8 3000 	strge.w	r3, [r8]
 8006088:	f8c8 2000 	strlt.w	r2, [r8]
 800608c:	4bae      	ldr	r3, [pc, #696]	; (8006348 <_dtoa_r+0x318>)
 800608e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006092:	ea33 0308 	bics.w	r3, r3, r8
 8006096:	d11b      	bne.n	80060d0 <_dtoa_r+0xa0>
 8006098:	f242 730f 	movw	r3, #9999	; 0x270f
 800609c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	9b02      	ldr	r3, [sp, #8]
 80060a2:	b923      	cbnz	r3, 80060ae <_dtoa_r+0x7e>
 80060a4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80060a8:	2800      	cmp	r0, #0
 80060aa:	f000 8545 	beq.w	8006b38 <_dtoa_r+0xb08>
 80060ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060b0:	b953      	cbnz	r3, 80060c8 <_dtoa_r+0x98>
 80060b2:	4ba6      	ldr	r3, [pc, #664]	; (800634c <_dtoa_r+0x31c>)
 80060b4:	e021      	b.n	80060fa <_dtoa_r+0xca>
 80060b6:	4ba6      	ldr	r3, [pc, #664]	; (8006350 <_dtoa_r+0x320>)
 80060b8:	9306      	str	r3, [sp, #24]
 80060ba:	3308      	adds	r3, #8
 80060bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	9806      	ldr	r0, [sp, #24]
 80060c2:	b015      	add	sp, #84	; 0x54
 80060c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c8:	4ba0      	ldr	r3, [pc, #640]	; (800634c <_dtoa_r+0x31c>)
 80060ca:	9306      	str	r3, [sp, #24]
 80060cc:	3303      	adds	r3, #3
 80060ce:	e7f5      	b.n	80060bc <_dtoa_r+0x8c>
 80060d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80060e0:	4682      	mov	sl, r0
 80060e2:	b160      	cbz	r0, 80060fe <_dtoa_r+0xce>
 80060e4:	2301      	movs	r3, #1
 80060e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8520 	beq.w	8006b32 <_dtoa_r+0xb02>
 80060f2:	4b98      	ldr	r3, [pc, #608]	; (8006354 <_dtoa_r+0x324>)
 80060f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	9306      	str	r3, [sp, #24]
 80060fc:	e7e0      	b.n	80060c0 <_dtoa_r+0x90>
 80060fe:	ab12      	add	r3, sp, #72	; 0x48
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	ab13      	add	r3, sp, #76	; 0x4c
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4632      	mov	r2, r6
 8006108:	463b      	mov	r3, r7
 800610a:	4620      	mov	r0, r4
 800610c:	f001 f802 	bl	8007114 <__d2b>
 8006110:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006114:	4683      	mov	fp, r0
 8006116:	2d00      	cmp	r5, #0
 8006118:	d07d      	beq.n	8006216 <_dtoa_r+0x1e6>
 800611a:	46b0      	mov	r8, r6
 800611c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006120:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006124:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006128:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800612c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006130:	2200      	movs	r2, #0
 8006132:	4b89      	ldr	r3, [pc, #548]	; (8006358 <_dtoa_r+0x328>)
 8006134:	4640      	mov	r0, r8
 8006136:	4649      	mov	r1, r9
 8006138:	f7fa f816 	bl	8000168 <__aeabi_dsub>
 800613c:	a37c      	add	r3, pc, #496	; (adr r3, 8006330 <_dtoa_r+0x300>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa f9c9 	bl	80004d8 <__aeabi_dmul>
 8006146:	a37c      	add	r3, pc, #496	; (adr r3, 8006338 <_dtoa_r+0x308>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa f80e 	bl	800016c <__adddf3>
 8006150:	4606      	mov	r6, r0
 8006152:	4628      	mov	r0, r5
 8006154:	460f      	mov	r7, r1
 8006156:	f7fa f955 	bl	8000404 <__aeabi_i2d>
 800615a:	a379      	add	r3, pc, #484	; (adr r3, 8006340 <_dtoa_r+0x310>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa f9ba 	bl	80004d8 <__aeabi_dmul>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7f9 fffe 	bl	800016c <__adddf3>
 8006170:	4606      	mov	r6, r0
 8006172:	460f      	mov	r7, r1
 8006174:	f7fa fc60 	bl	8000a38 <__aeabi_d2iz>
 8006178:	2200      	movs	r2, #0
 800617a:	4682      	mov	sl, r0
 800617c:	2300      	movs	r3, #0
 800617e:	4630      	mov	r0, r6
 8006180:	4639      	mov	r1, r7
 8006182:	f7fa fc1b 	bl	80009bc <__aeabi_dcmplt>
 8006186:	b148      	cbz	r0, 800619c <_dtoa_r+0x16c>
 8006188:	4650      	mov	r0, sl
 800618a:	f7fa f93b 	bl	8000404 <__aeabi_i2d>
 800618e:	4632      	mov	r2, r6
 8006190:	463b      	mov	r3, r7
 8006192:	f7fa fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8006196:	b908      	cbnz	r0, 800619c <_dtoa_r+0x16c>
 8006198:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800619c:	f1ba 0f16 	cmp.w	sl, #22
 80061a0:	d85a      	bhi.n	8006258 <_dtoa_r+0x228>
 80061a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061a6:	496d      	ldr	r1, [pc, #436]	; (800635c <_dtoa_r+0x32c>)
 80061a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80061ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b0:	f7fa fc22 	bl	80009f8 <__aeabi_dcmpgt>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d051      	beq.n	800625c <_dtoa_r+0x22c>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80061be:	930d      	str	r3, [sp, #52]	; 0x34
 80061c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061c2:	1b5d      	subs	r5, r3, r5
 80061c4:	1e6b      	subs	r3, r5, #1
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	bf43      	ittte	mi
 80061ca:	2300      	movmi	r3, #0
 80061cc:	f1c5 0901 	rsbmi	r9, r5, #1
 80061d0:	9307      	strmi	r3, [sp, #28]
 80061d2:	f04f 0900 	movpl.w	r9, #0
 80061d6:	f1ba 0f00 	cmp.w	sl, #0
 80061da:	db41      	blt.n	8006260 <_dtoa_r+0x230>
 80061dc:	9b07      	ldr	r3, [sp, #28]
 80061de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80061e2:	4453      	add	r3, sl
 80061e4:	9307      	str	r3, [sp, #28]
 80061e6:	2300      	movs	r3, #0
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061ec:	2b09      	cmp	r3, #9
 80061ee:	f200 808f 	bhi.w	8006310 <_dtoa_r+0x2e0>
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	bfc4      	itt	gt
 80061f6:	3b04      	subgt	r3, #4
 80061f8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80061fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061fc:	bfc8      	it	gt
 80061fe:	2500      	movgt	r5, #0
 8006200:	f1a3 0302 	sub.w	r3, r3, #2
 8006204:	bfd8      	it	le
 8006206:	2501      	movle	r5, #1
 8006208:	2b03      	cmp	r3, #3
 800620a:	f200 808d 	bhi.w	8006328 <_dtoa_r+0x2f8>
 800620e:	e8df f003 	tbb	[pc, r3]
 8006212:	7d7b      	.short	0x7d7b
 8006214:	6f2f      	.short	0x6f2f
 8006216:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800621a:	441d      	add	r5, r3
 800621c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006220:	2820      	cmp	r0, #32
 8006222:	dd13      	ble.n	800624c <_dtoa_r+0x21c>
 8006224:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006228:	9b02      	ldr	r3, [sp, #8]
 800622a:	fa08 f800 	lsl.w	r8, r8, r0
 800622e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006232:	fa23 f000 	lsr.w	r0, r3, r0
 8006236:	ea48 0000 	orr.w	r0, r8, r0
 800623a:	f7fa f8d3 	bl	80003e4 <__aeabi_ui2d>
 800623e:	2301      	movs	r3, #1
 8006240:	4680      	mov	r8, r0
 8006242:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006246:	3d01      	subs	r5, #1
 8006248:	9310      	str	r3, [sp, #64]	; 0x40
 800624a:	e771      	b.n	8006130 <_dtoa_r+0x100>
 800624c:	9b02      	ldr	r3, [sp, #8]
 800624e:	f1c0 0020 	rsb	r0, r0, #32
 8006252:	fa03 f000 	lsl.w	r0, r3, r0
 8006256:	e7f0      	b.n	800623a <_dtoa_r+0x20a>
 8006258:	2301      	movs	r3, #1
 800625a:	e7b0      	b.n	80061be <_dtoa_r+0x18e>
 800625c:	900d      	str	r0, [sp, #52]	; 0x34
 800625e:	e7af      	b.n	80061c0 <_dtoa_r+0x190>
 8006260:	f1ca 0300 	rsb	r3, sl, #0
 8006264:	9308      	str	r3, [sp, #32]
 8006266:	2300      	movs	r3, #0
 8006268:	eba9 090a 	sub.w	r9, r9, sl
 800626c:	930c      	str	r3, [sp, #48]	; 0x30
 800626e:	e7bc      	b.n	80061ea <_dtoa_r+0x1ba>
 8006270:	2301      	movs	r3, #1
 8006272:	9309      	str	r3, [sp, #36]	; 0x24
 8006274:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006276:	2b00      	cmp	r3, #0
 8006278:	dd74      	ble.n	8006364 <_dtoa_r+0x334>
 800627a:	4698      	mov	r8, r3
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	2200      	movs	r2, #0
 8006280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006282:	6072      	str	r2, [r6, #4]
 8006284:	2204      	movs	r2, #4
 8006286:	f102 0014 	add.w	r0, r2, #20
 800628a:	4298      	cmp	r0, r3
 800628c:	6871      	ldr	r1, [r6, #4]
 800628e:	d96e      	bls.n	800636e <_dtoa_r+0x33e>
 8006290:	4620      	mov	r0, r4
 8006292:	f000 fcb2 	bl	8006bfa <_Balloc>
 8006296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006298:	6030      	str	r0, [r6, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b8 0f0e 	cmp.w	r8, #14
 80062a0:	9306      	str	r3, [sp, #24]
 80062a2:	f200 80ed 	bhi.w	8006480 <_dtoa_r+0x450>
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	f000 80ea 	beq.w	8006480 <_dtoa_r+0x450>
 80062ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062b0:	f1ba 0f00 	cmp.w	sl, #0
 80062b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80062b8:	dd77      	ble.n	80063aa <_dtoa_r+0x37a>
 80062ba:	4a28      	ldr	r2, [pc, #160]	; (800635c <_dtoa_r+0x32c>)
 80062bc:	f00a 030f 	and.w	r3, sl, #15
 80062c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80062c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062c8:	06f0      	lsls	r0, r6, #27
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062d2:	d568      	bpl.n	80063a6 <_dtoa_r+0x376>
 80062d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80062d8:	4b21      	ldr	r3, [pc, #132]	; (8006360 <_dtoa_r+0x330>)
 80062da:	2503      	movs	r5, #3
 80062dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062e0:	f7fa fa24 	bl	800072c <__aeabi_ddiv>
 80062e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e8:	f006 060f 	and.w	r6, r6, #15
 80062ec:	4f1c      	ldr	r7, [pc, #112]	; (8006360 <_dtoa_r+0x330>)
 80062ee:	e04f      	b.n	8006390 <_dtoa_r+0x360>
 80062f0:	2301      	movs	r3, #1
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062f6:	4453      	add	r3, sl
 80062f8:	f103 0801 	add.w	r8, r3, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	4643      	mov	r3, r8
 8006300:	2b01      	cmp	r3, #1
 8006302:	bfb8      	it	lt
 8006304:	2301      	movlt	r3, #1
 8006306:	e7ba      	b.n	800627e <_dtoa_r+0x24e>
 8006308:	2300      	movs	r3, #0
 800630a:	e7b2      	b.n	8006272 <_dtoa_r+0x242>
 800630c:	2300      	movs	r3, #0
 800630e:	e7f0      	b.n	80062f2 <_dtoa_r+0x2c2>
 8006310:	2501      	movs	r5, #1
 8006312:	2300      	movs	r3, #0
 8006314:	9509      	str	r5, [sp, #36]	; 0x24
 8006316:	931e      	str	r3, [sp, #120]	; 0x78
 8006318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800631c:	2200      	movs	r2, #0
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	4698      	mov	r8, r3
 8006322:	2312      	movs	r3, #18
 8006324:	921f      	str	r2, [sp, #124]	; 0x7c
 8006326:	e7aa      	b.n	800627e <_dtoa_r+0x24e>
 8006328:	2301      	movs	r3, #1
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	e7f4      	b.n	8006318 <_dtoa_r+0x2e8>
 800632e:	bf00      	nop
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	7ff00000 	.word	0x7ff00000
 800634c:	080072ab 	.word	0x080072ab
 8006350:	080072a2 	.word	0x080072a2
 8006354:	080072a1 	.word	0x080072a1
 8006358:	3ff80000 	.word	0x3ff80000
 800635c:	08007348 	.word	0x08007348
 8006360:	08007320 	.word	0x08007320
 8006364:	2301      	movs	r3, #1
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	4698      	mov	r8, r3
 800636a:	461a      	mov	r2, r3
 800636c:	e7da      	b.n	8006324 <_dtoa_r+0x2f4>
 800636e:	3101      	adds	r1, #1
 8006370:	6071      	str	r1, [r6, #4]
 8006372:	0052      	lsls	r2, r2, #1
 8006374:	e787      	b.n	8006286 <_dtoa_r+0x256>
 8006376:	07f1      	lsls	r1, r6, #31
 8006378:	d508      	bpl.n	800638c <_dtoa_r+0x35c>
 800637a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800637e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006382:	f7fa f8a9 	bl	80004d8 <__aeabi_dmul>
 8006386:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800638a:	3501      	adds	r5, #1
 800638c:	1076      	asrs	r6, r6, #1
 800638e:	3708      	adds	r7, #8
 8006390:	2e00      	cmp	r6, #0
 8006392:	d1f0      	bne.n	8006376 <_dtoa_r+0x346>
 8006394:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639c:	f7fa f9c6 	bl	800072c <__aeabi_ddiv>
 80063a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a4:	e01b      	b.n	80063de <_dtoa_r+0x3ae>
 80063a6:	2502      	movs	r5, #2
 80063a8:	e7a0      	b.n	80062ec <_dtoa_r+0x2bc>
 80063aa:	f000 80a4 	beq.w	80064f6 <_dtoa_r+0x4c6>
 80063ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063b2:	f1ca 0600 	rsb	r6, sl, #0
 80063b6:	4ba0      	ldr	r3, [pc, #640]	; (8006638 <_dtoa_r+0x608>)
 80063b8:	f006 020f 	and.w	r2, r6, #15
 80063bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa f888 	bl	80004d8 <__aeabi_dmul>
 80063c8:	2502      	movs	r5, #2
 80063ca:	2300      	movs	r3, #0
 80063cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d0:	4f9a      	ldr	r7, [pc, #616]	; (800663c <_dtoa_r+0x60c>)
 80063d2:	1136      	asrs	r6, r6, #4
 80063d4:	2e00      	cmp	r6, #0
 80063d6:	f040 8083 	bne.w	80064e0 <_dtoa_r+0x4b0>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e0      	bne.n	80063a0 <_dtoa_r+0x370>
 80063de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 808a 	beq.w	80064fa <_dtoa_r+0x4ca>
 80063e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80063ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063f2:	2200      	movs	r2, #0
 80063f4:	4b92      	ldr	r3, [pc, #584]	; (8006640 <_dtoa_r+0x610>)
 80063f6:	f7fa fae1 	bl	80009bc <__aeabi_dcmplt>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d07d      	beq.n	80064fa <_dtoa_r+0x4ca>
 80063fe:	f1b8 0f00 	cmp.w	r8, #0
 8006402:	d07a      	beq.n	80064fa <_dtoa_r+0x4ca>
 8006404:	9b04      	ldr	r3, [sp, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dd36      	ble.n	8006478 <_dtoa_r+0x448>
 800640a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800640e:	2200      	movs	r2, #0
 8006410:	4b8c      	ldr	r3, [pc, #560]	; (8006644 <_dtoa_r+0x614>)
 8006412:	f7fa f861 	bl	80004d8 <__aeabi_dmul>
 8006416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641a:	9e04      	ldr	r6, [sp, #16]
 800641c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006420:	3501      	adds	r5, #1
 8006422:	4628      	mov	r0, r5
 8006424:	f7f9 ffee 	bl	8000404 <__aeabi_i2d>
 8006428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800642c:	f7fa f854 	bl	80004d8 <__aeabi_dmul>
 8006430:	2200      	movs	r2, #0
 8006432:	4b85      	ldr	r3, [pc, #532]	; (8006648 <_dtoa_r+0x618>)
 8006434:	f7f9 fe9a 	bl	800016c <__adddf3>
 8006438:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800643c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006440:	950b      	str	r5, [sp, #44]	; 0x2c
 8006442:	2e00      	cmp	r6, #0
 8006444:	d15c      	bne.n	8006500 <_dtoa_r+0x4d0>
 8006446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	4b7f      	ldr	r3, [pc, #508]	; (800664c <_dtoa_r+0x61c>)
 800644e:	f7f9 fe8b 	bl	8000168 <__aeabi_dsub>
 8006452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006454:	462b      	mov	r3, r5
 8006456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645a:	f7fa facd 	bl	80009f8 <__aeabi_dcmpgt>
 800645e:	2800      	cmp	r0, #0
 8006460:	f040 8281 	bne.w	8006966 <_dtoa_r+0x936>
 8006464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800646e:	f7fa faa5 	bl	80009bc <__aeabi_dcmplt>
 8006472:	2800      	cmp	r0, #0
 8006474:	f040 8275 	bne.w	8006962 <_dtoa_r+0x932>
 8006478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800647c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006482:	2b00      	cmp	r3, #0
 8006484:	f2c0 814b 	blt.w	800671e <_dtoa_r+0x6ee>
 8006488:	f1ba 0f0e 	cmp.w	sl, #14
 800648c:	f300 8147 	bgt.w	800671e <_dtoa_r+0x6ee>
 8006490:	4b69      	ldr	r3, [pc, #420]	; (8006638 <_dtoa_r+0x608>)
 8006492:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800649e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f280 80d7 	bge.w	8006654 <_dtoa_r+0x624>
 80064a6:	f1b8 0f00 	cmp.w	r8, #0
 80064aa:	f300 80d3 	bgt.w	8006654 <_dtoa_r+0x624>
 80064ae:	f040 8257 	bne.w	8006960 <_dtoa_r+0x930>
 80064b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b6:	2200      	movs	r2, #0
 80064b8:	4b64      	ldr	r3, [pc, #400]	; (800664c <_dtoa_r+0x61c>)
 80064ba:	f7fa f80d 	bl	80004d8 <__aeabi_dmul>
 80064be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064c2:	f7fa fa8f 	bl	80009e4 <__aeabi_dcmpge>
 80064c6:	4646      	mov	r6, r8
 80064c8:	4647      	mov	r7, r8
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f040 822d 	bne.w	800692a <_dtoa_r+0x8fa>
 80064d0:	9b06      	ldr	r3, [sp, #24]
 80064d2:	9a06      	ldr	r2, [sp, #24]
 80064d4:	1c5d      	adds	r5, r3, #1
 80064d6:	2331      	movs	r3, #49	; 0x31
 80064d8:	f10a 0a01 	add.w	sl, sl, #1
 80064dc:	7013      	strb	r3, [r2, #0]
 80064de:	e228      	b.n	8006932 <_dtoa_r+0x902>
 80064e0:	07f2      	lsls	r2, r6, #31
 80064e2:	d505      	bpl.n	80064f0 <_dtoa_r+0x4c0>
 80064e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e8:	f7f9 fff6 	bl	80004d8 <__aeabi_dmul>
 80064ec:	2301      	movs	r3, #1
 80064ee:	3501      	adds	r5, #1
 80064f0:	1076      	asrs	r6, r6, #1
 80064f2:	3708      	adds	r7, #8
 80064f4:	e76e      	b.n	80063d4 <_dtoa_r+0x3a4>
 80064f6:	2502      	movs	r5, #2
 80064f8:	e771      	b.n	80063de <_dtoa_r+0x3ae>
 80064fa:	4657      	mov	r7, sl
 80064fc:	4646      	mov	r6, r8
 80064fe:	e790      	b.n	8006422 <_dtoa_r+0x3f2>
 8006500:	4b4d      	ldr	r3, [pc, #308]	; (8006638 <_dtoa_r+0x608>)
 8006502:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006506:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800650a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d048      	beq.n	80065a2 <_dtoa_r+0x572>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	2000      	movs	r0, #0
 8006516:	494e      	ldr	r1, [pc, #312]	; (8006650 <_dtoa_r+0x620>)
 8006518:	f7fa f908 	bl	800072c <__aeabi_ddiv>
 800651c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006520:	f7f9 fe22 	bl	8000168 <__aeabi_dsub>
 8006524:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006528:	9d06      	ldr	r5, [sp, #24]
 800652a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652e:	f7fa fa83 	bl	8000a38 <__aeabi_d2iz>
 8006532:	9011      	str	r0, [sp, #68]	; 0x44
 8006534:	f7f9 ff66 	bl	8000404 <__aeabi_i2d>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006540:	f7f9 fe12 	bl	8000168 <__aeabi_dsub>
 8006544:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800654a:	3330      	adds	r3, #48	; 0x30
 800654c:	f805 3b01 	strb.w	r3, [r5], #1
 8006550:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006554:	f7fa fa32 	bl	80009bc <__aeabi_dcmplt>
 8006558:	2800      	cmp	r0, #0
 800655a:	d163      	bne.n	8006624 <_dtoa_r+0x5f4>
 800655c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006560:	2000      	movs	r0, #0
 8006562:	4937      	ldr	r1, [pc, #220]	; (8006640 <_dtoa_r+0x610>)
 8006564:	f7f9 fe00 	bl	8000168 <__aeabi_dsub>
 8006568:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800656c:	f7fa fa26 	bl	80009bc <__aeabi_dcmplt>
 8006570:	2800      	cmp	r0, #0
 8006572:	f040 80b5 	bne.w	80066e0 <_dtoa_r+0x6b0>
 8006576:	9b06      	ldr	r3, [sp, #24]
 8006578:	1aeb      	subs	r3, r5, r3
 800657a:	429e      	cmp	r6, r3
 800657c:	f77f af7c 	ble.w	8006478 <_dtoa_r+0x448>
 8006580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006584:	2200      	movs	r2, #0
 8006586:	4b2f      	ldr	r3, [pc, #188]	; (8006644 <_dtoa_r+0x614>)
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	2200      	movs	r2, #0
 800658e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006596:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <_dtoa_r+0x614>)
 8006598:	f7f9 ff9e 	bl	80004d8 <__aeabi_dmul>
 800659c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a0:	e7c3      	b.n	800652a <_dtoa_r+0x4fa>
 80065a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065b0:	199d      	adds	r5, r3, r6
 80065b2:	461e      	mov	r6, r3
 80065b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b8:	f7fa fa3e 	bl	8000a38 <__aeabi_d2iz>
 80065bc:	9011      	str	r0, [sp, #68]	; 0x44
 80065be:	f7f9 ff21 	bl	8000404 <__aeabi_i2d>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ca:	f7f9 fdcd 	bl	8000168 <__aeabi_dsub>
 80065ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d4:	3330      	adds	r3, #48	; 0x30
 80065d6:	f806 3b01 	strb.w	r3, [r6], #1
 80065da:	42ae      	cmp	r6, r5
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	d124      	bne.n	800662c <_dtoa_r+0x5fc>
 80065e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065e6:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <_dtoa_r+0x620>)
 80065e8:	f7f9 fdc0 	bl	800016c <__adddf3>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f4:	f7fa fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d171      	bne.n	80066e0 <_dtoa_r+0x6b0>
 80065fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006600:	2000      	movs	r0, #0
 8006602:	4913      	ldr	r1, [pc, #76]	; (8006650 <_dtoa_r+0x620>)
 8006604:	f7f9 fdb0 	bl	8000168 <__aeabi_dsub>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006610:	f7fa f9d4 	bl	80009bc <__aeabi_dcmplt>
 8006614:	2800      	cmp	r0, #0
 8006616:	f43f af2f 	beq.w	8006478 <_dtoa_r+0x448>
 800661a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800661e:	1e6a      	subs	r2, r5, #1
 8006620:	2b30      	cmp	r3, #48	; 0x30
 8006622:	d001      	beq.n	8006628 <_dtoa_r+0x5f8>
 8006624:	46ba      	mov	sl, r7
 8006626:	e04a      	b.n	80066be <_dtoa_r+0x68e>
 8006628:	4615      	mov	r5, r2
 800662a:	e7f6      	b.n	800661a <_dtoa_r+0x5ea>
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <_dtoa_r+0x614>)
 800662e:	f7f9 ff53 	bl	80004d8 <__aeabi_dmul>
 8006632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006636:	e7bd      	b.n	80065b4 <_dtoa_r+0x584>
 8006638:	08007348 	.word	0x08007348
 800663c:	08007320 	.word	0x08007320
 8006640:	3ff00000 	.word	0x3ff00000
 8006644:	40240000 	.word	0x40240000
 8006648:	401c0000 	.word	0x401c0000
 800664c:	40140000 	.word	0x40140000
 8006650:	3fe00000 	.word	0x3fe00000
 8006654:	9d06      	ldr	r5, [sp, #24]
 8006656:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800665a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665e:	4630      	mov	r0, r6
 8006660:	4639      	mov	r1, r7
 8006662:	f7fa f863 	bl	800072c <__aeabi_ddiv>
 8006666:	f7fa f9e7 	bl	8000a38 <__aeabi_d2iz>
 800666a:	4681      	mov	r9, r0
 800666c:	f7f9 feca 	bl	8000404 <__aeabi_i2d>
 8006670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006674:	f7f9 ff30 	bl	80004d8 <__aeabi_dmul>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	f7f9 fd72 	bl	8000168 <__aeabi_dsub>
 8006684:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006688:	f805 6b01 	strb.w	r6, [r5], #1
 800668c:	9e06      	ldr	r6, [sp, #24]
 800668e:	4602      	mov	r2, r0
 8006690:	1bae      	subs	r6, r5, r6
 8006692:	45b0      	cmp	r8, r6
 8006694:	460b      	mov	r3, r1
 8006696:	d135      	bne.n	8006704 <_dtoa_r+0x6d4>
 8006698:	f7f9 fd68 	bl	800016c <__adddf3>
 800669c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a0:	4606      	mov	r6, r0
 80066a2:	460f      	mov	r7, r1
 80066a4:	f7fa f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 80066a8:	b9c8      	cbnz	r0, 80066de <_dtoa_r+0x6ae>
 80066aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ae:	4630      	mov	r0, r6
 80066b0:	4639      	mov	r1, r7
 80066b2:	f7fa f979 	bl	80009a8 <__aeabi_dcmpeq>
 80066b6:	b110      	cbz	r0, 80066be <_dtoa_r+0x68e>
 80066b8:	f019 0f01 	tst.w	r9, #1
 80066bc:	d10f      	bne.n	80066de <_dtoa_r+0x6ae>
 80066be:	4659      	mov	r1, fp
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 face 	bl	8006c62 <_Bfree>
 80066c6:	2300      	movs	r3, #0
 80066c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066ca:	702b      	strb	r3, [r5, #0]
 80066cc:	f10a 0301 	add.w	r3, sl, #1
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f43f acf3 	beq.w	80060c0 <_dtoa_r+0x90>
 80066da:	601d      	str	r5, [r3, #0]
 80066dc:	e4f0      	b.n	80060c0 <_dtoa_r+0x90>
 80066de:	4657      	mov	r7, sl
 80066e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066e4:	1e6b      	subs	r3, r5, #1
 80066e6:	2a39      	cmp	r2, #57	; 0x39
 80066e8:	d106      	bne.n	80066f8 <_dtoa_r+0x6c8>
 80066ea:	9a06      	ldr	r2, [sp, #24]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d107      	bne.n	8006700 <_dtoa_r+0x6d0>
 80066f0:	2330      	movs	r3, #48	; 0x30
 80066f2:	7013      	strb	r3, [r2, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	3701      	adds	r7, #1
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	3201      	adds	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e791      	b.n	8006624 <_dtoa_r+0x5f4>
 8006700:	461d      	mov	r5, r3
 8006702:	e7ed      	b.n	80066e0 <_dtoa_r+0x6b0>
 8006704:	2200      	movs	r2, #0
 8006706:	4b99      	ldr	r3, [pc, #612]	; (800696c <_dtoa_r+0x93c>)
 8006708:	f7f9 fee6 	bl	80004d8 <__aeabi_dmul>
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	4606      	mov	r6, r0
 8006712:	460f      	mov	r7, r1
 8006714:	f7fa f948 	bl	80009a8 <__aeabi_dcmpeq>
 8006718:	2800      	cmp	r0, #0
 800671a:	d09e      	beq.n	800665a <_dtoa_r+0x62a>
 800671c:	e7cf      	b.n	80066be <_dtoa_r+0x68e>
 800671e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006720:	2a00      	cmp	r2, #0
 8006722:	f000 8088 	beq.w	8006836 <_dtoa_r+0x806>
 8006726:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006728:	2a01      	cmp	r2, #1
 800672a:	dc6d      	bgt.n	8006808 <_dtoa_r+0x7d8>
 800672c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800672e:	2a00      	cmp	r2, #0
 8006730:	d066      	beq.n	8006800 <_dtoa_r+0x7d0>
 8006732:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006736:	464d      	mov	r5, r9
 8006738:	9e08      	ldr	r6, [sp, #32]
 800673a:	9a07      	ldr	r2, [sp, #28]
 800673c:	2101      	movs	r1, #1
 800673e:	441a      	add	r2, r3
 8006740:	4620      	mov	r0, r4
 8006742:	4499      	add	r9, r3
 8006744:	9207      	str	r2, [sp, #28]
 8006746:	f000 fb2c 	bl	8006da2 <__i2b>
 800674a:	4607      	mov	r7, r0
 800674c:	2d00      	cmp	r5, #0
 800674e:	dd0b      	ble.n	8006768 <_dtoa_r+0x738>
 8006750:	9b07      	ldr	r3, [sp, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd08      	ble.n	8006768 <_dtoa_r+0x738>
 8006756:	42ab      	cmp	r3, r5
 8006758:	bfa8      	it	ge
 800675a:	462b      	movge	r3, r5
 800675c:	9a07      	ldr	r2, [sp, #28]
 800675e:	eba9 0903 	sub.w	r9, r9, r3
 8006762:	1aed      	subs	r5, r5, r3
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	9307      	str	r3, [sp, #28]
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	b1eb      	cbz	r3, 80067a8 <_dtoa_r+0x778>
 800676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d065      	beq.n	800683e <_dtoa_r+0x80e>
 8006772:	b18e      	cbz	r6, 8006798 <_dtoa_r+0x768>
 8006774:	4639      	mov	r1, r7
 8006776:	4632      	mov	r2, r6
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fbb1 	bl	8006ee0 <__pow5mult>
 800677e:	465a      	mov	r2, fp
 8006780:	4601      	mov	r1, r0
 8006782:	4607      	mov	r7, r0
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fb15 	bl	8006db4 <__multiply>
 800678a:	4659      	mov	r1, fp
 800678c:	900a      	str	r0, [sp, #40]	; 0x28
 800678e:	4620      	mov	r0, r4
 8006790:	f000 fa67 	bl	8006c62 <_Bfree>
 8006794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006796:	469b      	mov	fp, r3
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	1b9a      	subs	r2, r3, r6
 800679c:	d004      	beq.n	80067a8 <_dtoa_r+0x778>
 800679e:	4659      	mov	r1, fp
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fb9d 	bl	8006ee0 <__pow5mult>
 80067a6:	4683      	mov	fp, r0
 80067a8:	2101      	movs	r1, #1
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 faf9 	bl	8006da2 <__i2b>
 80067b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067b2:	4606      	mov	r6, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 81c6 	beq.w	8006b46 <_dtoa_r+0xb16>
 80067ba:	461a      	mov	r2, r3
 80067bc:	4601      	mov	r1, r0
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fb8e 	bl	8006ee0 <__pow5mult>
 80067c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067c6:	4606      	mov	r6, r0
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	dc3e      	bgt.n	800684a <_dtoa_r+0x81a>
 80067cc:	9b02      	ldr	r3, [sp, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d137      	bne.n	8006842 <_dtoa_r+0x812>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d134      	bne.n	8006846 <_dtoa_r+0x816>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	0d1b      	lsrs	r3, r3, #20
 80067e4:	051b      	lsls	r3, r3, #20
 80067e6:	b12b      	cbz	r3, 80067f4 <_dtoa_r+0x7c4>
 80067e8:	9b07      	ldr	r3, [sp, #28]
 80067ea:	f109 0901 	add.w	r9, r9, #1
 80067ee:	3301      	adds	r3, #1
 80067f0:	9307      	str	r3, [sp, #28]
 80067f2:	2301      	movs	r3, #1
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d128      	bne.n	800684e <_dtoa_r+0x81e>
 80067fc:	2001      	movs	r0, #1
 80067fe:	e02e      	b.n	800685e <_dtoa_r+0x82e>
 8006800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006802:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006806:	e796      	b.n	8006736 <_dtoa_r+0x706>
 8006808:	9b08      	ldr	r3, [sp, #32]
 800680a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800680e:	42b3      	cmp	r3, r6
 8006810:	bfb7      	itett	lt
 8006812:	9b08      	ldrlt	r3, [sp, #32]
 8006814:	1b9e      	subge	r6, r3, r6
 8006816:	1af2      	sublt	r2, r6, r3
 8006818:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800681a:	bfbf      	itttt	lt
 800681c:	9608      	strlt	r6, [sp, #32]
 800681e:	189b      	addlt	r3, r3, r2
 8006820:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006822:	2600      	movlt	r6, #0
 8006824:	f1b8 0f00 	cmp.w	r8, #0
 8006828:	bfb9      	ittee	lt
 800682a:	eba9 0508 	sublt.w	r5, r9, r8
 800682e:	2300      	movlt	r3, #0
 8006830:	464d      	movge	r5, r9
 8006832:	4643      	movge	r3, r8
 8006834:	e781      	b.n	800673a <_dtoa_r+0x70a>
 8006836:	9e08      	ldr	r6, [sp, #32]
 8006838:	464d      	mov	r5, r9
 800683a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800683c:	e786      	b.n	800674c <_dtoa_r+0x71c>
 800683e:	9a08      	ldr	r2, [sp, #32]
 8006840:	e7ad      	b.n	800679e <_dtoa_r+0x76e>
 8006842:	2300      	movs	r3, #0
 8006844:	e7d6      	b.n	80067f4 <_dtoa_r+0x7c4>
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	e7d4      	b.n	80067f4 <_dtoa_r+0x7c4>
 800684a:	2300      	movs	r3, #0
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	6933      	ldr	r3, [r6, #16]
 8006850:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006854:	6918      	ldr	r0, [r3, #16]
 8006856:	f000 fa56 	bl	8006d06 <__hi0bits>
 800685a:	f1c0 0020 	rsb	r0, r0, #32
 800685e:	9b07      	ldr	r3, [sp, #28]
 8006860:	4418      	add	r0, r3
 8006862:	f010 001f 	ands.w	r0, r0, #31
 8006866:	d047      	beq.n	80068f8 <_dtoa_r+0x8c8>
 8006868:	f1c0 0320 	rsb	r3, r0, #32
 800686c:	2b04      	cmp	r3, #4
 800686e:	dd3b      	ble.n	80068e8 <_dtoa_r+0x8b8>
 8006870:	9b07      	ldr	r3, [sp, #28]
 8006872:	f1c0 001c 	rsb	r0, r0, #28
 8006876:	4481      	add	r9, r0
 8006878:	4405      	add	r5, r0
 800687a:	4403      	add	r3, r0
 800687c:	9307      	str	r3, [sp, #28]
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	dd05      	ble.n	8006890 <_dtoa_r+0x860>
 8006884:	4659      	mov	r1, fp
 8006886:	464a      	mov	r2, r9
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fb77 	bl	8006f7c <__lshift>
 800688e:	4683      	mov	fp, r0
 8006890:	9b07      	ldr	r3, [sp, #28]
 8006892:	2b00      	cmp	r3, #0
 8006894:	dd05      	ble.n	80068a2 <_dtoa_r+0x872>
 8006896:	4631      	mov	r1, r6
 8006898:	461a      	mov	r2, r3
 800689a:	4620      	mov	r0, r4
 800689c:	f000 fb6e 	bl	8006f7c <__lshift>
 80068a0:	4606      	mov	r6, r0
 80068a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a4:	b353      	cbz	r3, 80068fc <_dtoa_r+0x8cc>
 80068a6:	4631      	mov	r1, r6
 80068a8:	4658      	mov	r0, fp
 80068aa:	f000 fbbb 	bl	8007024 <__mcmp>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	da24      	bge.n	80068fc <_dtoa_r+0x8cc>
 80068b2:	2300      	movs	r3, #0
 80068b4:	4659      	mov	r1, fp
 80068b6:	220a      	movs	r2, #10
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 f9e9 	bl	8006c90 <__multadd>
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068c4:	4683      	mov	fp, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8144 	beq.w	8006b54 <_dtoa_r+0xb24>
 80068cc:	2300      	movs	r3, #0
 80068ce:	4639      	mov	r1, r7
 80068d0:	220a      	movs	r2, #10
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 f9dc 	bl	8006c90 <__multadd>
 80068d8:	9b04      	ldr	r3, [sp, #16]
 80068da:	4607      	mov	r7, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc4d      	bgt.n	800697c <_dtoa_r+0x94c>
 80068e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	dd4a      	ble.n	800697c <_dtoa_r+0x94c>
 80068e6:	e011      	b.n	800690c <_dtoa_r+0x8dc>
 80068e8:	d0c9      	beq.n	800687e <_dtoa_r+0x84e>
 80068ea:	9a07      	ldr	r2, [sp, #28]
 80068ec:	331c      	adds	r3, #28
 80068ee:	441a      	add	r2, r3
 80068f0:	4499      	add	r9, r3
 80068f2:	441d      	add	r5, r3
 80068f4:	4613      	mov	r3, r2
 80068f6:	e7c1      	b.n	800687c <_dtoa_r+0x84c>
 80068f8:	4603      	mov	r3, r0
 80068fa:	e7f6      	b.n	80068ea <_dtoa_r+0x8ba>
 80068fc:	f1b8 0f00 	cmp.w	r8, #0
 8006900:	dc36      	bgt.n	8006970 <_dtoa_r+0x940>
 8006902:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006904:	2b02      	cmp	r3, #2
 8006906:	dd33      	ble.n	8006970 <_dtoa_r+0x940>
 8006908:	f8cd 8010 	str.w	r8, [sp, #16]
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	b963      	cbnz	r3, 800692a <_dtoa_r+0x8fa>
 8006910:	4631      	mov	r1, r6
 8006912:	2205      	movs	r2, #5
 8006914:	4620      	mov	r0, r4
 8006916:	f000 f9bb 	bl	8006c90 <__multadd>
 800691a:	4601      	mov	r1, r0
 800691c:	4606      	mov	r6, r0
 800691e:	4658      	mov	r0, fp
 8006920:	f000 fb80 	bl	8007024 <__mcmp>
 8006924:	2800      	cmp	r0, #0
 8006926:	f73f add3 	bgt.w	80064d0 <_dtoa_r+0x4a0>
 800692a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800692c:	9d06      	ldr	r5, [sp, #24]
 800692e:	ea6f 0a03 	mvn.w	sl, r3
 8006932:	f04f 0900 	mov.w	r9, #0
 8006936:	4631      	mov	r1, r6
 8006938:	4620      	mov	r0, r4
 800693a:	f000 f992 	bl	8006c62 <_Bfree>
 800693e:	2f00      	cmp	r7, #0
 8006940:	f43f aebd 	beq.w	80066be <_dtoa_r+0x68e>
 8006944:	f1b9 0f00 	cmp.w	r9, #0
 8006948:	d005      	beq.n	8006956 <_dtoa_r+0x926>
 800694a:	45b9      	cmp	r9, r7
 800694c:	d003      	beq.n	8006956 <_dtoa_r+0x926>
 800694e:	4649      	mov	r1, r9
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f986 	bl	8006c62 <_Bfree>
 8006956:	4639      	mov	r1, r7
 8006958:	4620      	mov	r0, r4
 800695a:	f000 f982 	bl	8006c62 <_Bfree>
 800695e:	e6ae      	b.n	80066be <_dtoa_r+0x68e>
 8006960:	2600      	movs	r6, #0
 8006962:	4637      	mov	r7, r6
 8006964:	e7e1      	b.n	800692a <_dtoa_r+0x8fa>
 8006966:	46ba      	mov	sl, r7
 8006968:	4637      	mov	r7, r6
 800696a:	e5b1      	b.n	80064d0 <_dtoa_r+0x4a0>
 800696c:	40240000 	.word	0x40240000
 8006970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006972:	f8cd 8010 	str.w	r8, [sp, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80f3 	beq.w	8006b62 <_dtoa_r+0xb32>
 800697c:	2d00      	cmp	r5, #0
 800697e:	dd05      	ble.n	800698c <_dtoa_r+0x95c>
 8006980:	4639      	mov	r1, r7
 8006982:	462a      	mov	r2, r5
 8006984:	4620      	mov	r0, r4
 8006986:	f000 faf9 	bl	8006f7c <__lshift>
 800698a:	4607      	mov	r7, r0
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d04c      	beq.n	8006a2c <_dtoa_r+0x9fc>
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4620      	mov	r0, r4
 8006996:	f000 f930 	bl	8006bfa <_Balloc>
 800699a:	4605      	mov	r5, r0
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	f107 010c 	add.w	r1, r7, #12
 80069a2:	3202      	adds	r2, #2
 80069a4:	0092      	lsls	r2, r2, #2
 80069a6:	300c      	adds	r0, #12
 80069a8:	f000 f91a 	bl	8006be0 <memcpy>
 80069ac:	2201      	movs	r2, #1
 80069ae:	4629      	mov	r1, r5
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fae3 	bl	8006f7c <__lshift>
 80069b6:	46b9      	mov	r9, r7
 80069b8:	4607      	mov	r7, r0
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	9307      	str	r3, [sp, #28]
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	9308      	str	r3, [sp, #32]
 80069c6:	4631      	mov	r1, r6
 80069c8:	4658      	mov	r0, fp
 80069ca:	f7ff faa1 	bl	8005f10 <quorem>
 80069ce:	4649      	mov	r1, r9
 80069d0:	4605      	mov	r5, r0
 80069d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069d6:	4658      	mov	r0, fp
 80069d8:	f000 fb24 	bl	8007024 <__mcmp>
 80069dc:	463a      	mov	r2, r7
 80069de:	9002      	str	r0, [sp, #8]
 80069e0:	4631      	mov	r1, r6
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fb38 	bl	8007058 <__mdiff>
 80069e8:	68c3      	ldr	r3, [r0, #12]
 80069ea:	4602      	mov	r2, r0
 80069ec:	bb03      	cbnz	r3, 8006a30 <_dtoa_r+0xa00>
 80069ee:	4601      	mov	r1, r0
 80069f0:	9009      	str	r0, [sp, #36]	; 0x24
 80069f2:	4658      	mov	r0, fp
 80069f4:	f000 fb16 	bl	8007024 <__mcmp>
 80069f8:	4603      	mov	r3, r0
 80069fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069fc:	4611      	mov	r1, r2
 80069fe:	4620      	mov	r0, r4
 8006a00:	9309      	str	r3, [sp, #36]	; 0x24
 8006a02:	f000 f92e 	bl	8006c62 <_Bfree>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	b9a3      	cbnz	r3, 8006a34 <_dtoa_r+0xa04>
 8006a0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a0c:	b992      	cbnz	r2, 8006a34 <_dtoa_r+0xa04>
 8006a0e:	9a08      	ldr	r2, [sp, #32]
 8006a10:	b982      	cbnz	r2, 8006a34 <_dtoa_r+0xa04>
 8006a12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a16:	d029      	beq.n	8006a6c <_dtoa_r+0xa3c>
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd01      	ble.n	8006a22 <_dtoa_r+0x9f2>
 8006a1e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	1c5d      	adds	r5, r3, #1
 8006a26:	f883 8000 	strb.w	r8, [r3]
 8006a2a:	e784      	b.n	8006936 <_dtoa_r+0x906>
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	e7c2      	b.n	80069b6 <_dtoa_r+0x986>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e7e3      	b.n	80069fc <_dtoa_r+0x9cc>
 8006a34:	9a02      	ldr	r2, [sp, #8]
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	db04      	blt.n	8006a44 <_dtoa_r+0xa14>
 8006a3a:	d123      	bne.n	8006a84 <_dtoa_r+0xa54>
 8006a3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a3e:	bb0a      	cbnz	r2, 8006a84 <_dtoa_r+0xa54>
 8006a40:	9a08      	ldr	r2, [sp, #32]
 8006a42:	b9fa      	cbnz	r2, 8006a84 <_dtoa_r+0xa54>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	ddec      	ble.n	8006a22 <_dtoa_r+0x9f2>
 8006a48:	4659      	mov	r1, fp
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 fa95 	bl	8006f7c <__lshift>
 8006a52:	4631      	mov	r1, r6
 8006a54:	4683      	mov	fp, r0
 8006a56:	f000 fae5 	bl	8007024 <__mcmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	dc03      	bgt.n	8006a66 <_dtoa_r+0xa36>
 8006a5e:	d1e0      	bne.n	8006a22 <_dtoa_r+0x9f2>
 8006a60:	f018 0f01 	tst.w	r8, #1
 8006a64:	d0dd      	beq.n	8006a22 <_dtoa_r+0x9f2>
 8006a66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a6a:	d1d8      	bne.n	8006a1e <_dtoa_r+0x9ee>
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	9a07      	ldr	r2, [sp, #28]
 8006a70:	1c5d      	adds	r5, r3, #1
 8006a72:	2339      	movs	r3, #57	; 0x39
 8006a74:	7013      	strb	r3, [r2, #0]
 8006a76:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a7a:	1e6a      	subs	r2, r5, #1
 8006a7c:	2b39      	cmp	r3, #57	; 0x39
 8006a7e:	d04d      	beq.n	8006b1c <_dtoa_r+0xaec>
 8006a80:	3301      	adds	r3, #1
 8006a82:	e052      	b.n	8006b2a <_dtoa_r+0xafa>
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f102 0501 	add.w	r5, r2, #1
 8006a8c:	dd06      	ble.n	8006a9c <_dtoa_r+0xa6c>
 8006a8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a92:	d0eb      	beq.n	8006a6c <_dtoa_r+0xa3c>
 8006a94:	f108 0801 	add.w	r8, r8, #1
 8006a98:	9b07      	ldr	r3, [sp, #28]
 8006a9a:	e7c4      	b.n	8006a26 <_dtoa_r+0x9f6>
 8006a9c:	9b06      	ldr	r3, [sp, #24]
 8006a9e:	9a04      	ldr	r2, [sp, #16]
 8006aa0:	1aeb      	subs	r3, r5, r3
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006aa8:	d021      	beq.n	8006aee <_dtoa_r+0xabe>
 8006aaa:	4659      	mov	r1, fp
 8006aac:	2300      	movs	r3, #0
 8006aae:	220a      	movs	r2, #10
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 f8ed 	bl	8006c90 <__multadd>
 8006ab6:	45b9      	cmp	r9, r7
 8006ab8:	4683      	mov	fp, r0
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	f04f 020a 	mov.w	r2, #10
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	d105      	bne.n	8006ad4 <_dtoa_r+0xaa4>
 8006ac8:	f000 f8e2 	bl	8006c90 <__multadd>
 8006acc:	4681      	mov	r9, r0
 8006ace:	4607      	mov	r7, r0
 8006ad0:	9507      	str	r5, [sp, #28]
 8006ad2:	e778      	b.n	80069c6 <_dtoa_r+0x996>
 8006ad4:	f000 f8dc 	bl	8006c90 <__multadd>
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4681      	mov	r9, r0
 8006adc:	2300      	movs	r3, #0
 8006ade:	220a      	movs	r2, #10
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 f8d5 	bl	8006c90 <__multadd>
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	e7f2      	b.n	8006ad0 <_dtoa_r+0xaa0>
 8006aea:	f04f 0900 	mov.w	r9, #0
 8006aee:	4659      	mov	r1, fp
 8006af0:	2201      	movs	r2, #1
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fa42 	bl	8006f7c <__lshift>
 8006af8:	4631      	mov	r1, r6
 8006afa:	4683      	mov	fp, r0
 8006afc:	f000 fa92 	bl	8007024 <__mcmp>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	dcb8      	bgt.n	8006a76 <_dtoa_r+0xa46>
 8006b04:	d102      	bne.n	8006b0c <_dtoa_r+0xadc>
 8006b06:	f018 0f01 	tst.w	r8, #1
 8006b0a:	d1b4      	bne.n	8006a76 <_dtoa_r+0xa46>
 8006b0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b10:	1e6a      	subs	r2, r5, #1
 8006b12:	2b30      	cmp	r3, #48	; 0x30
 8006b14:	f47f af0f 	bne.w	8006936 <_dtoa_r+0x906>
 8006b18:	4615      	mov	r5, r2
 8006b1a:	e7f7      	b.n	8006b0c <_dtoa_r+0xadc>
 8006b1c:	9b06      	ldr	r3, [sp, #24]
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d105      	bne.n	8006b2e <_dtoa_r+0xafe>
 8006b22:	2331      	movs	r3, #49	; 0x31
 8006b24:	9a06      	ldr	r2, [sp, #24]
 8006b26:	f10a 0a01 	add.w	sl, sl, #1
 8006b2a:	7013      	strb	r3, [r2, #0]
 8006b2c:	e703      	b.n	8006936 <_dtoa_r+0x906>
 8006b2e:	4615      	mov	r5, r2
 8006b30:	e7a1      	b.n	8006a76 <_dtoa_r+0xa46>
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <_dtoa_r+0xb60>)
 8006b34:	f7ff bae1 	b.w	80060fa <_dtoa_r+0xca>
 8006b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f aabb 	bne.w	80060b6 <_dtoa_r+0x86>
 8006b40:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <_dtoa_r+0xb64>)
 8006b42:	f7ff bada 	b.w	80060fa <_dtoa_r+0xca>
 8006b46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f77f ae3f 	ble.w	80067cc <_dtoa_r+0x79c>
 8006b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b50:	9308      	str	r3, [sp, #32]
 8006b52:	e653      	b.n	80067fc <_dtoa_r+0x7cc>
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc03      	bgt.n	8006b62 <_dtoa_r+0xb32>
 8006b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	f73f aed5 	bgt.w	800690c <_dtoa_r+0x8dc>
 8006b62:	9d06      	ldr	r5, [sp, #24]
 8006b64:	4631      	mov	r1, r6
 8006b66:	4658      	mov	r0, fp
 8006b68:	f7ff f9d2 	bl	8005f10 <quorem>
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b72:	f805 8b01 	strb.w	r8, [r5], #1
 8006b76:	9a04      	ldr	r2, [sp, #16]
 8006b78:	1aeb      	subs	r3, r5, r3
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	ddb5      	ble.n	8006aea <_dtoa_r+0xaba>
 8006b7e:	4659      	mov	r1, fp
 8006b80:	2300      	movs	r3, #0
 8006b82:	220a      	movs	r2, #10
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 f883 	bl	8006c90 <__multadd>
 8006b8a:	4683      	mov	fp, r0
 8006b8c:	e7ea      	b.n	8006b64 <_dtoa_r+0xb34>
 8006b8e:	bf00      	nop
 8006b90:	080072a0 	.word	0x080072a0
 8006b94:	080072a2 	.word	0x080072a2

08006b98 <__locale_ctype_ptr_l>:
 8006b98:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006b9c:	4770      	bx	lr
	...

08006ba0 <_localeconv_r>:
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <_localeconv_r+0x14>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6a18      	ldr	r0, [r3, #32]
 8006ba6:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <_localeconv_r+0x18>)
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	bf08      	it	eq
 8006bac:	4618      	moveq	r0, r3
 8006bae:	30f0      	adds	r0, #240	; 0xf0
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000010 	.word	0x20000010
 8006bb8:	20000074 	.word	0x20000074

08006bbc <__ascii_mbtowc>:
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	b901      	cbnz	r1, 8006bc2 <__ascii_mbtowc+0x6>
 8006bc0:	a901      	add	r1, sp, #4
 8006bc2:	b142      	cbz	r2, 8006bd6 <__ascii_mbtowc+0x1a>
 8006bc4:	b14b      	cbz	r3, 8006bda <__ascii_mbtowc+0x1e>
 8006bc6:	7813      	ldrb	r3, [r2, #0]
 8006bc8:	600b      	str	r3, [r1, #0]
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	1c10      	adds	r0, r2, #0
 8006bce:	bf18      	it	ne
 8006bd0:	2001      	movne	r0, #1
 8006bd2:	b002      	add	sp, #8
 8006bd4:	4770      	bx	lr
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	e7fb      	b.n	8006bd2 <__ascii_mbtowc+0x16>
 8006bda:	f06f 0001 	mvn.w	r0, #1
 8006bde:	e7f8      	b.n	8006bd2 <__ascii_mbtowc+0x16>

08006be0 <memcpy>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	1e43      	subs	r3, r0, #1
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	d100      	bne.n	8006bec <memcpy+0xc>
 8006bea:	bd10      	pop	{r4, pc}
 8006bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf4:	e7f7      	b.n	8006be6 <memcpy+0x6>

08006bf6 <__malloc_lock>:
 8006bf6:	4770      	bx	lr

08006bf8 <__malloc_unlock>:
 8006bf8:	4770      	bx	lr

08006bfa <_Balloc>:
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bfe:	4604      	mov	r4, r0
 8006c00:	460e      	mov	r6, r1
 8006c02:	b93d      	cbnz	r5, 8006c14 <_Balloc+0x1a>
 8006c04:	2010      	movs	r0, #16
 8006c06:	f7fe fcf5 	bl	80055f4 <malloc>
 8006c0a:	6260      	str	r0, [r4, #36]	; 0x24
 8006c0c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c10:	6005      	str	r5, [r0, #0]
 8006c12:	60c5      	str	r5, [r0, #12]
 8006c14:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c16:	68eb      	ldr	r3, [r5, #12]
 8006c18:	b183      	cbz	r3, 8006c3c <_Balloc+0x42>
 8006c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c22:	b9b8      	cbnz	r0, 8006c54 <_Balloc+0x5a>
 8006c24:	2101      	movs	r1, #1
 8006c26:	fa01 f506 	lsl.w	r5, r1, r6
 8006c2a:	1d6a      	adds	r2, r5, #5
 8006c2c:	0092      	lsls	r2, r2, #2
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fabf 	bl	80071b2 <_calloc_r>
 8006c34:	b160      	cbz	r0, 8006c50 <_Balloc+0x56>
 8006c36:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006c3a:	e00e      	b.n	8006c5a <_Balloc+0x60>
 8006c3c:	2221      	movs	r2, #33	; 0x21
 8006c3e:	2104      	movs	r1, #4
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fab6 	bl	80071b2 <_calloc_r>
 8006c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c48:	60e8      	str	r0, [r5, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e4      	bne.n	8006c1a <_Balloc+0x20>
 8006c50:	2000      	movs	r0, #0
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	6802      	ldr	r2, [r0, #0]
 8006c56:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c60:	e7f7      	b.n	8006c52 <_Balloc+0x58>

08006c62 <_Bfree>:
 8006c62:	b570      	push	{r4, r5, r6, lr}
 8006c64:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c66:	4606      	mov	r6, r0
 8006c68:	460d      	mov	r5, r1
 8006c6a:	b93c      	cbnz	r4, 8006c7c <_Bfree+0x1a>
 8006c6c:	2010      	movs	r0, #16
 8006c6e:	f7fe fcc1 	bl	80055f4 <malloc>
 8006c72:	6270      	str	r0, [r6, #36]	; 0x24
 8006c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c78:	6004      	str	r4, [r0, #0]
 8006c7a:	60c4      	str	r4, [r0, #12]
 8006c7c:	b13d      	cbz	r5, 8006c8e <_Bfree+0x2c>
 8006c7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006c80:	686a      	ldr	r2, [r5, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c88:	6029      	str	r1, [r5, #0]
 8006c8a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}

08006c90 <__multadd>:
 8006c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c94:	461f      	mov	r7, r3
 8006c96:	4606      	mov	r6, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	690d      	ldr	r5, [r1, #16]
 8006c9e:	f101 0c14 	add.w	ip, r1, #20
 8006ca2:	f8dc 0000 	ldr.w	r0, [ip]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b281      	uxth	r1, r0
 8006caa:	fb02 7101 	mla	r1, r2, r1, r7
 8006cae:	0c00      	lsrs	r0, r0, #16
 8006cb0:	0c0f      	lsrs	r7, r1, #16
 8006cb2:	fb02 7000 	mla	r0, r2, r0, r7
 8006cb6:	b289      	uxth	r1, r1
 8006cb8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006cbc:	429d      	cmp	r5, r3
 8006cbe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8006cc6:	dcec      	bgt.n	8006ca2 <__multadd+0x12>
 8006cc8:	b1d7      	cbz	r7, 8006d00 <__multadd+0x70>
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dc12      	bgt.n	8006cf6 <__multadd+0x66>
 8006cd0:	6861      	ldr	r1, [r4, #4]
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	3101      	adds	r1, #1
 8006cd6:	f7ff ff90 	bl	8006bfa <_Balloc>
 8006cda:	4680      	mov	r8, r0
 8006cdc:	6922      	ldr	r2, [r4, #16]
 8006cde:	f104 010c 	add.w	r1, r4, #12
 8006ce2:	3202      	adds	r2, #2
 8006ce4:	0092      	lsls	r2, r2, #2
 8006ce6:	300c      	adds	r0, #12
 8006ce8:	f7ff ff7a 	bl	8006be0 <memcpy>
 8006cec:	4621      	mov	r1, r4
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ffb7 	bl	8006c62 <_Bfree>
 8006cf4:	4644      	mov	r4, r8
 8006cf6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cfa:	3501      	adds	r5, #1
 8006cfc:	615f      	str	r7, [r3, #20]
 8006cfe:	6125      	str	r5, [r4, #16]
 8006d00:	4620      	mov	r0, r4
 8006d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d06 <__hi0bits>:
 8006d06:	0c02      	lsrs	r2, r0, #16
 8006d08:	0412      	lsls	r2, r2, #16
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	b9b2      	cbnz	r2, 8006d3c <__hi0bits+0x36>
 8006d0e:	0403      	lsls	r3, r0, #16
 8006d10:	2010      	movs	r0, #16
 8006d12:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d16:	bf04      	itt	eq
 8006d18:	021b      	lsleq	r3, r3, #8
 8006d1a:	3008      	addeq	r0, #8
 8006d1c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d20:	bf04      	itt	eq
 8006d22:	011b      	lsleq	r3, r3, #4
 8006d24:	3004      	addeq	r0, #4
 8006d26:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d2a:	bf04      	itt	eq
 8006d2c:	009b      	lsleq	r3, r3, #2
 8006d2e:	3002      	addeq	r0, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	db06      	blt.n	8006d42 <__hi0bits+0x3c>
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	d503      	bpl.n	8006d40 <__hi0bits+0x3a>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	4770      	bx	lr
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e7e8      	b.n	8006d12 <__hi0bits+0xc>
 8006d40:	2020      	movs	r0, #32
 8006d42:	4770      	bx	lr

08006d44 <__lo0bits>:
 8006d44:	6803      	ldr	r3, [r0, #0]
 8006d46:	4601      	mov	r1, r0
 8006d48:	f013 0207 	ands.w	r2, r3, #7
 8006d4c:	d00b      	beq.n	8006d66 <__lo0bits+0x22>
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d423      	bmi.n	8006d9a <__lo0bits+0x56>
 8006d52:	0798      	lsls	r0, r3, #30
 8006d54:	bf49      	itett	mi
 8006d56:	085b      	lsrmi	r3, r3, #1
 8006d58:	089b      	lsrpl	r3, r3, #2
 8006d5a:	2001      	movmi	r0, #1
 8006d5c:	600b      	strmi	r3, [r1, #0]
 8006d5e:	bf5c      	itt	pl
 8006d60:	600b      	strpl	r3, [r1, #0]
 8006d62:	2002      	movpl	r0, #2
 8006d64:	4770      	bx	lr
 8006d66:	b298      	uxth	r0, r3
 8006d68:	b9a8      	cbnz	r0, 8006d96 <__lo0bits+0x52>
 8006d6a:	2010      	movs	r0, #16
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d72:	bf04      	itt	eq
 8006d74:	0a1b      	lsreq	r3, r3, #8
 8006d76:	3008      	addeq	r0, #8
 8006d78:	071a      	lsls	r2, r3, #28
 8006d7a:	bf04      	itt	eq
 8006d7c:	091b      	lsreq	r3, r3, #4
 8006d7e:	3004      	addeq	r0, #4
 8006d80:	079a      	lsls	r2, r3, #30
 8006d82:	bf04      	itt	eq
 8006d84:	089b      	lsreq	r3, r3, #2
 8006d86:	3002      	addeq	r0, #2
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	d402      	bmi.n	8006d92 <__lo0bits+0x4e>
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	d006      	beq.n	8006d9e <__lo0bits+0x5a>
 8006d90:	3001      	adds	r0, #1
 8006d92:	600b      	str	r3, [r1, #0]
 8006d94:	4770      	bx	lr
 8006d96:	4610      	mov	r0, r2
 8006d98:	e7e9      	b.n	8006d6e <__lo0bits+0x2a>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	4770      	bx	lr
 8006d9e:	2020      	movs	r0, #32
 8006da0:	4770      	bx	lr

08006da2 <__i2b>:
 8006da2:	b510      	push	{r4, lr}
 8006da4:	460c      	mov	r4, r1
 8006da6:	2101      	movs	r1, #1
 8006da8:	f7ff ff27 	bl	8006bfa <_Balloc>
 8006dac:	2201      	movs	r2, #1
 8006dae:	6144      	str	r4, [r0, #20]
 8006db0:	6102      	str	r2, [r0, #16]
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <__multiply>:
 8006db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	4614      	mov	r4, r2
 8006dba:	690a      	ldr	r2, [r1, #16]
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	4688      	mov	r8, r1
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	bfbe      	ittt	lt
 8006dc4:	460b      	movlt	r3, r1
 8006dc6:	46a0      	movlt	r8, r4
 8006dc8:	461c      	movlt	r4, r3
 8006dca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006dce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006dda:	eb07 0609 	add.w	r6, r7, r9
 8006dde:	42b3      	cmp	r3, r6
 8006de0:	bfb8      	it	lt
 8006de2:	3101      	addlt	r1, #1
 8006de4:	f7ff ff09 	bl	8006bfa <_Balloc>
 8006de8:	f100 0514 	add.w	r5, r0, #20
 8006dec:	462b      	mov	r3, r5
 8006dee:	2200      	movs	r2, #0
 8006df0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006df4:	4573      	cmp	r3, lr
 8006df6:	d316      	bcc.n	8006e26 <__multiply+0x72>
 8006df8:	f104 0214 	add.w	r2, r4, #20
 8006dfc:	f108 0114 	add.w	r1, r8, #20
 8006e00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	9b00      	ldr	r3, [sp, #0]
 8006e0c:	9201      	str	r2, [sp, #4]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d80c      	bhi.n	8006e2c <__multiply+0x78>
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	dd03      	ble.n	8006e1e <__multiply+0x6a>
 8006e16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d05d      	beq.n	8006eda <__multiply+0x126>
 8006e1e:	6106      	str	r6, [r0, #16]
 8006e20:	b003      	add	sp, #12
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	f843 2b04 	str.w	r2, [r3], #4
 8006e2a:	e7e3      	b.n	8006df4 <__multiply+0x40>
 8006e2c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006e30:	f1bb 0f00 	cmp.w	fp, #0
 8006e34:	d023      	beq.n	8006e7e <__multiply+0xca>
 8006e36:	4689      	mov	r9, r1
 8006e38:	46ac      	mov	ip, r5
 8006e3a:	f04f 0800 	mov.w	r8, #0
 8006e3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e42:	f8dc a000 	ldr.w	sl, [ip]
 8006e46:	b2a3      	uxth	r3, r4
 8006e48:	fa1f fa8a 	uxth.w	sl, sl
 8006e4c:	fb0b a303 	mla	r3, fp, r3, sl
 8006e50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e54:	f8dc 4000 	ldr.w	r4, [ip]
 8006e58:	4443      	add	r3, r8
 8006e5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e5e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006e62:	46e2      	mov	sl, ip
 8006e64:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e6e:	454f      	cmp	r7, r9
 8006e70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e74:	f84a 3b04 	str.w	r3, [sl], #4
 8006e78:	d82b      	bhi.n	8006ed2 <__multiply+0x11e>
 8006e7a:	f8cc 8004 	str.w	r8, [ip, #4]
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	3204      	adds	r2, #4
 8006e82:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006e86:	f1ba 0f00 	cmp.w	sl, #0
 8006e8a:	d020      	beq.n	8006ece <__multiply+0x11a>
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	46a8      	mov	r8, r5
 8006e90:	f04f 0b00 	mov.w	fp, #0
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ea4:	46c4      	mov	ip, r8
 8006ea6:	445c      	add	r4, fp
 8006ea8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006eac:	f84c 3b04 	str.w	r3, [ip], #4
 8006eb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eb4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	fb0a b303 	mla	r3, sl, r3, fp
 8006ebe:	454f      	cmp	r7, r9
 8006ec0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006ec4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006ec8:	d805      	bhi.n	8006ed6 <__multiply+0x122>
 8006eca:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ece:	3504      	adds	r5, #4
 8006ed0:	e79b      	b.n	8006e0a <__multiply+0x56>
 8006ed2:	46d4      	mov	ip, sl
 8006ed4:	e7b3      	b.n	8006e3e <__multiply+0x8a>
 8006ed6:	46e0      	mov	r8, ip
 8006ed8:	e7dd      	b.n	8006e96 <__multiply+0xe2>
 8006eda:	3e01      	subs	r6, #1
 8006edc:	e799      	b.n	8006e12 <__multiply+0x5e>
	...

08006ee0 <__pow5mult>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	f012 0203 	ands.w	r2, r2, #3
 8006eea:	4606      	mov	r6, r0
 8006eec:	460f      	mov	r7, r1
 8006eee:	d007      	beq.n	8006f00 <__pow5mult+0x20>
 8006ef0:	4c21      	ldr	r4, [pc, #132]	; (8006f78 <__pow5mult+0x98>)
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efa:	f7ff fec9 	bl	8006c90 <__multadd>
 8006efe:	4607      	mov	r7, r0
 8006f00:	10ad      	asrs	r5, r5, #2
 8006f02:	d035      	beq.n	8006f70 <__pow5mult+0x90>
 8006f04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f06:	b93c      	cbnz	r4, 8006f18 <__pow5mult+0x38>
 8006f08:	2010      	movs	r0, #16
 8006f0a:	f7fe fb73 	bl	80055f4 <malloc>
 8006f0e:	6270      	str	r0, [r6, #36]	; 0x24
 8006f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f14:	6004      	str	r4, [r0, #0]
 8006f16:	60c4      	str	r4, [r0, #12]
 8006f18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f20:	b94c      	cbnz	r4, 8006f36 <__pow5mult+0x56>
 8006f22:	f240 2171 	movw	r1, #625	; 0x271
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ff3b 	bl	8006da2 <__i2b>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	07eb      	lsls	r3, r5, #31
 8006f3c:	d50a      	bpl.n	8006f54 <__pow5mult+0x74>
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4622      	mov	r2, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7ff ff36 	bl	8006db4 <__multiply>
 8006f48:	4681      	mov	r9, r0
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fe88 	bl	8006c62 <_Bfree>
 8006f52:	464f      	mov	r7, r9
 8006f54:	106d      	asrs	r5, r5, #1
 8006f56:	d00b      	beq.n	8006f70 <__pow5mult+0x90>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	b938      	cbnz	r0, 8006f6c <__pow5mult+0x8c>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff ff27 	bl	8006db4 <__multiply>
 8006f66:	6020      	str	r0, [r4, #0]
 8006f68:	f8c0 8000 	str.w	r8, [r0]
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	e7e4      	b.n	8006f3a <__pow5mult+0x5a>
 8006f70:	4638      	mov	r0, r7
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	bf00      	nop
 8006f78:	08007410 	.word	0x08007410

08006f7c <__lshift>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	460c      	mov	r4, r1
 8006f82:	4607      	mov	r7, r0
 8006f84:	4616      	mov	r6, r2
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f8c:	eb0a 0903 	add.w	r9, sl, r3
 8006f90:	6849      	ldr	r1, [r1, #4]
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	f109 0501 	add.w	r5, r9, #1
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	db32      	blt.n	8007002 <__lshift+0x86>
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	f7ff fe2c 	bl	8006bfa <_Balloc>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f100 0114 	add.w	r1, r0, #20
 8006fac:	4553      	cmp	r3, sl
 8006fae:	db2b      	blt.n	8007008 <__lshift+0x8c>
 8006fb0:	6920      	ldr	r0, [r4, #16]
 8006fb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb6:	f104 0314 	add.w	r3, r4, #20
 8006fba:	f016 021f 	ands.w	r2, r6, #31
 8006fbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc6:	d025      	beq.n	8007014 <__lshift+0x98>
 8006fc8:	2000      	movs	r0, #0
 8006fca:	f1c2 0e20 	rsb	lr, r2, #32
 8006fce:	468a      	mov	sl, r1
 8006fd0:	681e      	ldr	r6, [r3, #0]
 8006fd2:	4096      	lsls	r6, r2
 8006fd4:	4330      	orrs	r0, r6
 8006fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8006fda:	f853 0b04 	ldr.w	r0, [r3], #4
 8006fde:	459c      	cmp	ip, r3
 8006fe0:	fa20 f00e 	lsr.w	r0, r0, lr
 8006fe4:	d814      	bhi.n	8007010 <__lshift+0x94>
 8006fe6:	6048      	str	r0, [r1, #4]
 8006fe8:	b108      	cbz	r0, 8006fee <__lshift+0x72>
 8006fea:	f109 0502 	add.w	r5, r9, #2
 8006fee:	3d01      	subs	r5, #1
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f8c8 5010 	str.w	r5, [r8, #16]
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	f7ff fe33 	bl	8006c62 <_Bfree>
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	3101      	adds	r1, #1
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	e7c7      	b.n	8006f98 <__lshift+0x1c>
 8007008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800700c:	3301      	adds	r3, #1
 800700e:	e7cd      	b.n	8006fac <__lshift+0x30>
 8007010:	4651      	mov	r1, sl
 8007012:	e7dc      	b.n	8006fce <__lshift+0x52>
 8007014:	3904      	subs	r1, #4
 8007016:	f853 2b04 	ldr.w	r2, [r3], #4
 800701a:	459c      	cmp	ip, r3
 800701c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007020:	d8f9      	bhi.n	8007016 <__lshift+0x9a>
 8007022:	e7e4      	b.n	8006fee <__lshift+0x72>

08007024 <__mcmp>:
 8007024:	6903      	ldr	r3, [r0, #16]
 8007026:	690a      	ldr	r2, [r1, #16]
 8007028:	b530      	push	{r4, r5, lr}
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	d10c      	bne.n	8007048 <__mcmp+0x24>
 800702e:	0092      	lsls	r2, r2, #2
 8007030:	3014      	adds	r0, #20
 8007032:	3114      	adds	r1, #20
 8007034:	1884      	adds	r4, r0, r2
 8007036:	4411      	add	r1, r2
 8007038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800703c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007040:	4295      	cmp	r5, r2
 8007042:	d003      	beq.n	800704c <__mcmp+0x28>
 8007044:	d305      	bcc.n	8007052 <__mcmp+0x2e>
 8007046:	2301      	movs	r3, #1
 8007048:	4618      	mov	r0, r3
 800704a:	bd30      	pop	{r4, r5, pc}
 800704c:	42a0      	cmp	r0, r4
 800704e:	d3f3      	bcc.n	8007038 <__mcmp+0x14>
 8007050:	e7fa      	b.n	8007048 <__mcmp+0x24>
 8007052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007056:	e7f7      	b.n	8007048 <__mcmp+0x24>

08007058 <__mdiff>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	460d      	mov	r5, r1
 800705e:	4607      	mov	r7, r0
 8007060:	4611      	mov	r1, r2
 8007062:	4628      	mov	r0, r5
 8007064:	4614      	mov	r4, r2
 8007066:	f7ff ffdd 	bl	8007024 <__mcmp>
 800706a:	1e06      	subs	r6, r0, #0
 800706c:	d108      	bne.n	8007080 <__mdiff+0x28>
 800706e:	4631      	mov	r1, r6
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff fdc2 	bl	8006bfa <_Balloc>
 8007076:	2301      	movs	r3, #1
 8007078:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	bfa4      	itt	ge
 8007082:	4623      	movge	r3, r4
 8007084:	462c      	movge	r4, r5
 8007086:	4638      	mov	r0, r7
 8007088:	6861      	ldr	r1, [r4, #4]
 800708a:	bfa6      	itte	ge
 800708c:	461d      	movge	r5, r3
 800708e:	2600      	movge	r6, #0
 8007090:	2601      	movlt	r6, #1
 8007092:	f7ff fdb2 	bl	8006bfa <_Balloc>
 8007096:	f04f 0e00 	mov.w	lr, #0
 800709a:	60c6      	str	r6, [r0, #12]
 800709c:	692b      	ldr	r3, [r5, #16]
 800709e:	6926      	ldr	r6, [r4, #16]
 80070a0:	f104 0214 	add.w	r2, r4, #20
 80070a4:	f105 0914 	add.w	r9, r5, #20
 80070a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80070ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80070b0:	f100 0114 	add.w	r1, r0, #20
 80070b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80070b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80070bc:	fa1f f38a 	uxth.w	r3, sl
 80070c0:	4473      	add	r3, lr
 80070c2:	b2ac      	uxth	r4, r5
 80070c4:	1b1b      	subs	r3, r3, r4
 80070c6:	0c2c      	lsrs	r4, r5, #16
 80070c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80070cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80070d6:	45c8      	cmp	r8, r9
 80070d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80070dc:	4694      	mov	ip, r2
 80070de:	f841 4b04 	str.w	r4, [r1], #4
 80070e2:	d8e7      	bhi.n	80070b4 <__mdiff+0x5c>
 80070e4:	45bc      	cmp	ip, r7
 80070e6:	d304      	bcc.n	80070f2 <__mdiff+0x9a>
 80070e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80070ec:	b183      	cbz	r3, 8007110 <__mdiff+0xb8>
 80070ee:	6106      	str	r6, [r0, #16]
 80070f0:	e7c4      	b.n	800707c <__mdiff+0x24>
 80070f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80070f6:	b2a2      	uxth	r2, r4
 80070f8:	4472      	add	r2, lr
 80070fa:	1413      	asrs	r3, r2, #16
 80070fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007100:	b292      	uxth	r2, r2
 8007102:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007106:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800710a:	f841 2b04 	str.w	r2, [r1], #4
 800710e:	e7e9      	b.n	80070e4 <__mdiff+0x8c>
 8007110:	3e01      	subs	r6, #1
 8007112:	e7e9      	b.n	80070e8 <__mdiff+0x90>

08007114 <__d2b>:
 8007114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007118:	461c      	mov	r4, r3
 800711a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800711e:	2101      	movs	r1, #1
 8007120:	4690      	mov	r8, r2
 8007122:	f7ff fd6a 	bl	8006bfa <_Balloc>
 8007126:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800712a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800712e:	4607      	mov	r7, r0
 8007130:	bb34      	cbnz	r4, 8007180 <__d2b+0x6c>
 8007132:	9201      	str	r2, [sp, #4]
 8007134:	f1b8 0200 	subs.w	r2, r8, #0
 8007138:	d027      	beq.n	800718a <__d2b+0x76>
 800713a:	a802      	add	r0, sp, #8
 800713c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007140:	f7ff fe00 	bl	8006d44 <__lo0bits>
 8007144:	9900      	ldr	r1, [sp, #0]
 8007146:	b1f0      	cbz	r0, 8007186 <__d2b+0x72>
 8007148:	9a01      	ldr	r2, [sp, #4]
 800714a:	f1c0 0320 	rsb	r3, r0, #32
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	430b      	orrs	r3, r1
 8007154:	40c2      	lsrs	r2, r0
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	bf14      	ite	ne
 8007160:	2102      	movne	r1, #2
 8007162:	2101      	moveq	r1, #1
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	6139      	str	r1, [r7, #16]
 8007168:	b1c4      	cbz	r4, 800719c <__d2b+0x88>
 800716a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800716e:	4404      	add	r4, r0
 8007170:	6034      	str	r4, [r6, #0]
 8007172:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007176:	6028      	str	r0, [r5, #0]
 8007178:	4638      	mov	r0, r7
 800717a:	b002      	add	sp, #8
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007184:	e7d5      	b.n	8007132 <__d2b+0x1e>
 8007186:	6179      	str	r1, [r7, #20]
 8007188:	e7e7      	b.n	800715a <__d2b+0x46>
 800718a:	a801      	add	r0, sp, #4
 800718c:	f7ff fdda 	bl	8006d44 <__lo0bits>
 8007190:	2101      	movs	r1, #1
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	6139      	str	r1, [r7, #16]
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	3020      	adds	r0, #32
 800719a:	e7e5      	b.n	8007168 <__d2b+0x54>
 800719c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80071a4:	6030      	str	r0, [r6, #0]
 80071a6:	6918      	ldr	r0, [r3, #16]
 80071a8:	f7ff fdad 	bl	8006d06 <__hi0bits>
 80071ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80071b0:	e7e1      	b.n	8007176 <__d2b+0x62>

080071b2 <_calloc_r>:
 80071b2:	b538      	push	{r3, r4, r5, lr}
 80071b4:	fb02 f401 	mul.w	r4, r2, r1
 80071b8:	4621      	mov	r1, r4
 80071ba:	f7fe fa2b 	bl	8005614 <_malloc_r>
 80071be:	4605      	mov	r5, r0
 80071c0:	b118      	cbz	r0, 80071ca <_calloc_r+0x18>
 80071c2:	4622      	mov	r2, r4
 80071c4:	2100      	movs	r1, #0
 80071c6:	f7fe fa1d 	bl	8005604 <memset>
 80071ca:	4628      	mov	r0, r5
 80071cc:	bd38      	pop	{r3, r4, r5, pc}

080071ce <__ascii_wctomb>:
 80071ce:	b149      	cbz	r1, 80071e4 <__ascii_wctomb+0x16>
 80071d0:	2aff      	cmp	r2, #255	; 0xff
 80071d2:	bf8b      	itete	hi
 80071d4:	238a      	movhi	r3, #138	; 0x8a
 80071d6:	700a      	strbls	r2, [r1, #0]
 80071d8:	6003      	strhi	r3, [r0, #0]
 80071da:	2001      	movls	r0, #1
 80071dc:	bf88      	it	hi
 80071de:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80071e2:	4770      	bx	lr
 80071e4:	4608      	mov	r0, r1
 80071e6:	4770      	bx	lr

080071e8 <_init>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr

080071f4 <_fini>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr
